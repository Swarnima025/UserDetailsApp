{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst validate_1 = require(\"../../compile/validate\");\n\nconst code_1 = require(\"../code\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst additionalProperties_1 = require(\"./additionalProperties\");\n\nconst def = {\n  keyword: \"properties\",\n  type: \"object\",\n  schemaType: \"object\",\n\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      parentSchema,\n      data,\n      it\n    } = cxt;\n\n    if (it.opts.removeAdditional === \"all\" && parentSchema.additionalProperties === undefined) {\n      additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, \"additionalProperties\"));\n    }\n\n    const allProps = (0, code_1.allSchemaProperties)(schema);\n\n    for (const prop of allProps) {\n      it.definedProperties.add(prop);\n    }\n\n    if (it.opts.unevaluated && allProps.length && it.props !== true) {\n      it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);\n    }\n\n    const properties = allProps.filter(p => !(0, util_1.alwaysValidSchema)(it, schema[p]));\n    if (properties.length === 0) return;\n    const valid = gen.name(\"valid\");\n\n    for (const prop of properties) {\n      if (hasDefault(prop)) {\n        applyPropertySchema(prop);\n      } else {\n        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));\n        applyPropertySchema(prop);\n        if (!it.allErrors) gen.else().var(valid, true);\n        gen.endIf();\n      }\n\n      cxt.it.definedProperties.add(prop);\n      cxt.ok(valid);\n    }\n\n    function hasDefault(prop) {\n      return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;\n    }\n\n    function applyPropertySchema(prop) {\n      cxt.subschema({\n        keyword: \"properties\",\n        schemaProp: prop,\n        dataProp: prop\n      }, valid);\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/applicator/properties.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst validate_1 = require(\"../../compile/validate\");\nconst code_1 = require(\"../code\");\nconst util_1 = require(\"../../compile/util\");\nconst additionalProperties_1 = require(\"./additionalProperties\");\nconst def = {\n    keyword: \"properties\",\n    type: \"object\",\n    schemaType: \"object\",\n    code(cxt) {\n        const { gen, schema, parentSchema, data, it } = cxt;\n        if (it.opts.removeAdditional === \"all\" && parentSchema.additionalProperties === undefined) {\n            additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, \"additionalProperties\"));\n        }\n        const allProps = (0, code_1.allSchemaProperties)(schema);\n        for (const prop of allProps) {\n            it.definedProperties.add(prop);\n        }\n        if (it.opts.unevaluated && allProps.length && it.props !== true) {\n            it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);\n        }\n        const properties = allProps.filter((p) => !(0, util_1.alwaysValidSchema)(it, schema[p]));\n        if (properties.length === 0)\n            return;\n        const valid = gen.name(\"valid\");\n        for (const prop of properties) {\n            if (hasDefault(prop)) {\n                applyPropertySchema(prop);\n            }\n            else {\n                gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));\n                applyPropertySchema(prop);\n                if (!it.allErrors)\n                    gen.else().var(valid, true);\n                gen.endIf();\n            }\n            cxt.it.definedProperties.add(prop);\n            cxt.ok(valid);\n        }\n        function hasDefault(prop) {\n            return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;\n        }\n        function applyPropertySchema(prop) {\n            cxt.subschema({\n                keyword: \"properties\",\n                schemaProp: prop,\n                dataProp: prop,\n            }, valid);\n        }\n    },\n};\nexports.default = def;\n//# sourceMappingURL=properties.js.map"]},"metadata":{},"sourceType":"script"}