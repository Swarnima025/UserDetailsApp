{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst error = {\n  message: _ref => {\n    let {\n      schemaCode\n    } = _ref;\n    return (0, codegen_1.str)`must match format \"${schemaCode}\"`;\n  },\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)`{format: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: \"format\",\n  type: [\"number\", \"string\"],\n  schemaType: \"string\",\n  $data: true,\n  error,\n\n  code(cxt, ruleType) {\n    const {\n      gen,\n      data,\n      $data,\n      schema,\n      schemaCode,\n      it\n    } = cxt;\n    const {\n      opts,\n      errSchemaPath,\n      schemaEnv,\n      self\n    } = it;\n    if (!opts.validateFormats) return;\n    if ($data) validate$DataFormat();else validateFormat();\n\n    function validate$DataFormat() {\n      const fmts = gen.scopeValue(\"formats\", {\n        ref: self.formats,\n        code: opts.code.formats\n      });\n      const fDef = gen.const(\"fDef\", (0, codegen_1._)`${fmts}[${schemaCode}]`);\n      const fType = gen.let(\"fType\");\n      const format = gen.let(\"format\"); // TODO simplify\n\n      gen.if((0, codegen_1._)`typeof ${fDef} == \"object\" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._)`${fDef}.type || \"string\"`).assign(format, (0, codegen_1._)`${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._)`\"string\"`).assign(format, fDef));\n      cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));\n\n      function unknownFmt() {\n        if (opts.strictSchema === false) return codegen_1.nil;\n        return (0, codegen_1._)`${schemaCode} && !${format}`;\n      }\n\n      function invalidFmt() {\n        const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : (0, codegen_1._)`${format}(${data})`;\n        const validData = (0, codegen_1._)`(typeof ${format} == \"function\" ? ${callFormat} : ${format}.test(${data}))`;\n        return (0, codegen_1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;\n      }\n    }\n\n    function validateFormat() {\n      const formatDef = self.formats[schema];\n\n      if (!formatDef) {\n        unknownFormat();\n        return;\n      }\n\n      if (formatDef === true) return;\n      const [fmtType, format, fmtRef] = getFormat(formatDef);\n      if (fmtType === ruleType) cxt.pass(validCondition());\n\n      function unknownFormat() {\n        if (opts.strictSchema === false) {\n          self.logger.warn(unknownMsg());\n          return;\n        }\n\n        throw new Error(unknownMsg());\n\n        function unknownMsg() {\n          return `unknown format \"${schema}\" ignored in schema at path \"${errSchemaPath}\"`;\n        }\n      }\n\n      function getFormat(fmtDef) {\n        const code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema)}` : undefined;\n        const fmt = gen.scopeValue(\"formats\", {\n          key: schema,\n          ref: fmtDef,\n          code\n        });\n\n        if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n          return [fmtDef.type || \"string\", fmtDef.validate, (0, codegen_1._)`${fmt}.validate`];\n        }\n\n        return [\"string\", fmtDef, fmt];\n      }\n\n      function validCondition() {\n        if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n          if (!schemaEnv.$async) throw new Error(\"async format in sync schema\");\n          return (0, codegen_1._)`await ${fmtRef}(${data})`;\n        }\n\n        return typeof format == \"function\" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;\n      }\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/format/format.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must match format \"${schemaCode}\"`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{format: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"format\",\n    type: [\"number\", \"string\"],\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code(cxt, ruleType) {\n        const { gen, data, $data, schema, schemaCode, it } = cxt;\n        const { opts, errSchemaPath, schemaEnv, self } = it;\n        if (!opts.validateFormats)\n            return;\n        if ($data)\n            validate$DataFormat();\n        else\n            validateFormat();\n        function validate$DataFormat() {\n            const fmts = gen.scopeValue(\"formats\", {\n                ref: self.formats,\n                code: opts.code.formats,\n            });\n            const fDef = gen.const(\"fDef\", (0, codegen_1._) `${fmts}[${schemaCode}]`);\n            const fType = gen.let(\"fType\");\n            const format = gen.let(\"format\");\n            // TODO simplify\n            gen.if((0, codegen_1._) `typeof ${fDef} == \"object\" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._) `${fDef}.type || \"string\"`).assign(format, (0, codegen_1._) `${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._) `\"string\"`).assign(format, fDef));\n            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));\n            function unknownFmt() {\n                if (opts.strictSchema === false)\n                    return codegen_1.nil;\n                return (0, codegen_1._) `${schemaCode} && !${format}`;\n            }\n            function invalidFmt() {\n                const callFormat = schemaEnv.$async\n                    ? (0, codegen_1._) `(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`\n                    : (0, codegen_1._) `${format}(${data})`;\n                const validData = (0, codegen_1._) `(typeof ${format} == \"function\" ? ${callFormat} : ${format}.test(${data}))`;\n                return (0, codegen_1._) `${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;\n            }\n        }\n        function validateFormat() {\n            const formatDef = self.formats[schema];\n            if (!formatDef) {\n                unknownFormat();\n                return;\n            }\n            if (formatDef === true)\n                return;\n            const [fmtType, format, fmtRef] = getFormat(formatDef);\n            if (fmtType === ruleType)\n                cxt.pass(validCondition());\n            function unknownFormat() {\n                if (opts.strictSchema === false) {\n                    self.logger.warn(unknownMsg());\n                    return;\n                }\n                throw new Error(unknownMsg());\n                function unknownMsg() {\n                    return `unknown format \"${schema}\" ignored in schema at path \"${errSchemaPath}\"`;\n                }\n            }\n            function getFormat(fmtDef) {\n                const code = fmtDef instanceof RegExp\n                    ? (0, codegen_1.regexpCode)(fmtDef)\n                    : opts.code.formats\n                        ? (0, codegen_1._) `${opts.code.formats}${(0, codegen_1.getProperty)(schema)}`\n                        : undefined;\n                const fmt = gen.scopeValue(\"formats\", { key: schema, ref: fmtDef, code });\n                if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n                    return [fmtDef.type || \"string\", fmtDef.validate, (0, codegen_1._) `${fmt}.validate`];\n                }\n                return [\"string\", fmtDef, fmt];\n            }\n            function validCondition() {\n                if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n                    if (!schemaEnv.$async)\n                        throw new Error(\"async format in sync schema\");\n                    return (0, codegen_1._) `await ${fmtRef}(${data})`;\n                }\n                return typeof format == \"function\" ? (0, codegen_1._) `${fmtRef}(${data})` : (0, codegen_1._) `${fmtRef}.test(${data})`;\n            }\n        }\n    },\n};\nexports.default = def;\n//# sourceMappingURL=format.js.map"]},"metadata":{},"sourceType":"script"}