{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst ucs2length_1 = require(\"../../runtime/ucs2length\");\n\nconst error = {\n  message(_ref) {\n    let {\n      keyword,\n      schemaCode\n    } = _ref;\n    const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n    return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;\n  },\n\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)`{limit: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: [\"maxLength\", \"minLength\"],\n  type: \"string\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      keyword,\n      data,\n      schemaCode,\n      it\n    } = cxt;\n    const op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n    const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;\n    cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/limitLength.ts"],"names":[],"mappings":";;;;;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAEA,MAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,OAAsB;AAAA,QAArB;AAAC,MAAA,OAAD;AAAU,MAAA;AAAV,KAAqB;AAC3B,UAAM,IAAI,GAAG,OAAO,KAAK,WAAZ,GAA0B,MAA1B,GAAmC,OAAhD;AACA,WAAO,CAAA,GAAA,SAAA,CAAA,GAAA,CAAG,iBAAiB,IAAI,SAAS,UAAU,aAAlD;AACD,GAJmC;;AAKpC,EAAA,MAAM,EAAE;AAAA,QAAC;AAAC,MAAA;AAAD,KAAD;AAAA,WAAkB,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,WAAW,UAAU,GAAxC;AAAA;AAL4B,CAAtC;AAQA,MAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,CAAC,WAAD,EAAc,WAAd,CADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAE,IAJ0B;AAKjC,EAAA,KALiC;;AAMjC,EAAA,IAAI,CAAC,GAAD,EAAgB;AAClB,UAAM;AAAC,MAAA,OAAD;AAAU,MAAA,IAAV;AAAgB,MAAA,UAAhB;AAA4B,MAAA;AAA5B,QAAkC,GAAxC;AACA,UAAM,EAAE,GAAG,OAAO,KAAK,WAAZ,GAA0B,SAAA,CAAA,SAAA,CAAU,EAApC,GAAyC,SAAA,CAAA,SAAA,CAAU,EAA9D;AACA,UAAM,GAAG,GACP,EAAE,CAAC,IAAH,CAAQ,OAAR,KAAoB,KAApB,GAA4B,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,GAAG,IAAI,SAApC,GAAgD,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,GAAG,CAAA,GAAA,MAAA,CAAA,OAAA,EAAQ,GAAG,CAAC,GAAZ,EAAiB,YAAA,CAAA,OAAjB,CAA4B,IAAI,IAAI,GAD1F;AAEA,IAAA,GAAG,CAAC,SAAJ,CAAc,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,GAAG,GAAG,IAAI,EAAE,IAAI,UAAU,EAAzC;AACD;;AAZgC,CAAnC;AAeA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst ucs2length_1 = require(\"../../runtime/ucs2length\");\nconst error = {\n    message({ keyword, schemaCode }) {\n        const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} characters`;\n    },\n    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: [\"maxLength\", \"minLength\"],\n    type: \"string\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode, it } = cxt;\n        const op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        const len = it.opts.unicode === false ? (0, codegen_1._) `${data}.length` : (0, codegen_1._) `${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;\n        cxt.fail$data((0, codegen_1._) `${len} ${op} ${schemaCode}`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=limitLength.js.map"]},"metadata":{},"sourceType":"script"}