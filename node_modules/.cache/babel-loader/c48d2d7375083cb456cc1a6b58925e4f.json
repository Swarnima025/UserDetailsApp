{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst error = {\n  message(_ref) {\n    let {\n      keyword,\n      schemaCode\n    } = _ref;\n    const comp = keyword === \"maxItems\" ? \"more\" : \"fewer\";\n    return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;\n  },\n\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)`{limit: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: [\"maxItems\", \"minItems\"],\n  type: \"array\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      keyword,\n      data,\n      schemaCode\n    } = cxt;\n    const op = keyword === \"maxItems\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n    cxt.fail$data((0, codegen_1._)`${data}.length ${op} ${schemaCode}`);\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/limitItems.ts"],"names":[],"mappings":";;;;;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,MAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,OAAsB;AAAA,QAArB;AAAC,MAAA,OAAD;AAAU,MAAA;AAAV,KAAqB;AAC3B,UAAM,IAAI,GAAG,OAAO,KAAK,UAAZ,GAAyB,MAAzB,GAAkC,OAA/C;AACA,WAAO,CAAA,GAAA,SAAA,CAAA,GAAA,CAAG,iBAAiB,IAAI,SAAS,UAAU,QAAlD;AACD,GAJmC;;AAKpC,EAAA,MAAM,EAAE;AAAA,QAAC;AAAC,MAAA;AAAD,KAAD;AAAA,WAAkB,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,WAAW,UAAU,GAAxC;AAAA;AAL4B,CAAtC;AAQA,MAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,CAAC,UAAD,EAAa,UAAb,CADwB;AAEjC,EAAA,IAAI,EAAE,OAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAE,IAJ0B;AAKjC,EAAA,KALiC;;AAMjC,EAAA,IAAI,CAAC,GAAD,EAAgB;AAClB,UAAM;AAAC,MAAA,OAAD;AAAU,MAAA,IAAV;AAAgB,MAAA;AAAhB,QAA8B,GAApC;AACA,UAAM,EAAE,GAAG,OAAO,KAAK,UAAZ,GAAyB,SAAA,CAAA,SAAA,CAAU,EAAnC,GAAwC,SAAA,CAAA,SAAA,CAAU,EAA7D;AACA,IAAA,GAAG,CAAC,SAAJ,CAAc,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,GAAG,IAAI,WAAW,EAAE,IAAI,UAAU,EAAjD;AACD;;AAVgC,CAAnC;AAaA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message({ keyword, schemaCode }) {\n        const comp = keyword === \"maxItems\" ? \"more\" : \"fewer\";\n        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} items`;\n    },\n    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: [\"maxItems\", \"minItems\"],\n    type: \"array\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode } = cxt;\n        const op = keyword === \"maxItems\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        cxt.fail$data((0, codegen_1._) `${data}.length ${op} ${schemaCode}`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=limitItems.js.map"]},"metadata":{},"sourceType":"script"}