{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swarnima.mazumdar\\\\Desktop\\\\Contact-app\\\\src\\\\components\\\\ImageInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst readFileAsDataURL = file => new Promise(resolve => {\n  const reader = new FileReader();\n\n  reader.onload = event => {\n    resolve(event.target.result);\n  };\n\n  reader.readAsDataURL(file);\n});\n\nconst resizeImage = (imageURL, canvas, maxHeight) => new Promise(resolve => {\n  const image = new Image();\n\n  image.onload = () => {\n    const context = canvas.getContext(\"2d\");\n\n    if (image.height > maxHeight) {\n      image.width *= maxHeight / image.height;\n      image.height = maxHeight;\n    }\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    canvas.width = image.width;\n    canvas.height = image.height;\n    context.drawImage(image, 0, 0, image.width, image.height);\n    resolve(canvas.toDataURL(\"image/jpeg\"));\n  };\n\n  image.src = imageURL;\n});\n/**\r\n * A custom <input> that dynamically reads and resizes image files before\r\n * submitting them to the server as data URLs. Also, shows a preview of the image.\r\n */\n\n\nconst ImageInput = _ref => {\n  _s();\n\n  let {\n    maxHeight,\n    className,\n    name\n  } = _ref;\n  let fileInput;\n  const [value, setValue] = useState(\"\");\n  const [canvas, setCanvas] = useState(\"\");\n  const style = {\n    position: \"relative\"\n  };\n\n  const handleFormReset = () => {\n    setValue(\"\");\n  };\n\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n\n    if (file && file.type.match(/^image\\//)) {\n      readFileAsDataURL(file).then(originalURL => {\n        resizeImage(originalURL, canvas, maxHeight).then(url => {\n          setValue(url);\n        });\n      });\n    } else {\n      setValue(\"\");\n    }\n  };\n\n  useEffect(() => {\n    setCanvas(document.createElement(\"canvas\"));\n    fileInput.form.addEventListener(\"reset\", handleFormReset);\n    return () => {\n      if (fileInput) {\n        fileInput.form.removeEventListener(\"reset\", handleFormReset);\n      }\n    };\n  }, [fileInput]);\n\n  if (value) {\n    style.backgroundImage = `url(\"${value}\")`;\n    style.backgroundRepeat = \"no-repeat\";\n    style.backgroundPosition = \"center\";\n    style.backgroundSize = \"cover\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    style: style,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"hidden\",\n      name: name,\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: node => fileInput = node,\n      type: \"file\",\n      onChange: handleFileChange,\n      style: {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        opacity: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ImageInput, \"hqrd6TgKn/+1mfx+ANVrgTWITp0=\");\n\n_c = ImageInput;\nImageInput.propTypes = {\n  className: PropTypes.string,\n  name: PropTypes.string,\n  maxHeight: PropTypes.number\n};\nexport default ImageInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageInput\");","map":{"version":3,"sources":["C:/Users/swarnima.mazumdar/Desktop/Contact-app/src/components/ImageInput.js"],"names":["useState","useEffect","PropTypes","readFileAsDataURL","file","Promise","resolve","reader","FileReader","onload","event","target","result","readAsDataURL","resizeImage","imageURL","canvas","maxHeight","image","Image","context","getContext","height","width","clearRect","drawImage","toDataURL","src","ImageInput","className","name","fileInput","value","setValue","setCanvas","style","position","handleFormReset","handleFileChange","files","type","match","then","originalURL","url","document","createElement","form","addEventListener","removeEventListener","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","node","top","left","opacity","propTypes","string","number"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,iBAAiB,GAAIC,IAAD,IACxB,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvB,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AAEAD,EAAAA,MAAM,CAACE,MAAP,GAAiBC,KAAD,IAAW;AACzBJ,IAAAA,OAAO,CAACI,KAAK,CAACC,MAAN,CAAaC,MAAd,CAAP;AACD,GAFD;;AAIAL,EAAAA,MAAM,CAACM,aAAP,CAAqBT,IAArB;AACD,CARD,CADF;;AAWA,MAAMU,WAAW,GAAG,CAACC,QAAD,EAAWC,MAAX,EAAmBC,SAAnB,KAClB,IAAIZ,OAAJ,CAAaC,OAAD,IAAa;AACvB,QAAMY,KAAK,GAAG,IAAIC,KAAJ,EAAd;;AAEAD,EAAAA,KAAK,CAACT,MAAN,GAAe,MAAM;AACnB,UAAMW,OAAO,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAhB;;AAEA,QAAIH,KAAK,CAACI,MAAN,GAAeL,SAAnB,EAA8B;AAC5BC,MAAAA,KAAK,CAACK,KAAN,IAAeN,SAAS,GAAGC,KAAK,CAACI,MAAjC;AACAJ,MAAAA,KAAK,CAACI,MAAN,GAAeL,SAAf;AACD;;AAEDG,IAAAA,OAAO,CAACI,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBR,MAAM,CAACO,KAA/B,EAAsCP,MAAM,CAACM,MAA7C;AACAN,IAAAA,MAAM,CAACO,KAAP,GAAeL,KAAK,CAACK,KAArB;AACAP,IAAAA,MAAM,CAACM,MAAP,GAAgBJ,KAAK,CAACI,MAAtB;AAEAF,IAAAA,OAAO,CAACK,SAAR,CAAkBP,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+BA,KAAK,CAACK,KAArC,EAA4CL,KAAK,CAACI,MAAlD;AAEAhB,IAAAA,OAAO,CAACU,MAAM,CAACU,SAAP,CAAiB,YAAjB,CAAD,CAAP;AACD,GAfD;;AAiBAR,EAAAA,KAAK,CAACS,GAAN,GAAYZ,QAAZ;AACD,CArBD,CADF;AAwBA;AACA;AACA;AACA;;;AAEA,MAAMa,UAAU,GAAG,QAAoC;AAAA;;AAAA,MAAnC;AAAEX,IAAAA,SAAF;AAAaY,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,GAAmC;AACrD,MAAIC,SAAJ;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACgB,MAAD,EAASkB,SAAT,IAAsBlC,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAMmC,KAAK,GAAG;AACZC,IAAAA,QAAQ,EAAE;AADE,GAAd;;AAIA,QAAMC,eAAe,GAAG,MAAM;AAC5BJ,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAFD;;AAIA,QAAMK,gBAAgB,GAAI5B,KAAD,IAAW;AAClC,UAAMN,IAAI,GAAGM,KAAK,CAACC,MAAN,CAAa4B,KAAb,CAAmB,CAAnB,CAAb;;AAEA,QAAInC,IAAI,IAAIA,IAAI,CAACoC,IAAL,CAAUC,KAAV,CAAgB,UAAhB,CAAZ,EAAyC;AACvCtC,MAAAA,iBAAiB,CAACC,IAAD,CAAjB,CAAwBsC,IAAxB,CAA8BC,WAAD,IAAiB;AAC5C7B,QAAAA,WAAW,CAAC6B,WAAD,EAAc3B,MAAd,EAAsBC,SAAtB,CAAX,CAA4CyB,IAA5C,CAAkDE,GAAD,IAAS;AACxDX,UAAAA,QAAQ,CAACW,GAAD,CAAR;AACD,SAFD;AAGD,OAJD;AAKD,KAND,MAMO;AACLX,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD;AACF,GAZD;;AAcAhC,EAAAA,SAAS,CAAC,MAAM;AACdiC,IAAAA,SAAS,CAACW,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAD,CAAT;AACAf,IAAAA,SAAS,CAACgB,IAAV,CAAeC,gBAAf,CAAgC,OAAhC,EAAyCX,eAAzC;AAEA,WAAO,MAAM;AACX,UAAIN,SAAJ,EAAe;AACbA,QAAAA,SAAS,CAACgB,IAAV,CAAeE,mBAAf,CAAmC,OAAnC,EAA4CZ,eAA5C;AACD;AACF,KAJD;AAKD,GATQ,EASN,CAACN,SAAD,CATM,CAAT;;AAWA,MAAIC,KAAJ,EAAW;AACTG,IAAAA,KAAK,CAACe,eAAN,GAAyB,QAAOlB,KAAM,IAAtC;AACAG,IAAAA,KAAK,CAACgB,gBAAN,GAAyB,WAAzB;AACAhB,IAAAA,KAAK,CAACiB,kBAAN,GAA2B,QAA3B;AACAjB,IAAAA,KAAK,CAACkB,cAAN,GAAuB,OAAvB;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAExB,SAAhB;AAA2B,IAAA,KAAK,EAAEM,KAAlC;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,IAAI,EAAEL,IAA3B;AAAiC,MAAA,KAAK,EAAEE;AAAxC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,GAAG,EAAGsB,IAAD,IAAWvB,SAAS,GAAGuB,IAD9B;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,QAAQ,EAAEhB,gBAHZ;AAIE,MAAA,KAAK,EAAE;AACLF,QAAAA,QAAQ,EAAE,UADL;AAELmB,QAAAA,GAAG,EAAE,CAFA;AAGLC,QAAAA,IAAI,EAAE,CAHD;AAILjC,QAAAA,KAAK,EAAE,MAJF;AAKLD,QAAAA,MAAM,EAAE,MALH;AAMLmC,QAAAA,OAAO,EAAE;AANJ;AAJT;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAhED;;GAAM7B,U;;KAAAA,U;AAkENA,UAAU,CAAC8B,SAAX,GAAuB;AACrB7B,EAAAA,SAAS,EAAE3B,SAAS,CAACyD,MADA;AAErB7B,EAAAA,IAAI,EAAE5B,SAAS,CAACyD,MAFK;AAGrB1C,EAAAA,SAAS,EAAEf,SAAS,CAAC0D;AAHA,CAAvB;AAMA,eAAehC,UAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst readFileAsDataURL = (file) =>\r\n  new Promise((resolve) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event) => {\r\n      resolve(event.target.result);\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  });\r\n\r\nconst resizeImage = (imageURL, canvas, maxHeight) =>\r\n  new Promise((resolve) => {\r\n    const image = new Image();\r\n\r\n    image.onload = () => {\r\n      const context = canvas.getContext(\"2d\");\r\n\r\n      if (image.height > maxHeight) {\r\n        image.width *= maxHeight / image.height;\r\n        image.height = maxHeight;\r\n      }\r\n\r\n      context.clearRect(0, 0, canvas.width, canvas.height);\r\n      canvas.width = image.width;\r\n      canvas.height = image.height;\r\n\r\n      context.drawImage(image, 0, 0, image.width, image.height);\r\n\r\n      resolve(canvas.toDataURL(\"image/jpeg\"));\r\n    };\r\n\r\n    image.src = imageURL;\r\n  });\r\n\r\n/**\r\n * A custom <input> that dynamically reads and resizes image files before\r\n * submitting them to the server as data URLs. Also, shows a preview of the image.\r\n */\r\n\r\nconst ImageInput = ({ maxHeight, className, name }) => {\r\n  let fileInput;\r\n\r\n  const [value, setValue] = useState(\"\");\r\n  const [canvas, setCanvas] = useState(\"\");\r\n\r\n  const style = {\r\n    position: \"relative\",\r\n  };\r\n\r\n  const handleFormReset = () => {\r\n    setValue(\"\");\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n\r\n    if (file && file.type.match(/^image\\//)) {\r\n      readFileAsDataURL(file).then((originalURL) => {\r\n        resizeImage(originalURL, canvas, maxHeight).then((url) => {\r\n          setValue(url);\r\n        });\r\n      });\r\n    } else {\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setCanvas(document.createElement(\"canvas\"));\r\n    fileInput.form.addEventListener(\"reset\", handleFormReset);\r\n\r\n    return () => {\r\n      if (fileInput) {\r\n        fileInput.form.removeEventListener(\"reset\", handleFormReset);\r\n      }\r\n    };\r\n  }, [fileInput]);\r\n\r\n  if (value) {\r\n    style.backgroundImage = `url(\"${value}\")`;\r\n    style.backgroundRepeat = \"no-repeat\";\r\n    style.backgroundPosition = \"center\";\r\n    style.backgroundSize = \"cover\";\r\n  }\r\n\r\n  return (\r\n    <div className={className} style={style}>\r\n      <input type=\"hidden\" name={name} value={value} />\r\n      <input\r\n        ref={(node) => (fileInput = node)}\r\n        type=\"file\"\r\n        onChange={handleFileChange}\r\n        style={{\r\n          position: \"absolute\",\r\n          top: 0,\r\n          left: 0,\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          opacity: 0,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nImageInput.propTypes = {\r\n  className: PropTypes.string,\r\n  name: PropTypes.string,\r\n  maxHeight: PropTypes.number,\r\n};\r\n\r\nexport default ImageInput;\r\n"]},"metadata":{},"sourceType":"module"}