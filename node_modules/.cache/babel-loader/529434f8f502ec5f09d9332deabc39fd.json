{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;\n\nconst rules_1 = require(\"../rules\");\n\nconst applicability_1 = require(\"./applicability\");\n\nconst errors_1 = require(\"../errors\");\n\nconst codegen_1 = require(\"../codegen\");\n\nconst util_1 = require(\"../util\");\n\nvar DataType;\n\n(function (DataType) {\n  DataType[DataType[\"Correct\"] = 0] = \"Correct\";\n  DataType[DataType[\"Wrong\"] = 1] = \"Wrong\";\n})(DataType = exports.DataType || (exports.DataType = {}));\n\nfunction getSchemaTypes(schema) {\n  const types = getJSONTypes(schema.type);\n  const hasNull = types.includes(\"null\");\n\n  if (hasNull) {\n    if (schema.nullable === false) throw new Error(\"type: null contradicts nullable: false\");\n  } else {\n    if (!types.length && schema.nullable !== undefined) {\n      throw new Error('\"nullable\" cannot be used without \"type\"');\n    }\n\n    if (schema.nullable === true) types.push(\"null\");\n  }\n\n  return types;\n}\n\nexports.getSchemaTypes = getSchemaTypes;\n\nfunction getJSONTypes(ts) {\n  const types = Array.isArray(ts) ? ts : ts ? [ts] : [];\n  if (types.every(rules_1.isJSONType)) return types;\n  throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"));\n}\n\nexports.getJSONTypes = getJSONTypes;\n\nfunction coerceAndCheckDataType(it, types) {\n  const {\n    gen,\n    data,\n    opts\n  } = it;\n  const coerceTo = coerceToTypes(types, opts.coerceTypes);\n  const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));\n\n  if (checkTypes) {\n    const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);\n    gen.if(wrongType, () => {\n      if (coerceTo.length) coerceData(it, types, coerceTo);else reportTypeError(it);\n    });\n  }\n\n  return checkTypes;\n}\n\nexports.coerceAndCheckDataType = coerceAndCheckDataType;\nconst COERCIBLE = new Set([\"string\", \"number\", \"integer\", \"boolean\", \"null\"]);\n\nfunction coerceToTypes(types, coerceTypes) {\n  return coerceTypes ? types.filter(t => COERCIBLE.has(t) || coerceTypes === \"array\" && t === \"array\") : [];\n}\n\nfunction coerceData(it, types, coerceTo) {\n  const {\n    gen,\n    data,\n    opts\n  } = it;\n  const dataType = gen.let(\"dataType\", (0, codegen_1._)`typeof ${data}`);\n  const coerced = gen.let(\"coerced\", (0, codegen_1._)`undefined`);\n\n  if (opts.coerceTypes === \"array\") {\n    gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));\n  }\n\n  gen.if((0, codegen_1._)`${coerced} !== undefined`);\n\n  for (const t of coerceTo) {\n    if (COERCIBLE.has(t) || t === \"array\" && opts.coerceTypes === \"array\") {\n      coerceSpecificType(t);\n    }\n  }\n\n  gen.else();\n  reportTypeError(it);\n  gen.endIf();\n  gen.if((0, codegen_1._)`${coerced} !== undefined`, () => {\n    gen.assign(data, coerced);\n    assignParentData(it, coerced);\n  });\n\n  function coerceSpecificType(t) {\n    switch (t) {\n      case \"string\":\n        gen.elseIf((0, codegen_1._)`${dataType} == \"number\" || ${dataType} == \"boolean\"`).assign(coerced, (0, codegen_1._)`\"\" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`\"\"`);\n        return;\n\n      case \"number\":\n        gen.elseIf((0, codegen_1._)`${dataType} == \"boolean\" || ${data} === null\n              || (${dataType} == \"string\" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);\n        return;\n\n      case \"integer\":\n        gen.elseIf((0, codegen_1._)`${dataType} === \"boolean\" || ${data} === null\n              || (${dataType} === \"string\" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);\n        return;\n\n      case \"boolean\":\n        gen.elseIf((0, codegen_1._)`${data} === \"false\" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === \"true\" || ${data} === 1`).assign(coerced, true);\n        return;\n\n      case \"null\":\n        gen.elseIf((0, codegen_1._)`${data} === \"\" || ${data} === 0 || ${data} === false`);\n        gen.assign(coerced, null);\n        return;\n\n      case \"array\":\n        gen.elseIf((0, codegen_1._)`${dataType} === \"string\" || ${dataType} === \"number\"\n              || ${dataType} === \"boolean\" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);\n    }\n  }\n}\n\nfunction assignParentData(_ref, expr) {\n  let {\n    gen,\n    parentData,\n    parentDataProperty\n  } = _ref;\n  // TODO use gen.property\n  gen.if((0, codegen_1._)`${parentData} !== undefined`, () => gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));\n}\n\nfunction checkDataType(dataType, data, strictNums) {\n  let correct = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DataType.Correct;\n  const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;\n  let cond;\n\n  switch (dataType) {\n    case \"null\":\n      return (0, codegen_1._)`${data} ${EQ} null`;\n\n    case \"array\":\n      cond = (0, codegen_1._)`Array.isArray(${data})`;\n      break;\n\n    case \"object\":\n      cond = (0, codegen_1._)`${data} && typeof ${data} == \"object\" && !Array.isArray(${data})`;\n      break;\n\n    case \"integer\":\n      cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);\n      break;\n\n    case \"number\":\n      cond = numCond();\n      break;\n\n    default:\n      return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;\n  }\n\n  return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);\n\n  function numCond() {\n    let _cond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : codegen_1.nil;\n\n    return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == \"number\"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);\n  }\n}\n\nexports.checkDataType = checkDataType;\n\nfunction checkDataTypes(dataTypes, data, strictNums, correct) {\n  if (dataTypes.length === 1) {\n    return checkDataType(dataTypes[0], data, strictNums, correct);\n  }\n\n  let cond;\n  const types = (0, util_1.toHash)(dataTypes);\n\n  if (types.array && types.object) {\n    const notObj = (0, codegen_1._)`typeof ${data} != \"object\"`;\n    cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;\n    delete types.null;\n    delete types.array;\n    delete types.object;\n  } else {\n    cond = codegen_1.nil;\n  }\n\n  if (types.number) delete types.integer;\n\n  for (const t in types) cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));\n\n  return cond;\n}\n\nexports.checkDataTypes = checkDataTypes;\nconst typeError = {\n  message: _ref2 => {\n    let {\n      schema\n    } = _ref2;\n    return `must be ${schema}`;\n  },\n  params: _ref3 => {\n    let {\n      schema,\n      schemaValue\n    } = _ref3;\n    return typeof schema == \"string\" ? (0, codegen_1._)`{type: ${schema}}` : (0, codegen_1._)`{type: ${schemaValue}}`;\n  }\n};\n\nfunction reportTypeError(it) {\n  const cxt = getTypeErrorContext(it);\n  (0, errors_1.reportError)(cxt, typeError);\n}\n\nexports.reportTypeError = reportTypeError;\n\nfunction getTypeErrorContext(it) {\n  const {\n    gen,\n    data,\n    schema\n  } = it;\n  const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, \"type\");\n  return {\n    gen,\n    keyword: \"type\",\n    data,\n    schema: schema.type,\n    schemaCode,\n    schemaValue: schemaCode,\n    parentSchema: schema,\n    params: {},\n    it\n  };\n}","map":{"version":3,"sources":["../../../lib/compile/validate/dataType.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;\nconst rules_1 = require(\"../rules\");\nconst applicability_1 = require(\"./applicability\");\nconst errors_1 = require(\"../errors\");\nconst codegen_1 = require(\"../codegen\");\nconst util_1 = require(\"../util\");\nvar DataType;\n(function (DataType) {\n    DataType[DataType[\"Correct\"] = 0] = \"Correct\";\n    DataType[DataType[\"Wrong\"] = 1] = \"Wrong\";\n})(DataType = exports.DataType || (exports.DataType = {}));\nfunction getSchemaTypes(schema) {\n    const types = getJSONTypes(schema.type);\n    const hasNull = types.includes(\"null\");\n    if (hasNull) {\n        if (schema.nullable === false)\n            throw new Error(\"type: null contradicts nullable: false\");\n    }\n    else {\n        if (!types.length && schema.nullable !== undefined) {\n            throw new Error('\"nullable\" cannot be used without \"type\"');\n        }\n        if (schema.nullable === true)\n            types.push(\"null\");\n    }\n    return types;\n}\nexports.getSchemaTypes = getSchemaTypes;\nfunction getJSONTypes(ts) {\n    const types = Array.isArray(ts) ? ts : ts ? [ts] : [];\n    if (types.every(rules_1.isJSONType))\n        return types;\n    throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"));\n}\nexports.getJSONTypes = getJSONTypes;\nfunction coerceAndCheckDataType(it, types) {\n    const { gen, data, opts } = it;\n    const coerceTo = coerceToTypes(types, opts.coerceTypes);\n    const checkTypes = types.length > 0 &&\n        !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));\n    if (checkTypes) {\n        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);\n        gen.if(wrongType, () => {\n            if (coerceTo.length)\n                coerceData(it, types, coerceTo);\n            else\n                reportTypeError(it);\n        });\n    }\n    return checkTypes;\n}\nexports.coerceAndCheckDataType = coerceAndCheckDataType;\nconst COERCIBLE = new Set([\"string\", \"number\", \"integer\", \"boolean\", \"null\"]);\nfunction coerceToTypes(types, coerceTypes) {\n    return coerceTypes\n        ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === \"array\" && t === \"array\"))\n        : [];\n}\nfunction coerceData(it, types, coerceTo) {\n    const { gen, data, opts } = it;\n    const dataType = gen.let(\"dataType\", (0, codegen_1._) `typeof ${data}`);\n    const coerced = gen.let(\"coerced\", (0, codegen_1._) `undefined`);\n    if (opts.coerceTypes === \"array\") {\n        gen.if((0, codegen_1._) `${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen\n            .assign(data, (0, codegen_1._) `${data}[0]`)\n            .assign(dataType, (0, codegen_1._) `typeof ${data}`)\n            .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));\n    }\n    gen.if((0, codegen_1._) `${coerced} !== undefined`);\n    for (const t of coerceTo) {\n        if (COERCIBLE.has(t) || (t === \"array\" && opts.coerceTypes === \"array\")) {\n            coerceSpecificType(t);\n        }\n    }\n    gen.else();\n    reportTypeError(it);\n    gen.endIf();\n    gen.if((0, codegen_1._) `${coerced} !== undefined`, () => {\n        gen.assign(data, coerced);\n        assignParentData(it, coerced);\n    });\n    function coerceSpecificType(t) {\n        switch (t) {\n            case \"string\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} == \"number\" || ${dataType} == \"boolean\"`)\n                    .assign(coerced, (0, codegen_1._) `\"\" + ${data}`)\n                    .elseIf((0, codegen_1._) `${data} === null`)\n                    .assign(coerced, (0, codegen_1._) `\"\"`);\n                return;\n            case \"number\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} == \"boolean\" || ${data} === null\n              || (${dataType} == \"string\" && ${data} && ${data} == +${data})`)\n                    .assign(coerced, (0, codegen_1._) `+${data}`);\n                return;\n            case \"integer\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} === \"boolean\" || ${data} === null\n              || (${dataType} === \"string\" && ${data} && ${data} == +${data} && !(${data} % 1))`)\n                    .assign(coerced, (0, codegen_1._) `+${data}`);\n                return;\n            case \"boolean\":\n                gen\n                    .elseIf((0, codegen_1._) `${data} === \"false\" || ${data} === 0 || ${data} === null`)\n                    .assign(coerced, false)\n                    .elseIf((0, codegen_1._) `${data} === \"true\" || ${data} === 1`)\n                    .assign(coerced, true);\n                return;\n            case \"null\":\n                gen.elseIf((0, codegen_1._) `${data} === \"\" || ${data} === 0 || ${data} === false`);\n                gen.assign(coerced, null);\n                return;\n            case \"array\":\n                gen\n                    .elseIf((0, codegen_1._) `${dataType} === \"string\" || ${dataType} === \"number\"\n              || ${dataType} === \"boolean\" || ${data} === null`)\n                    .assign(coerced, (0, codegen_1._) `[${data}]`);\n        }\n    }\n}\nfunction assignParentData({ gen, parentData, parentDataProperty }, expr) {\n    // TODO use gen.property\n    gen.if((0, codegen_1._) `${parentData} !== undefined`, () => gen.assign((0, codegen_1._) `${parentData}[${parentDataProperty}]`, expr));\n}\nfunction checkDataType(dataType, data, strictNums, correct = DataType.Correct) {\n    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;\n    let cond;\n    switch (dataType) {\n        case \"null\":\n            return (0, codegen_1._) `${data} ${EQ} null`;\n        case \"array\":\n            cond = (0, codegen_1._) `Array.isArray(${data})`;\n            break;\n        case \"object\":\n            cond = (0, codegen_1._) `${data} && typeof ${data} == \"object\" && !Array.isArray(${data})`;\n            break;\n        case \"integer\":\n            cond = numCond((0, codegen_1._) `!(${data} % 1) && !isNaN(${data})`);\n            break;\n        case \"number\":\n            cond = numCond();\n            break;\n        default:\n            return (0, codegen_1._) `typeof ${data} ${EQ} ${dataType}`;\n    }\n    return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);\n    function numCond(_cond = codegen_1.nil) {\n        return (0, codegen_1.and)((0, codegen_1._) `typeof ${data} == \"number\"`, _cond, strictNums ? (0, codegen_1._) `isFinite(${data})` : codegen_1.nil);\n    }\n}\nexports.checkDataType = checkDataType;\nfunction checkDataTypes(dataTypes, data, strictNums, correct) {\n    if (dataTypes.length === 1) {\n        return checkDataType(dataTypes[0], data, strictNums, correct);\n    }\n    let cond;\n    const types = (0, util_1.toHash)(dataTypes);\n    if (types.array && types.object) {\n        const notObj = (0, codegen_1._) `typeof ${data} != \"object\"`;\n        cond = types.null ? notObj : (0, codegen_1._) `!${data} || ${notObj}`;\n        delete types.null;\n        delete types.array;\n        delete types.object;\n    }\n    else {\n        cond = codegen_1.nil;\n    }\n    if (types.number)\n        delete types.integer;\n    for (const t in types)\n        cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));\n    return cond;\n}\nexports.checkDataTypes = checkDataTypes;\nconst typeError = {\n    message: ({ schema }) => `must be ${schema}`,\n    params: ({ schema, schemaValue }) => typeof schema == \"string\" ? (0, codegen_1._) `{type: ${schema}}` : (0, codegen_1._) `{type: ${schemaValue}}`,\n};\nfunction reportTypeError(it) {\n    const cxt = getTypeErrorContext(it);\n    (0, errors_1.reportError)(cxt, typeError);\n}\nexports.reportTypeError = reportTypeError;\nfunction getTypeErrorContext(it) {\n    const { gen, data, schema } = it;\n    const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, \"type\");\n    return {\n        gen,\n        keyword: \"type\",\n        data,\n        schema: schema.type,\n        schemaCode,\n        schemaValue: schemaCode,\n        parentSchema: schema,\n        params: {},\n        it,\n    };\n}\n//# sourceMappingURL=dataType.js.map"]},"metadata":{},"sourceType":"script"}