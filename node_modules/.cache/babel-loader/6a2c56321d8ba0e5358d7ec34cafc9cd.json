{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst code_1 = require(\"../code\");\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst error = {\n  message: _ref => {\n    let {\n      params: {\n        missingProperty\n      }\n    } = _ref;\n    return (0, codegen_1.str)`must have required property '${missingProperty}'`;\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        missingProperty\n      }\n    } = _ref2;\n    return (0, codegen_1._)`{missingProperty: ${missingProperty}}`;\n  }\n};\nconst def = {\n  keyword: \"required\",\n  type: \"object\",\n  schemaType: \"array\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      schemaCode,\n      data,\n      $data,\n      it\n    } = cxt;\n    const {\n      opts\n    } = it;\n    if (!$data && schema.length === 0) return;\n    const useLoop = schema.length >= opts.loopRequired;\n    if (it.allErrors) allErrorsMode();else exitOnErrorMode();\n\n    if (opts.strictRequired) {\n      const props = cxt.parentSchema.properties;\n      const {\n        definedProperties\n      } = cxt.it;\n\n      for (const requiredKey of schema) {\n        if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {\n          const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;\n          const msg = `required property \"${requiredKey}\" is not defined at \"${schemaPath}\" (strictRequired)`;\n          (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);\n        }\n      }\n    }\n\n    function allErrorsMode() {\n      if (useLoop || $data) {\n        cxt.block$data(codegen_1.nil, loopAllRequired);\n      } else {\n        for (const prop of schema) {\n          (0, code_1.checkReportMissingProp)(cxt, prop);\n        }\n      }\n    }\n\n    function exitOnErrorMode() {\n      const missing = gen.let(\"missing\");\n\n      if (useLoop || $data) {\n        const valid = gen.let(\"valid\", true);\n        cxt.block$data(valid, () => loopUntilMissing(missing, valid));\n        cxt.ok(valid);\n      } else {\n        gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));\n        (0, code_1.reportMissingProp)(cxt, missing);\n        gen.else();\n      }\n    }\n\n    function loopAllRequired() {\n      gen.forOf(\"prop\", schemaCode, prop => {\n        cxt.setParams({\n          missingProperty: prop\n        });\n        gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());\n      });\n    }\n\n    function loopUntilMissing(missing, valid) {\n      cxt.setParams({\n        missingProperty: missing\n      });\n      gen.forOf(missing, schemaCode, () => {\n        gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));\n        gen.if((0, codegen_1.not)(valid), () => {\n          cxt.error();\n          gen.break();\n        });\n      }, codegen_1.nil);\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/required.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst code_1 = require(\"../code\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n    message: ({ params: { missingProperty } }) => (0, codegen_1.str) `must have required property '${missingProperty}'`,\n    params: ({ params: { missingProperty } }) => (0, codegen_1._) `{missingProperty: ${missingProperty}}`,\n};\nconst def = {\n    keyword: \"required\",\n    type: \"object\",\n    schemaType: \"array\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, schema, schemaCode, data, $data, it } = cxt;\n        const { opts } = it;\n        if (!$data && schema.length === 0)\n            return;\n        const useLoop = schema.length >= opts.loopRequired;\n        if (it.allErrors)\n            allErrorsMode();\n        else\n            exitOnErrorMode();\n        if (opts.strictRequired) {\n            const props = cxt.parentSchema.properties;\n            const { definedProperties } = cxt.it;\n            for (const requiredKey of schema) {\n                if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {\n                    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;\n                    const msg = `required property \"${requiredKey}\" is not defined at \"${schemaPath}\" (strictRequired)`;\n                    (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);\n                }\n            }\n        }\n        function allErrorsMode() {\n            if (useLoop || $data) {\n                cxt.block$data(codegen_1.nil, loopAllRequired);\n            }\n            else {\n                for (const prop of schema) {\n                    (0, code_1.checkReportMissingProp)(cxt, prop);\n                }\n            }\n        }\n        function exitOnErrorMode() {\n            const missing = gen.let(\"missing\");\n            if (useLoop || $data) {\n                const valid = gen.let(\"valid\", true);\n                cxt.block$data(valid, () => loopUntilMissing(missing, valid));\n                cxt.ok(valid);\n            }\n            else {\n                gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));\n                (0, code_1.reportMissingProp)(cxt, missing);\n                gen.else();\n            }\n        }\n        function loopAllRequired() {\n            gen.forOf(\"prop\", schemaCode, (prop) => {\n                cxt.setParams({ missingProperty: prop });\n                gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());\n            });\n        }\n        function loopUntilMissing(missing, valid) {\n            cxt.setParams({ missingProperty: missing });\n            gen.forOf(missing, schemaCode, () => {\n                gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));\n                gen.if((0, codegen_1.not)(valid), () => {\n                    cxt.error();\n                    gen.break();\n                });\n            }, codegen_1.nil);\n        }\n    },\n};\nexports.default = def;\n//# sourceMappingURL=required.js.map"]},"metadata":{},"sourceType":"script"}