{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst ops = codegen_1.operators;\nconst KWDs = {\n  maximum: {\n    okStr: \"<=\",\n    ok: ops.LTE,\n    fail: ops.GT\n  },\n  minimum: {\n    okStr: \">=\",\n    ok: ops.GTE,\n    fail: ops.LT\n  },\n  exclusiveMaximum: {\n    okStr: \"<\",\n    ok: ops.LT,\n    fail: ops.GTE\n  },\n  exclusiveMinimum: {\n    okStr: \">\",\n    ok: ops.GT,\n    fail: ops.LTE\n  }\n};\nconst error = {\n  message: _ref => {\n    let {\n      keyword,\n      schemaCode\n    } = _ref;\n    return (0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`;\n  },\n  params: _ref2 => {\n    let {\n      keyword,\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: Object.keys(KWDs),\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      keyword,\n      data,\n      schemaCode\n    } = cxt;\n    cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/limitNumber.ts"],"names":[],"mappings":";;;;;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,MAAM,GAAG,GAAG,SAAA,CAAA,SAAZ;AAMA,MAAM,IAAI,GAA4D;AACpE,EAAA,OAAO,EAAE;AAAC,IAAA,KAAK,EAAE,IAAR;AAAc,IAAA,EAAE,EAAE,GAAG,CAAC,GAAtB;AAA2B,IAAA,IAAI,EAAE,GAAG,CAAC;AAArC,GAD2D;AAEpE,EAAA,OAAO,EAAE;AAAC,IAAA,KAAK,EAAE,IAAR;AAAc,IAAA,EAAE,EAAE,GAAG,CAAC,GAAtB;AAA2B,IAAA,IAAI,EAAE,GAAG,CAAC;AAArC,GAF2D;AAGpE,EAAA,gBAAgB,EAAE;AAAC,IAAA,KAAK,EAAE,GAAR;AAAa,IAAA,EAAE,EAAE,GAAG,CAAC,EAArB;AAAyB,IAAA,IAAI,EAAE,GAAG,CAAC;AAAnC,GAHkD;AAIpE,EAAA,gBAAgB,EAAE;AAAC,IAAA,KAAK,EAAE,GAAR;AAAa,IAAA,EAAE,EAAE,GAAG,CAAC,EAArB;AAAyB,IAAA,IAAI,EAAE,GAAG,CAAC;AAAnC;AAJkD,CAAtE;AAaA,MAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,EAAE;AAAA,QAAC;AAAC,MAAA,OAAD;AAAU,MAAA;AAAV,KAAD;AAAA,WAA2B,CAAA,GAAA,SAAA,CAAA,GAAA,CAAG,WAAW,IAAI,CAAC,OAAD,CAAJ,CAAqB,KAAK,IAAI,UAAU,EAAjF;AAAA,GAD2B;AAEpC,EAAA,MAAM,EAAE;AAAA,QAAC;AAAC,MAAA,OAAD;AAAU,MAAA;AAAV,KAAD;AAAA,WACN,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,gBAAgB,IAAI,CAAC,OAAD,CAAJ,CAAqB,KAAK,YAAY,UAAU,GAD3D;AAAA;AAF4B,CAAtC;AAMA,MAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,MAAM,CAAC,IAAP,CAAY,IAAZ,CADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAE,IAJ0B;AAKjC,EAAA,KALiC;;AAMjC,EAAA,IAAI,CAAC,GAAD,EAAgB;AAClB,UAAM;AAAC,MAAA,OAAD;AAAU,MAAA,IAAV;AAAgB,MAAA;AAAhB,QAA8B,GAApC;AACA,IAAA,GAAG,CAAC,SAAJ,CAAc,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,GAAG,IAAI,IAAI,IAAI,CAAC,OAAD,CAAJ,CAAqB,IAAI,IAAI,UAAU,aAAa,IAAI,GAAlF;AACD;;AATgC,CAAnC;AAYA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst ops = codegen_1.operators;\nconst KWDs = {\n    maximum: { okStr: \"<=\", ok: ops.LTE, fail: ops.GT },\n    minimum: { okStr: \">=\", ok: ops.GTE, fail: ops.LT },\n    exclusiveMaximum: { okStr: \"<\", ok: ops.LT, fail: ops.GTE },\n    exclusiveMinimum: { okStr: \">\", ok: ops.GT, fail: ops.LTE },\n};\nconst error = {\n    message: ({ keyword, schemaCode }) => (0, codegen_1.str) `must be ${KWDs[keyword].okStr} ${schemaCode}`,\n    params: ({ keyword, schemaCode }) => (0, codegen_1._) `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: Object.keys(KWDs),\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode } = cxt;\n        cxt.fail$data((0, codegen_1._) `${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=limitNumber.js.map"]},"metadata":{},"sourceType":"script"}