{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst types_1 = require(\"../discriminator/types\");\n\nconst compile_1 = require(\"../../compile\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst error = {\n  message: _ref => {\n    let {\n      params: {\n        discrError,\n        tagName\n      }\n    } = _ref;\n    return discrError === types_1.DiscrError.Tag ? `tag \"${tagName}\" must be string` : `value of tag \"${tagName}\" must be in oneOf`;\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        discrError,\n        tag,\n        tagName\n      }\n    } = _ref2;\n    return (0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`;\n  }\n};\nconst def = {\n  keyword: \"discriminator\",\n  type: \"object\",\n  schemaType: \"object\",\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      data,\n      schema,\n      parentSchema,\n      it\n    } = cxt;\n    const {\n      oneOf\n    } = parentSchema;\n\n    if (!it.opts.discriminator) {\n      throw new Error(\"discriminator: requires discriminator option\");\n    }\n\n    const tagName = schema.propertyName;\n    if (typeof tagName != \"string\") throw new Error(\"discriminator: requires propertyName\");\n    if (schema.mapping) throw new Error(\"discriminator: mapping is not supported\");\n    if (!oneOf) throw new Error(\"discriminator: requires oneOf keyword\");\n    const valid = gen.let(\"valid\", false);\n    const tag = gen.const(\"tag\", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);\n    gen.if((0, codegen_1._)`typeof ${tag} == \"string\"`, () => validateMapping(), () => cxt.error(false, {\n      discrError: types_1.DiscrError.Tag,\n      tag,\n      tagName\n    }));\n    cxt.ok(valid);\n\n    function validateMapping() {\n      const mapping = getMapping();\n      gen.if(false);\n\n      for (const tagValue in mapping) {\n        gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);\n        gen.assign(valid, applyTagSchema(mapping[tagValue]));\n      }\n\n      gen.else();\n      cxt.error(false, {\n        discrError: types_1.DiscrError.Mapping,\n        tag,\n        tagName\n      });\n      gen.endIf();\n    }\n\n    function applyTagSchema(schemaProp) {\n      const _valid = gen.name(\"valid\");\n\n      const schCxt = cxt.subschema({\n        keyword: \"oneOf\",\n        schemaProp\n      }, _valid);\n      cxt.mergeEvaluated(schCxt, codegen_1.Name);\n      return _valid;\n    }\n\n    function getMapping() {\n      var _a;\n\n      const oneOfMapping = {};\n      const topRequired = hasRequired(parentSchema);\n      let tagRequired = true;\n\n      for (let i = 0; i < oneOf.length; i++) {\n        let sch = oneOf[i];\n\n        if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {\n          sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);\n          if (sch instanceof compile_1.SchemaEnv) sch = sch.schema;\n        }\n\n        const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];\n\n        if (typeof propSch != \"object\") {\n          throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have \"properties/${tagName}\"`);\n        }\n\n        tagRequired = tagRequired && (topRequired || hasRequired(sch));\n        addMappings(propSch, i);\n      }\n\n      if (!tagRequired) throw new Error(`discriminator: \"${tagName}\" must be required`);\n      return oneOfMapping;\n\n      function hasRequired(_ref3) {\n        let {\n          required\n        } = _ref3;\n        return Array.isArray(required) && required.includes(tagName);\n      }\n\n      function addMappings(sch, i) {\n        if (sch.const) {\n          addMapping(sch.const, i);\n        } else if (sch.enum) {\n          for (const tagValue of sch.enum) {\n            addMapping(tagValue, i);\n          }\n        } else {\n          throw new Error(`discriminator: \"properties/${tagName}\" must have \"const\" or \"enum\"`);\n        }\n      }\n\n      function addMapping(tagValue, i) {\n        if (typeof tagValue != \"string\" || tagValue in oneOfMapping) {\n          throw new Error(`discriminator: \"${tagName}\" values must be unique strings`);\n        }\n\n        oneOfMapping[tagValue] = i;\n      }\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/discriminator/index.ts"],"names":[],"mappings":";;;;;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAIA,MAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,EAAE;AAAA,QAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA,UAAD;AAAa,QAAA;AAAb;AAAT,KAAD;AAAA,WACP,UAAU,KAAK,OAAA,CAAA,UAAA,CAAW,GAA1B,GACI,QAAQ,OAAO,kBADnB,GAEI,iBAAiB,OAAO,oBAHrB;AAAA,GAD2B;AAKpC,EAAA,MAAM,EAAE;AAAA,QAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA,UAAD;AAAa,QAAA,GAAb;AAAkB,QAAA;AAAlB;AAAT,KAAD;AAAA,WACN,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,WAAW,UAAU,UAAU,OAAO,eAAe,GAAG,GADnD;AAAA;AAL4B,CAAtC;AASA,MAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,eADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAJiC;;AAKjC,EAAA,IAAI,CAAC,GAAD,EAAgB;AAClB,UAAM;AAAC,MAAA,GAAD;AAAM,MAAA,IAAN;AAAY,MAAA,MAAZ;AAAoB,MAAA,YAApB;AAAkC,MAAA;AAAlC,QAAwC,GAA9C;AACA,UAAM;AAAC,MAAA;AAAD,QAAU,YAAhB;;AACA,QAAI,CAAC,EAAE,CAAC,IAAH,CAAQ,aAAb,EAA4B;AAC1B,YAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,UAAM,OAAO,GAAG,MAAM,CAAC,YAAvB;AACA,QAAI,OAAO,OAAP,IAAkB,QAAtB,EAAgC,MAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN;AAChC,QAAI,MAAM,CAAC,OAAX,EAAoB,MAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACpB,QAAI,CAAC,KAAL,EAAY,MAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACZ,UAAM,KAAK,GAAG,GAAG,CAAC,GAAJ,CAAQ,OAAR,EAAiB,KAAjB,CAAd;AACA,UAAM,GAAG,GAAG,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,GAAG,IAAI,GAAG,CAAA,GAAA,SAAA,CAAA,WAAA,EAAY,OAAZ,CAAoB,EAAhD,CAAZ;AACA,IAAA,GAAG,CAAC,EAAJ,CACE,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,UAAU,GAAG,cADhB,EAEE,MAAM,eAAe,EAFvB,EAGE,MAAM,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB;AAAC,MAAA,UAAU,EAAE,OAAA,CAAA,UAAA,CAAW,GAAxB;AAA6B,MAAA,GAA7B;AAAkC,MAAA;AAAlC,KAAjB,CAHR;AAKA,IAAA,GAAG,CAAC,EAAJ,CAAO,KAAP;;AAEA,aAAS,eAAT,GAAwB;AACtB,YAAM,OAAO,GAAG,UAAU,EAA1B;AACA,MAAA,GAAG,CAAC,EAAJ,CAAO,KAAP;;AACA,WAAK,MAAM,QAAX,IAAuB,OAAvB,EAAgC;AAC9B,QAAA,GAAG,CAAC,MAAJ,CAAW,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,GAAG,GAAG,QAAQ,QAAQ,EAAlC;AACA,QAAA,GAAG,CAAC,MAAJ,CAAW,KAAX,EAAkB,cAAc,CAAC,OAAO,CAAC,QAAD,CAAR,CAAhC;AACD;;AACD,MAAA,GAAG,CAAC,IAAJ;AACA,MAAA,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB;AAAC,QAAA,UAAU,EAAE,OAAA,CAAA,UAAA,CAAW,OAAxB;AAAiC,QAAA,GAAjC;AAAsC,QAAA;AAAtC,OAAjB;AACA,MAAA,GAAG,CAAC,KAAJ;AACD;;AAED,aAAS,cAAT,CAAwB,UAAxB,EAA2C;AACzC,YAAM,MAAM,GAAG,GAAG,CAAC,IAAJ,CAAS,OAAT,CAAf;;AACA,YAAM,MAAM,GAAG,GAAG,CAAC,SAAJ,CAAc;AAAC,QAAA,OAAO,EAAE,OAAV;AAAmB,QAAA;AAAnB,OAAd,EAA8C,MAA9C,CAAf;AACA,MAAA,GAAG,CAAC,cAAJ,CAAmB,MAAnB,EAA2B,SAAA,CAAA,IAA3B;AACA,aAAO,MAAP;AACD;;AAED,aAAS,UAAT,GAAmB;;;AACjB,YAAM,YAAY,GAA6B,EAA/C;AACA,YAAM,WAAW,GAAG,WAAW,CAAC,YAAD,CAA/B;AACA,UAAI,WAAW,GAAG,IAAlB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,YAAI,GAAG,GAAG,KAAK,CAAC,CAAD,CAAf;;AACA,YAAI,CAAA,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,IAAL,KAAa,CAAC,CAAA,GAAA,MAAA,CAAA,oBAAA,EAAqB,GAArB,EAA0B,EAAE,CAAC,IAAH,CAAQ,KAAlC,CAAlB,EAA4D;AAC1D,UAAA,GAAG,GAAG,SAAA,CAAA,UAAA,CAAW,IAAX,CAAgB,EAAE,CAAC,IAAnB,EAAyB,EAAE,CAAC,SAAH,CAAa,IAAtC,EAA4C,EAAE,CAAC,MAA/C,EAAuD,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,IAA5D,CAAN;AACA,cAAI,GAAG,YAAY,SAAA,CAAA,SAAnB,EAA8B,GAAG,GAAG,GAAG,CAAC,MAAV;AAC/B;;AACD,cAAM,OAAO,GAAG,CAAA,EAAA,GAAA,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,UAAL,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAe,EAAA,CAAG,OAAH,CAA/B;;AACA,YAAI,OAAO,OAAP,IAAkB,QAAtB,EAAgC;AAC9B,gBAAM,IAAI,KAAJ,CACJ,iFAAiF,OAAO,GADpF,CAAN;AAGD;;AACD,QAAA,WAAW,GAAG,WAAW,KAAK,WAAW,IAAI,WAAW,CAAC,GAAD,CAA/B,CAAzB;AACA,QAAA,WAAW,CAAC,OAAD,EAAU,CAAV,CAAX;AACD;;AACD,UAAI,CAAC,WAAL,EAAkB,MAAM,IAAI,KAAJ,CAAU,mBAAmB,OAAO,oBAApC,CAAN;AAClB,aAAO,YAAP;;AAEA,eAAS,WAAT,QAAgD;AAAA,YAA3B;AAAC,UAAA;AAAD,SAA2B;AAC9C,eAAO,KAAK,CAAC,OAAN,CAAc,QAAd,KAA2B,QAAQ,CAAC,QAAT,CAAkB,OAAlB,CAAlC;AACD;;AAED,eAAS,WAAT,CAAqB,GAArB,EAA2C,CAA3C,EAAoD;AAClD,YAAI,GAAG,CAAC,KAAR,EAAe;AACb,UAAA,UAAU,CAAC,GAAG,CAAC,KAAL,EAAY,CAAZ,CAAV;AACD,SAFD,MAEO,IAAI,GAAG,CAAC,IAAR,EAAc;AACnB,eAAK,MAAM,QAAX,IAAuB,GAAG,CAAC,IAA3B,EAAiC;AAC/B,YAAA,UAAU,CAAC,QAAD,EAAW,CAAX,CAAV;AACD;AACF,SAJM,MAIA;AACL,gBAAM,IAAI,KAAJ,CAAU,8BAA8B,OAAO,+BAA/C,CAAN;AACD;AACF;;AAED,eAAS,UAAT,CAAoB,QAApB,EAAuC,CAAvC,EAAgD;AAC9C,YAAI,OAAO,QAAP,IAAmB,QAAnB,IAA+B,QAAQ,IAAI,YAA/C,EAA6D;AAC3D,gBAAM,IAAI,KAAJ,CAAU,mBAAmB,OAAO,iCAApC,CAAN;AACD;;AACD,QAAA,YAAY,CAAC,QAAD,CAAZ,GAAyB,CAAzB;AACD;AACF;AACF;;AAxFgC,CAAnC;AA2FA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst types_1 = require(\"../discriminator/types\");\nconst compile_1 = require(\"../../compile\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n    message: ({ params: { discrError, tagName } }) => discrError === types_1.DiscrError.Tag\n        ? `tag \"${tagName}\" must be string`\n        : `value of tag \"${tagName}\" must be in oneOf`,\n    params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1._) `{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,\n};\nconst def = {\n    keyword: \"discriminator\",\n    type: \"object\",\n    schemaType: \"object\",\n    error,\n    code(cxt) {\n        const { gen, data, schema, parentSchema, it } = cxt;\n        const { oneOf } = parentSchema;\n        if (!it.opts.discriminator) {\n            throw new Error(\"discriminator: requires discriminator option\");\n        }\n        const tagName = schema.propertyName;\n        if (typeof tagName != \"string\")\n            throw new Error(\"discriminator: requires propertyName\");\n        if (schema.mapping)\n            throw new Error(\"discriminator: mapping is not supported\");\n        if (!oneOf)\n            throw new Error(\"discriminator: requires oneOf keyword\");\n        const valid = gen.let(\"valid\", false);\n        const tag = gen.const(\"tag\", (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(tagName)}`);\n        gen.if((0, codegen_1._) `typeof ${tag} == \"string\"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1.DiscrError.Tag, tag, tagName }));\n        cxt.ok(valid);\n        function validateMapping() {\n            const mapping = getMapping();\n            gen.if(false);\n            for (const tagValue in mapping) {\n                gen.elseIf((0, codegen_1._) `${tag} === ${tagValue}`);\n                gen.assign(valid, applyTagSchema(mapping[tagValue]));\n            }\n            gen.else();\n            cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag, tagName });\n            gen.endIf();\n        }\n        function applyTagSchema(schemaProp) {\n            const _valid = gen.name(\"valid\");\n            const schCxt = cxt.subschema({ keyword: \"oneOf\", schemaProp }, _valid);\n            cxt.mergeEvaluated(schCxt, codegen_1.Name);\n            return _valid;\n        }\n        function getMapping() {\n            var _a;\n            const oneOfMapping = {};\n            const topRequired = hasRequired(parentSchema);\n            let tagRequired = true;\n            for (let i = 0; i < oneOf.length; i++) {\n                let sch = oneOf[i];\n                if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {\n                    sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);\n                    if (sch instanceof compile_1.SchemaEnv)\n                        sch = sch.schema;\n                }\n                const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];\n                if (typeof propSch != \"object\") {\n                    throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have \"properties/${tagName}\"`);\n                }\n                tagRequired = tagRequired && (topRequired || hasRequired(sch));\n                addMappings(propSch, i);\n            }\n            if (!tagRequired)\n                throw new Error(`discriminator: \"${tagName}\" must be required`);\n            return oneOfMapping;\n            function hasRequired({ required }) {\n                return Array.isArray(required) && required.includes(tagName);\n            }\n            function addMappings(sch, i) {\n                if (sch.const) {\n                    addMapping(sch.const, i);\n                }\n                else if (sch.enum) {\n                    for (const tagValue of sch.enum) {\n                        addMapping(tagValue, i);\n                    }\n                }\n                else {\n                    throw new Error(`discriminator: \"properties/${tagName}\" must have \"const\" or \"enum\"`);\n                }\n            }\n            function addMapping(tagValue, i) {\n                if (typeof tagValue != \"string\" || tagValue in oneOfMapping) {\n                    throw new Error(`discriminator: \"${tagName}\" values must be unique strings`);\n                }\n                oneOfMapping[tagValue] = i;\n            }\n        }\n    },\n};\nexports.default = def;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}