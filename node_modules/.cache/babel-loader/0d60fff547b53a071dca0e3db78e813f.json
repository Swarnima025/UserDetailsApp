{"ast":null,"code":"import { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { Component, useState, useCallback, useEffect, useReducer, useMemo, createRef, forwardRef } from 'react';\nimport { isFixedItems, allowAdditionalItems, getUiOptions, ITEMS_KEY, getTemplate, TranslatableString, isCustomWidget, getWidget, optionsList, deepEquals, ERRORS_KEY, asNumber, REF_KEY, orderProperties, PROPERTIES_KEY, ADDITIONAL_PROPERTY_FLAG, ANY_OF_KEY, ONE_OF_KEY, mergeObjects, UI_OPTIONS_KEY, descriptionId, getSchemaType, ID_KEY, hasWidget, titleId, getInputProps, examplesId, ariaDescribedByIds, getSubmitButtonOptions, errorId, helpId, canExpand, parseDateString, toDateString, pad, schemaRequiresTrueValue, enumOptionsValueForIndex, enumOptionsIsSelected, optionId, enumOptionsSelectValue, enumOptionsDeselectValue, utcToLocal, localToUTC, dataURItoBlob, enumOptionsIndexForValue, englishStringTranslator, createSchemaUtils, shouldRender, UI_GLOBAL_OPTIONS_KEY, isObject as isObject$1, RJSF_ADDITONAL_PROPERTIES_FLAG, NAME_KEY } from '@rjsf/utils';\nimport get from 'lodash-es/get';\nimport isEmpty from 'lodash-es/isEmpty';\nimport _pick from 'lodash-es/pick';\nimport _toPath from 'lodash-es/toPath';\nimport cloneDeep from 'lodash-es/cloneDeep';\nimport isObject from 'lodash-es/isObject';\nimport set from 'lodash-es/set';\nimport { nanoid } from 'nanoid';\nimport omit from 'lodash-es/omit';\nimport Markdown from 'markdown-to-jsx';\nimport has from 'lodash-es/has';\nimport unset from 'lodash-es/unset';\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar _excluded$9 = [\"widget\"],\n    _excluded2 = [\"widget\"],\n    _excluded3 = [\"widget\"];\n/** Used to generate a unique ID for an element in a row */\n\nfunction generateRowId() {\n  return nanoid();\n}\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\r\n *\r\n * @param formData - The data for the form\r\n * @returns - The `formData` converted into a `KeyedFormDataType` element\r\n */\n\n\nfunction generateKeyedFormData(formData) {\n  return !Array.isArray(formData) ? [] : formData.map(function (item) {\n    return {\n      key: generateRowId(),\n      item: item\n    };\n  });\n}\n/** Converts `KeyedFormDataType` data into the inner `formData`\r\n *\r\n * @param keyedFormData - The `KeyedFormDataType` to be converted\r\n * @returns - The inner `formData` item(s) in the `keyedFormData`\r\n */\n\n\nfunction keyedToPlainFormData(keyedFormData) {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map(function (keyedItem) {\n      return keyedItem.item;\n    });\n  }\n\n  return [];\n}\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\r\n * and fixed array, allowing user to add and remove elements from the array data.\r\n */\n\n\nvar ArrayField = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(ArrayField, _Component);\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\r\n   *\r\n   * @param props - The `FieldProps` for this template\r\n   */\n\n\n  function ArrayField(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _this._getNewFormDataRow = function () {\n      var _this$props = _this.props,\n          schema = _this$props.schema,\n          registry = _this$props.registry;\n      var schemaUtils = registry.schemaUtils;\n      var itemSchema = schema.items;\n\n      if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n        itemSchema = schema.additionalItems;\n      } // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n\n\n      return schemaUtils.getDefaultFormState(itemSchema);\n    };\n\n    _this.onAddClick = function (event) {\n      _this._handleAddClick(event);\n    };\n\n    _this.onAddIndexClick = function (index) {\n      return function (event) {\n        _this._handleAddClick(event, index);\n      };\n    };\n\n    _this.onCopyIndexClick = function (index) {\n      return function (event) {\n        if (event) {\n          event.preventDefault();\n        }\n\n        var onChange = _this.props.onChange;\n        var keyedFormData = _this.state.keyedFormData;\n        var newKeyedFormDataRow = {\n          key: generateRowId(),\n          item: cloneDeep(keyedFormData[index].item)\n        };\n        var newKeyedFormData = [].concat(keyedFormData);\n\n        if (index !== undefined) {\n          newKeyedFormData.splice(index + 1, 0, newKeyedFormDataRow);\n        } else {\n          newKeyedFormData.push(newKeyedFormDataRow);\n        }\n\n        _this.setState({\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true\n        }, function () {\n          return onChange(keyedToPlainFormData(newKeyedFormData));\n        });\n      };\n    };\n\n    _this.onDropIndexClick = function (index) {\n      return function (event) {\n        if (event) {\n          event.preventDefault();\n        }\n\n        var _this$props2 = _this.props,\n            onChange = _this$props2.onChange,\n            errorSchema = _this$props2.errorSchema;\n        var keyedFormData = _this.state.keyedFormData; // refs #195: revalidate to ensure properly reindexing errors\n\n        var newErrorSchema;\n\n        if (errorSchema) {\n          newErrorSchema = {};\n\n          for (var idx in errorSchema) {\n            var i = parseInt(idx);\n\n            if (i < index) {\n              set(newErrorSchema, [i], errorSchema[idx]);\n            } else if (i > index) {\n              set(newErrorSchema, [i - 1], errorSchema[idx]);\n            }\n          }\n        }\n\n        var newKeyedFormData = keyedFormData.filter(function (_, i) {\n          return i !== index;\n        });\n\n        _this.setState({\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true\n        }, function () {\n          return onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema);\n        });\n      };\n    };\n\n    _this.onReorderClick = function (index, newIndex) {\n      return function (event) {\n        if (event) {\n          event.preventDefault();\n          event.currentTarget.blur();\n        }\n\n        var _this$props3 = _this.props,\n            onChange = _this$props3.onChange,\n            errorSchema = _this$props3.errorSchema;\n        var newErrorSchema;\n\n        if (errorSchema) {\n          newErrorSchema = {};\n\n          for (var idx in errorSchema) {\n            var i = parseInt(idx);\n\n            if (i == index) {\n              set(newErrorSchema, [newIndex], errorSchema[index]);\n            } else if (i == newIndex) {\n              set(newErrorSchema, [index], errorSchema[newIndex]);\n            } else {\n              set(newErrorSchema, [idx], errorSchema[i]);\n            }\n          }\n        }\n\n        var keyedFormData = _this.state.keyedFormData;\n\n        function reOrderArray() {\n          // Copy item\n          var _newKeyedFormData = keyedFormData.slice(); // Moves item from index to newIndex\n\n\n          _newKeyedFormData.splice(index, 1);\n\n          _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n          return _newKeyedFormData;\n        }\n\n        var newKeyedFormData = reOrderArray();\n\n        _this.setState({\n          keyedFormData: newKeyedFormData\n        }, function () {\n          return onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema);\n        });\n      };\n    };\n\n    _this.onChangeForIndex = function (index) {\n      return function (value, newErrorSchema, id) {\n        var _extends2;\n\n        var _this$props4 = _this.props,\n            formData = _this$props4.formData,\n            onChange = _this$props4.onChange,\n            errorSchema = _this$props4.errorSchema;\n        var arrayData = Array.isArray(formData) ? formData : [];\n        var newFormData = arrayData.map(function (item, i) {\n          // We need to treat undefined items as nulls to have validation.\n          // See https://github.com/tdegrunt/jsonschema/issues/206\n          var jsonValue = typeof value === 'undefined' ? null : value;\n          return index === i ? jsonValue : item;\n        });\n        onChange(newFormData, errorSchema && errorSchema && _extends({}, errorSchema, (_extends2 = {}, _extends2[index] = newErrorSchema, _extends2)), id);\n      };\n    };\n\n    _this.onSelectChange = function (value) {\n      var _this$props5 = _this.props,\n          onChange = _this$props5.onChange,\n          idSchema = _this$props5.idSchema;\n      onChange(value, undefined, idSchema && idSchema.$id);\n    };\n\n    var _props$formData = props.formData,\n        _formData = _props$formData === void 0 ? [] : _props$formData;\n\n    var _keyedFormData = generateKeyedFormData(_formData);\n\n    _this.state = {\n      keyedFormData: _keyedFormData,\n      updatedKeyedFormData: false\n    };\n    return _this;\n  }\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\r\n   * regenerates the keyed form data and returns it\r\n   *\r\n   * @param nextProps - The next set of props data\r\n   * @param prevState - The previous set of state data\r\n   */\n\n\n  ArrayField.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false\n      };\n    }\n\n    var nextFormData = Array.isArray(nextProps.formData) ? nextProps.formData : [];\n    var previousKeyedFormData = prevState.keyedFormData || [];\n    var newKeyedFormData = nextFormData.length === previousKeyedFormData.length ? previousKeyedFormData.map(function (previousKeyedFormDatum, index) {\n      return {\n        key: previousKeyedFormDatum.key,\n        item: nextFormData[index]\n      };\n    }) : generateKeyedFormData(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData\n    };\n  }\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\r\n   * the description from the schema.items, and finally the string \"Item\"\r\n   */\n  ;\n\n  var _proto = ArrayField.prototype;\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\r\n   * may be null.\r\n   *\r\n   * @param itemSchema - The schema for the item\r\n   * @return - True if the item schema type does not contain the \"null\" type\r\n   */\n\n  _proto.isItemRequired = function isItemRequired(itemSchema) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes('null');\n    } // All non-null array item types are inherently required by design\n\n\n    return itemSchema.type !== 'null';\n  }\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\r\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\r\n   * `formData` matches that value, then false is returned, otherwise true is returned.\r\n   *\r\n   * @param formItems - The list of items in the form\r\n   * @returns - True if the item is addable otherwise false\r\n   */\n  ;\n\n  _proto.canAddItem = function canAddItem(formItems) {\n    var _this$props6 = this.props,\n        schema = _this$props6.schema,\n        uiSchema = _this$props6.uiSchema,\n        registry = _this$props6.registry;\n\n    var _getUiOptions = getUiOptions(uiSchema, registry.globalUiOptions),\n        addable = _getUiOptions.addable;\n\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n\n    return addable;\n  }\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\r\n   * that the schema is fixed and allows additional items.\r\n   */\n  ;\n  /** Callback handler for when the user clicks on the add or add at index buttons. Creates a new row of keyed form data\r\n   * either at the end of the list (when index is not specified) or inserted at the `index` when it is, adding it into\r\n   * the state, and then returning `onChange()` with the plain form data converted from the keyed data\r\n   *\r\n   * @param event - The event for the click\r\n   * @param [index] - The optional index at which to add the new data\r\n   */\n\n\n  _proto._handleAddClick = function _handleAddClick(event, index) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    var onChange = this.props.onChange;\n    var keyedFormData = this.state.keyedFormData;\n    var newKeyedFormDataRow = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow()\n    };\n    var newKeyedFormData = [].concat(keyedFormData);\n\n    if (index !== undefined) {\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n    } else {\n      newKeyedFormData.push(newKeyedFormDataRow);\n    }\n\n    this.setState({\n      keyedFormData: newKeyedFormData,\n      updatedKeyedFormData: true\n    }, function () {\n      return onChange(keyedToPlainFormData(newKeyedFormData));\n    });\n  }\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\r\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\r\n   * keyed data\r\n   *\r\n   * @param event - The event for the click\r\n   */\n  ;\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\r\n   */\n\n\n  _proto.render = function render() {\n    var _this$props7 = this.props,\n        schema = _this$props7.schema,\n        uiSchema = _this$props7.uiSchema,\n        idSchema = _this$props7.idSchema,\n        registry = _this$props7.registry;\n    var schemaUtils = registry.schemaUtils,\n        translateString = registry.translateString;\n\n    if (!(ITEMS_KEY in schema)) {\n      var uiOptions = getUiOptions(uiSchema);\n      var UnsupportedFieldTemplate = getTemplate('UnsupportedFieldTemplate', registry, uiOptions);\n      return jsx(UnsupportedFieldTemplate, {\n        schema: schema,\n        idSchema: idSchema,\n        reason: translateString(TranslatableString.MissingItems),\n        registry: registry\n      });\n    }\n\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n\n    if (isCustomWidget(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n\n    return this.renderNormalArray();\n  }\n  /** Renders a normal array without any limitations of length\r\n   */\n  ;\n\n  _proto.renderNormalArray = function renderNormalArray() {\n    var _this2 = this;\n\n    var _this$props8 = this.props,\n        schema = _this$props8.schema,\n        _this$props8$uiSchema = _this$props8.uiSchema,\n        uiSchema = _this$props8$uiSchema === void 0 ? {} : _this$props8$uiSchema,\n        errorSchema = _this$props8.errorSchema,\n        idSchema = _this$props8.idSchema,\n        name = _this$props8.name,\n        _this$props8$disabled = _this$props8.disabled,\n        disabled = _this$props8$disabled === void 0 ? false : _this$props8$disabled,\n        _this$props8$readonly = _this$props8.readonly,\n        readonly = _this$props8$readonly === void 0 ? false : _this$props8$readonly,\n        _this$props8$autofocu = _this$props8.autofocus,\n        autofocus = _this$props8$autofocu === void 0 ? false : _this$props8$autofocu,\n        _this$props8$required = _this$props8.required,\n        required = _this$props8$required === void 0 ? false : _this$props8$required,\n        registry = _this$props8.registry,\n        onBlur = _this$props8.onBlur,\n        onFocus = _this$props8.onFocus,\n        idPrefix = _this$props8.idPrefix,\n        _this$props8$idSepara = _this$props8.idSeparator,\n        idSeparator = _this$props8$idSepara === void 0 ? '_' : _this$props8$idSepara,\n        rawErrors = _this$props8.rawErrors;\n    var keyedFormData = this.state.keyedFormData;\n    var title = schema.title === undefined ? name : schema.title;\n    var schemaUtils = registry.schemaUtils,\n        formContext = registry.formContext;\n    var uiOptions = getUiOptions(uiSchema);\n\n    var _schemaItems = isObject(schema.items) ? schema.items : {};\n\n    var itemsSchema = schemaUtils.retrieveSchema(_schemaItems);\n    var formData = keyedToPlainFormData(this.state.keyedFormData);\n    var canAdd = this.canAddItem(formData);\n    var arrayProps = {\n      canAdd: canAdd,\n      items: keyedFormData.map(function (keyedItem, index) {\n        var key = keyedItem.key,\n            item = keyedItem.item; // While we are actually dealing with a single item of type T, the types require a T[], so cast\n\n        var itemCast = item;\n        var itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        var itemErrorSchema = errorSchema ? errorSchema[index] : undefined;\n        var itemIdPrefix = idSchema.$id + idSeparator + index;\n        var itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        return _this2.renderArrayFieldItem({\n          key: key,\n          index: index,\n          name: name && name + \"-\" + index,\n          canAdd: canAdd,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema: itemSchema,\n          itemIdSchema: itemIdSchema,\n          itemErrorSchema: itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          rawErrors: rawErrors,\n          totalItems: keyedFormData.length\n        });\n      }),\n      className: \"field field-array field-array-of-\" + itemsSchema.type,\n      disabled: disabled,\n      idSchema: idSchema,\n      uiSchema: uiSchema,\n      onAddClick: this.onAddClick,\n      readonly: readonly,\n      required: required,\n      schema: schema,\n      title: title,\n      formContext: formContext,\n      formData: formData,\n      rawErrors: rawErrors,\n      registry: registry\n    };\n    var Template = getTemplate('ArrayFieldTemplate', registry, uiOptions);\n    return jsx(Template, _extends({}, arrayProps));\n  }\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\r\n   */\n  ;\n\n  _proto.renderCustomWidget = function renderCustomWidget() {\n    var _this$props9 = this.props,\n        schema = _this$props9.schema,\n        idSchema = _this$props9.idSchema,\n        uiSchema = _this$props9.uiSchema,\n        _this$props9$disabled = _this$props9.disabled,\n        disabled = _this$props9$disabled === void 0 ? false : _this$props9$disabled,\n        _this$props9$readonly = _this$props9.readonly,\n        readonly = _this$props9$readonly === void 0 ? false : _this$props9$readonly,\n        _this$props9$autofocu = _this$props9.autofocus,\n        autofocus = _this$props9$autofocu === void 0 ? false : _this$props9$autofocu,\n        _this$props9$required = _this$props9.required,\n        required = _this$props9$required === void 0 ? false : _this$props9$required,\n        hideError = _this$props9.hideError,\n        placeholder = _this$props9.placeholder,\n        onBlur = _this$props9.onBlur,\n        onFocus = _this$props9.onFocus,\n        _this$props9$formData = _this$props9.formData,\n        items = _this$props9$formData === void 0 ? [] : _this$props9$formData,\n        registry = _this$props9.registry,\n        rawErrors = _this$props9.rawErrors,\n        name = _this$props9.name;\n    var widgets = registry.widgets,\n        formContext = registry.formContext;\n    var title = schema.title || name;\n\n    var _getUiOptions2 = getUiOptions(uiSchema),\n        widget = _getUiOptions2.widget,\n        options = _objectWithoutPropertiesLoose(_getUiOptions2, _excluded$9);\n\n    var Widget = getWidget(schema, widget, widgets);\n    return jsx(Widget, {\n      id: idSchema.$id,\n      name: name,\n      multiple: true,\n      onChange: this.onSelectChange,\n      onBlur: onBlur,\n      onFocus: onFocus,\n      options: options,\n      schema: schema,\n      uiSchema: uiSchema,\n      registry: registry,\n      value: items,\n      disabled: disabled,\n      readonly: readonly,\n      hideError: hideError,\n      required: required,\n      label: title,\n      placeholder: placeholder,\n      formContext: formContext,\n      autofocus: autofocus,\n      rawErrors: rawErrors\n    });\n  }\n  /** Renders an array as a set of checkboxes\r\n   */\n  ;\n\n  _proto.renderMultiSelect = function renderMultiSelect() {\n    var _this$props10 = this.props,\n        schema = _this$props10.schema,\n        idSchema = _this$props10.idSchema,\n        uiSchema = _this$props10.uiSchema,\n        _this$props10$formDat = _this$props10.formData,\n        items = _this$props10$formDat === void 0 ? [] : _this$props10$formDat,\n        _this$props10$disable = _this$props10.disabled,\n        disabled = _this$props10$disable === void 0 ? false : _this$props10$disable,\n        _this$props10$readonl = _this$props10.readonly,\n        readonly = _this$props10$readonl === void 0 ? false : _this$props10$readonl,\n        _this$props10$autofoc = _this$props10.autofocus,\n        autofocus = _this$props10$autofoc === void 0 ? false : _this$props10$autofoc,\n        _this$props10$require = _this$props10.required,\n        required = _this$props10$require === void 0 ? false : _this$props10$require,\n        placeholder = _this$props10.placeholder,\n        onBlur = _this$props10.onBlur,\n        onFocus = _this$props10.onFocus,\n        registry = _this$props10.registry,\n        rawErrors = _this$props10.rawErrors,\n        name = _this$props10.name;\n    var widgets = registry.widgets,\n        schemaUtils = registry.schemaUtils,\n        formContext = registry.formContext;\n    var itemsSchema = schemaUtils.retrieveSchema(schema.items, items);\n    var title = schema.title || name;\n    var enumOptions = optionsList(itemsSchema);\n\n    var _getUiOptions3 = getUiOptions(uiSchema),\n        _getUiOptions3$widget = _getUiOptions3.widget,\n        widget = _getUiOptions3$widget === void 0 ? 'select' : _getUiOptions3$widget,\n        options = _objectWithoutPropertiesLoose(_getUiOptions3, _excluded2);\n\n    var Widget = getWidget(schema, widget, widgets);\n    return jsx(Widget, {\n      id: idSchema.$id,\n      name: name,\n      multiple: true,\n      onChange: this.onSelectChange,\n      onBlur: onBlur,\n      onFocus: onFocus,\n      options: _extends({}, options, {\n        enumOptions: enumOptions\n      }),\n      schema: schema,\n      uiSchema: uiSchema,\n      registry: registry,\n      value: items,\n      disabled: disabled,\n      readonly: readonly,\n      required: required,\n      label: title,\n      placeholder: placeholder,\n      formContext: formContext,\n      autofocus: autofocus,\n      rawErrors: rawErrors\n    });\n  }\n  /** Renders an array of files using the `FileWidget`\r\n   */\n  ;\n\n  _proto.renderFiles = function renderFiles() {\n    var _this$props11 = this.props,\n        schema = _this$props11.schema,\n        uiSchema = _this$props11.uiSchema,\n        idSchema = _this$props11.idSchema,\n        name = _this$props11.name,\n        _this$props11$disable = _this$props11.disabled,\n        disabled = _this$props11$disable === void 0 ? false : _this$props11$disable,\n        _this$props11$readonl = _this$props11.readonly,\n        readonly = _this$props11$readonl === void 0 ? false : _this$props11$readonl,\n        _this$props11$autofoc = _this$props11.autofocus,\n        autofocus = _this$props11$autofoc === void 0 ? false : _this$props11$autofoc,\n        _this$props11$require = _this$props11.required,\n        required = _this$props11$require === void 0 ? false : _this$props11$require,\n        onBlur = _this$props11.onBlur,\n        onFocus = _this$props11.onFocus,\n        registry = _this$props11.registry,\n        _this$props11$formDat = _this$props11.formData,\n        items = _this$props11$formDat === void 0 ? [] : _this$props11$formDat,\n        rawErrors = _this$props11.rawErrors;\n    var title = schema.title || name;\n    var widgets = registry.widgets,\n        formContext = registry.formContext;\n\n    var _getUiOptions4 = getUiOptions(uiSchema),\n        _getUiOptions4$widget = _getUiOptions4.widget,\n        widget = _getUiOptions4$widget === void 0 ? 'files' : _getUiOptions4$widget,\n        options = _objectWithoutPropertiesLoose(_getUiOptions4, _excluded3);\n\n    var Widget = getWidget(schema, widget, widgets);\n    return jsx(Widget, {\n      options: options,\n      id: idSchema.$id,\n      name: name,\n      multiple: true,\n      onChange: this.onSelectChange,\n      onBlur: onBlur,\n      onFocus: onFocus,\n      schema: schema,\n      uiSchema: uiSchema,\n      title: title,\n      value: items,\n      disabled: disabled,\n      readonly: readonly,\n      required: required,\n      registry: registry,\n      formContext: formContext,\n      autofocus: autofocus,\n      rawErrors: rawErrors,\n      label: ''\n    });\n  }\n  /** Renders an array that has a maximum limit of items\r\n   */\n  ;\n\n  _proto.renderFixedArray = function renderFixedArray() {\n    var _this3 = this;\n\n    var _this$props12 = this.props,\n        schema = _this$props12.schema,\n        _this$props12$uiSchem = _this$props12.uiSchema,\n        uiSchema = _this$props12$uiSchem === void 0 ? {} : _this$props12$uiSchem,\n        _this$props12$formDat = _this$props12.formData,\n        formData = _this$props12$formDat === void 0 ? [] : _this$props12$formDat,\n        errorSchema = _this$props12.errorSchema,\n        idPrefix = _this$props12.idPrefix,\n        _this$props12$idSepar = _this$props12.idSeparator,\n        idSeparator = _this$props12$idSepar === void 0 ? '_' : _this$props12$idSepar,\n        idSchema = _this$props12.idSchema,\n        name = _this$props12.name,\n        _this$props12$disable = _this$props12.disabled,\n        disabled = _this$props12$disable === void 0 ? false : _this$props12$disable,\n        _this$props12$readonl = _this$props12.readonly,\n        readonly = _this$props12$readonl === void 0 ? false : _this$props12$readonl,\n        _this$props12$autofoc = _this$props12.autofocus,\n        autofocus = _this$props12$autofoc === void 0 ? false : _this$props12$autofoc,\n        _this$props12$require = _this$props12.required,\n        required = _this$props12$require === void 0 ? false : _this$props12$require,\n        registry = _this$props12.registry,\n        onBlur = _this$props12.onBlur,\n        onFocus = _this$props12.onFocus,\n        rawErrors = _this$props12.rawErrors;\n    var keyedFormData = this.state.keyedFormData;\n    var _this$props$formData = this.props.formData,\n        items = _this$props$formData === void 0 ? [] : _this$props$formData;\n    var title = schema.title || name;\n    var uiOptions = getUiOptions(uiSchema);\n    var schemaUtils = registry.schemaUtils,\n        formContext = registry.formContext;\n\n    var _schemaItems = isObject(schema.items) ? schema.items : [];\n\n    var itemSchemas = _schemaItems.map(function (item, index) {\n      return schemaUtils.retrieveSchema(item, formData[index]);\n    });\n\n    var additionalSchema = isObject(schema.additionalItems) ? schemaUtils.retrieveSchema(schema.additionalItems, formData) : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    } // These are the props passed into the render function\n\n\n    var canAdd = this.canAddItem(items) && !!additionalSchema;\n    var arrayProps = {\n      canAdd: canAdd,\n      className: 'field field-array field-array-fixed-items',\n      disabled: disabled,\n      idSchema: idSchema,\n      formData: formData,\n      items: keyedFormData.map(function (keyedItem, index) {\n        var key = keyedItem.key,\n            item = keyedItem.item; // While we are actually dealing with a single item of type T, the types require a T[], so cast\n\n        var itemCast = item;\n        var additional = index >= itemSchemas.length;\n        var itemSchema = additional && isObject(schema.additionalItems) ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast) : itemSchemas[index];\n        var itemIdPrefix = idSchema.$id + idSeparator + index;\n        var itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        var itemUiSchema = additional ? uiSchema.additionalItems || {} : Array.isArray(uiSchema.items) ? uiSchema.items[index] : uiSchema.items || {};\n        var itemErrorSchema = errorSchema ? errorSchema[index] : undefined;\n        return _this3.renderArrayFieldItem({\n          key: key,\n          index: index,\n          name: name && name + \"-\" + index,\n          canAdd: canAdd,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema: itemSchema,\n          itemData: itemCast,\n          itemUiSchema: itemUiSchema,\n          itemIdSchema: itemIdSchema,\n          itemErrorSchema: itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          rawErrors: rawErrors,\n          totalItems: keyedFormData.length\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly: readonly,\n      required: required,\n      registry: registry,\n      schema: schema,\n      uiSchema: uiSchema,\n      title: title,\n      formContext: formContext,\n      rawErrors: rawErrors\n    };\n    var Template = getTemplate('ArrayFieldTemplate', registry, uiOptions);\n    return jsx(Template, _extends({}, arrayProps));\n  }\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\r\n   * back to the `ArrayFieldItemTemplate`.\r\n   *\r\n   * @param props - The props for the individual array item to be rendered\r\n   */\n  ;\n\n  _proto.renderArrayFieldItem = function renderArrayFieldItem(props) {\n    var key = props.key,\n        index = props.index,\n        name = props.name,\n        canAdd = props.canAdd,\n        _props$canRemove = props.canRemove,\n        canRemove = _props$canRemove === void 0 ? true : _props$canRemove,\n        canMoveUp = props.canMoveUp,\n        canMoveDown = props.canMoveDown,\n        itemSchema = props.itemSchema,\n        itemData = props.itemData,\n        itemUiSchema = props.itemUiSchema,\n        itemIdSchema = props.itemIdSchema,\n        itemErrorSchema = props.itemErrorSchema,\n        autofocus = props.autofocus,\n        onBlur = props.onBlur,\n        onFocus = props.onFocus,\n        rawErrors = props.rawErrors,\n        totalItems = props.totalItems;\n    var _this$props13 = this.props,\n        disabled = _this$props13.disabled,\n        hideError = _this$props13.hideError,\n        idPrefix = _this$props13.idPrefix,\n        idSeparator = _this$props13.idSeparator,\n        readonly = _this$props13.readonly,\n        uiSchema = _this$props13.uiSchema,\n        registry = _this$props13.registry,\n        formContext = _this$props13.formContext;\n    var _registry$fields = registry.fields,\n        ArraySchemaField = _registry$fields.ArraySchemaField,\n        SchemaField = _registry$fields.SchemaField,\n        globalUiOptions = registry.globalUiOptions;\n    var ItemSchemaField = ArraySchemaField || SchemaField;\n\n    var _getUiOptions5 = getUiOptions(uiSchema, globalUiOptions),\n        _getUiOptions5$ordera = _getUiOptions5.orderable,\n        orderable = _getUiOptions5$ordera === void 0 ? true : _getUiOptions5$ordera,\n        _getUiOptions5$remova = _getUiOptions5.removable,\n        removable = _getUiOptions5$remova === void 0 ? true : _getUiOptions5$remova,\n        _getUiOptions5$copyab = _getUiOptions5.copyable,\n        copyable = _getUiOptions5$copyab === void 0 ? false : _getUiOptions5$copyab;\n\n    var has = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      copy: copyable && canAdd,\n      remove: removable && canRemove,\n      toolbar: false\n    };\n    has.toolbar = Object.keys(has).some(function (key) {\n      return has[key];\n    });\n    return {\n      children: jsx(ItemSchemaField, {\n        name: name,\n        index: index,\n        schema: itemSchema,\n        uiSchema: itemUiSchema,\n        formData: itemData,\n        formContext: formContext,\n        errorSchema: itemErrorSchema,\n        idPrefix: idPrefix,\n        idSeparator: idSeparator,\n        idSchema: itemIdSchema,\n        required: this.isItemRequired(itemSchema),\n        onChange: this.onChangeForIndex(index),\n        onBlur: onBlur,\n        onFocus: onFocus,\n        registry: registry,\n        disabled: disabled,\n        readonly: readonly,\n        hideError: hideError,\n        autofocus: autofocus,\n        rawErrors: rawErrors\n      }),\n      className: 'array-item',\n      disabled: disabled,\n      canAdd: canAdd,\n      hasCopy: has.copy,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index: index,\n      totalItems: totalItems,\n      key: key,\n      onAddIndexClick: this.onAddIndexClick,\n      onCopyIndexClick: this.onCopyIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly: readonly,\n      registry: registry,\n      schema: itemSchema,\n      uiSchema: itemUiSchema\n    };\n  };\n\n  _createClass(ArrayField, [{\n    key: \"itemTitle\",\n    get: function get$1() {\n      var _this$props14 = this.props,\n          schema = _this$props14.schema,\n          registry = _this$props14.registry;\n      var translateString = registry.translateString;\n      return get(schema, [ITEMS_KEY, 'title'], get(schema, [ITEMS_KEY, 'description'], translateString(TranslatableString.ArrayItemTitle)));\n    }\n  }]);\n\n  return ArrayField;\n}(Component);\n\nvar _excluded$8 = [\"widget\"];\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\r\n * two boolean values based on the various alternatives in the schema.\r\n *\r\n * @param props - The `FieldProps` for this template\r\n */\n\nfunction BooleanField(props) {\n  var schema = props.schema,\n      name = props.name,\n      uiSchema = props.uiSchema,\n      idSchema = props.idSchema,\n      formData = props.formData,\n      registry = props.registry,\n      required = props.required,\n      disabled = props.disabled,\n      readonly = props.readonly,\n      autofocus = props.autofocus,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      rawErrors = props.rawErrors;\n  var title = schema.title;\n  var widgets = registry.widgets,\n      formContext = registry.formContext,\n      translateString = registry.translateString;\n\n  var _getUiOptions = getUiOptions(uiSchema),\n      _getUiOptions$widget = _getUiOptions.widget,\n      widget = _getUiOptions$widget === void 0 ? 'checkbox' : _getUiOptions$widget,\n      options = _objectWithoutPropertiesLoose(_getUiOptions, _excluded$8);\n\n  var Widget = getWidget(schema, widget, widgets);\n  var yes = translateString(TranslatableString.YesLabel);\n  var no = translateString(TranslatableString.NoLabel);\n  var enumOptions;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList({\n      oneOf: schema.oneOf.map(function (option) {\n        if (isObject(option)) {\n          return _extends({}, option, {\n            title: option.title || (option[\"const\"] === true ? yes : no)\n          });\n        }\n\n        return undefined;\n      }).filter(function (o) {\n        return o;\n      }) // cast away the error that typescript can't grok is fixed\n\n    });\n  } else {\n    var _schema$enum; // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n\n\n    var schemaWithEnumNames = schema;\n    var enums = (_schema$enum = schema[\"enum\"]) != null ? _schema$enum : [true, false];\n\n    if (!schemaWithEnumNames.enumNames && enums.length === 2 && enums.every(function (v) {\n      return typeof v === 'boolean';\n    })) {\n      enumOptions = [{\n        value: enums[0],\n        label: enums[0] ? yes : no\n      }, {\n        value: enums[1],\n        label: enums[1] ? yes : no\n      }];\n    } else {\n      enumOptions = optionsList({\n        \"enum\": enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames\n      });\n    }\n  }\n\n  return jsx(Widget, {\n    options: _extends({}, options, {\n      enumOptions: enumOptions\n    }),\n    schema: schema,\n    uiSchema: uiSchema,\n    id: idSchema.$id,\n    name: name,\n    onChange: onChange,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    label: title === undefined ? name : title,\n    value: formData,\n    required: required,\n    disabled: disabled,\n    readonly: readonly,\n    registry: registry,\n    formContext: formContext,\n    autofocus: autofocus,\n    rawErrors: rawErrors\n  });\n}\n\nvar _excluded$7 = [\"widget\", \"placeholder\", \"autofocus\", \"autocomplete\", \"title\"];\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\r\n * the currently selected option and cleans up any irrelevant data in `formData`.\r\n *\r\n * @param props - The `FieldProps` for this template\r\n */\n\nvar AnyOfField = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(AnyOfField, _Component);\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\r\n   *\r\n   * @param props - The `FieldProps` for this template\r\n   */\n\n\n  function AnyOfField(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _this.onOptionChange = function (option) {\n      var _this$state = _this.state,\n          selectedOption = _this$state.selectedOption,\n          retrievedOptions = _this$state.retrievedOptions;\n      var _this$props = _this.props,\n          formData = _this$props.formData,\n          onChange = _this$props.onChange,\n          registry = _this$props.registry;\n      var schemaUtils = registry.schemaUtils;\n      var intOption = option !== undefined ? parseInt(option, 10) : -1;\n\n      if (intOption === selectedOption) {\n        return;\n      }\n\n      var newOption = intOption >= 0 ? retrievedOptions[intOption] : undefined;\n      var oldOption = selectedOption >= 0 ? retrievedOptions[selectedOption] : undefined;\n      var newFormData = schemaUtils.sanitizeDataForNewSchema(newOption, oldOption, formData);\n\n      if (newFormData && newOption) {\n        // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n        // so that only the root objects themselves are created without adding undefined children properties\n        newFormData = schemaUtils.getDefaultFormState(newOption, newFormData, 'excludeObjectChildren');\n      }\n\n      onChange(newFormData, undefined, _this.getFieldId());\n\n      _this.setState({\n        selectedOption: intOption\n      });\n    };\n\n    var _this$props2 = _this.props,\n        _formData = _this$props2.formData,\n        options = _this$props2.options,\n        _schemaUtils = _this$props2.registry.schemaUtils; // cache the retrieved options in state in case they have $refs to save doing it later\n\n    var _retrievedOptions = options.map(function (opt) {\n      return _schemaUtils.retrieveSchema(opt, _formData);\n    });\n\n    _this.state = {\n      retrievedOptions: _retrievedOptions,\n      selectedOption: _this.getMatchingOption(0, _formData, _retrievedOptions)\n    };\n    return _this;\n  }\n  /** React lifecycle method that is called when the props and/or state for this component is updated. It recomputes the\r\n   * currently selected option based on the overall `formData`\r\n   *\r\n   * @param prevProps - The previous `FieldProps` for this template\r\n   * @param prevState - The previous `AnyOfFieldState` for this template\r\n   */\n\n\n  var _proto = AnyOfField.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var _this$props3 = this.props,\n        formData = _this$props3.formData,\n        options = _this$props3.options,\n        idSchema = _this$props3.idSchema;\n    var selectedOption = this.state.selectedOption;\n    var newState = this.state;\n\n    if (!deepEquals(prevProps.options, options)) {\n      var schemaUtils = this.props.registry.schemaUtils; // re-cache the retrieved options in state in case they have $refs to save doing it later\n\n      var retrievedOptions = options.map(function (opt) {\n        return schemaUtils.retrieveSchema(opt, formData);\n      });\n      newState = {\n        selectedOption: selectedOption,\n        retrievedOptions: retrievedOptions\n      };\n    }\n\n    if (!deepEquals(formData, prevProps.formData) && idSchema.$id === prevProps.idSchema.$id) {\n      var _newState = newState,\n          _retrievedOptions2 = _newState.retrievedOptions;\n      var matchingOption = this.getMatchingOption(selectedOption, formData, _retrievedOptions2);\n\n      if (prevState && matchingOption !== selectedOption) {\n        newState = {\n          selectedOption: matchingOption,\n          retrievedOptions: _retrievedOptions2\n        };\n      }\n    }\n\n    if (newState !== this.state) {\n      this.setState(newState);\n    }\n  }\n  /** Determines the best matching option for the given `formData` and `options`.\r\n   *\r\n   * @param formData - The new formData\r\n   * @param options - The list of options to choose from\r\n   * @return - The index of the `option` that best matches the `formData`\r\n   */\n  ;\n\n  _proto.getMatchingOption = function getMatchingOption(selectedOption, formData, options) {\n    var schemaUtils = this.props.registry.schemaUtils;\n    var option = schemaUtils.getClosestMatchingOption(formData, options, selectedOption);\n\n    if (option > 0) {\n      return option;\n    } // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n\n\n    return selectedOption || 0;\n  }\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\r\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\r\n   * the `onChange` handler.\r\n   *\r\n   * @param option - The new option value being selected\r\n   */\n  ;\n\n  _proto.getFieldId = function getFieldId() {\n    var _this$props4 = this.props,\n        idSchema = _this$props4.idSchema,\n        schema = _this$props4.schema;\n    return \"\" + idSchema.$id + (schema.oneOf ? '__oneof_select' : '__anyof_select');\n  }\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\r\n   */\n  ;\n\n  _proto.render = function render() {\n    var _this$props5 = this.props,\n        name = _this$props5.name,\n        baseType = _this$props5.baseType,\n        _this$props5$disabled = _this$props5.disabled,\n        disabled = _this$props5$disabled === void 0 ? false : _this$props5$disabled,\n        _this$props5$errorSch = _this$props5.errorSchema,\n        errorSchema = _this$props5$errorSch === void 0 ? {} : _this$props5$errorSch,\n        formContext = _this$props5.formContext,\n        onBlur = _this$props5.onBlur,\n        onFocus = _this$props5.onFocus,\n        registry = _this$props5.registry,\n        schema = _this$props5.schema,\n        uiSchema = _this$props5.uiSchema;\n    var widgets = registry.widgets,\n        fields = registry.fields,\n        translateString = registry.translateString;\n    var _SchemaField = fields.SchemaField;\n    var _this$state2 = this.state,\n        selectedOption = _this$state2.selectedOption,\n        retrievedOptions = _this$state2.retrievedOptions;\n\n    var _getUiOptions = getUiOptions(uiSchema),\n        _getUiOptions$widget = _getUiOptions.widget,\n        widget = _getUiOptions$widget === void 0 ? 'select' : _getUiOptions$widget,\n        placeholder = _getUiOptions.placeholder,\n        autofocus = _getUiOptions.autofocus,\n        autocomplete = _getUiOptions.autocomplete,\n        _getUiOptions$title = _getUiOptions.title,\n        title = _getUiOptions$title === void 0 ? schema.title : _getUiOptions$title,\n        uiOptions = _objectWithoutPropertiesLoose(_getUiOptions, _excluded$7);\n\n    var Widget = getWidget({\n      type: 'number'\n    }, widget, widgets);\n    var rawErrors = get(errorSchema, ERRORS_KEY, []);\n    var fieldErrorSchema = omit(errorSchema, [ERRORS_KEY]);\n    var option = selectedOption >= 0 ? retrievedOptions[selectedOption] || null : null;\n    var optionSchema;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type ? option : Object.assign({}, option, {\n        type: baseType\n      });\n    }\n\n    var translateEnum = title ? TranslatableString.TitleOptionPrefix : TranslatableString.OptionPrefix;\n    var translateParams = title ? [title] : [];\n    var enumOptions = retrievedOptions.map(function (opt, index) {\n      return {\n        label: opt.title || translateString(translateEnum, translateParams.concat(String(index + 1))),\n        value: index\n      };\n    });\n    return jsxs(\"div\", {\n      className: 'panel panel-default panel-body',\n      children: [jsx(\"div\", {\n        className: 'form-group',\n        children: jsx(Widget, {\n          id: this.getFieldId(),\n          name: \"\" + name + (schema.oneOf ? '__oneof_select' : '__anyof_select'),\n          schema: {\n            type: 'number',\n            \"default\": 0\n          },\n          onChange: this.onOptionChange,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          disabled: disabled || isEmpty(enumOptions),\n          multiple: false,\n          rawErrors: rawErrors,\n          errorSchema: fieldErrorSchema,\n          value: selectedOption >= 0 ? selectedOption : undefined,\n          options: _extends({\n            enumOptions: enumOptions\n          }, uiOptions),\n          registry: registry,\n          formContext: formContext,\n          placeholder: placeholder,\n          autocomplete: autocomplete,\n          autofocus: autofocus,\n          label: ''\n        })\n      }), option !== null && jsx(_SchemaField, _extends({}, this.props, {\n        schema: optionSchema\n      }))]\n    });\n  };\n\n  return AnyOfField;\n}(Component); // Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\n\n\nvar trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/; // This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\n\nvar trailingCharMatcher = /[0.]0*$/;\n/**\r\n * The NumberField class has some special handling for dealing with trailing\r\n * decimal points and/or zeroes. This logic is designed to allow trailing values\r\n * to be visible in the input element, but not be represented in the\r\n * corresponding form data.\r\n *\r\n * The algorithm is as follows:\r\n *\r\n * 1. When the input value changes the value is cached in the component state\r\n *\r\n * 2. The value is then normalized, removing trailing decimal points and zeros,\r\n *    then passed to the \"onChange\" callback\r\n *\r\n * 3. When the component is rendered, the formData value is checked against the\r\n *    value cached in the state. If it matches the cached value, the cached\r\n *    value is passed to the input instead of the formData value\r\n */\n\nfunction NumberField(props) {\n  var registry = props.registry,\n      onChange = props.onChange,\n      formData = props.formData,\n      initialValue = props.value;\n\n  var _useState = useState(initialValue),\n      lastValue = _useState[0],\n      setLastValue = _useState[1];\n\n  var StringField = registry.fields.StringField;\n  var value = formData;\n  /** Handle the change from the `StringField` to properly convert to a number\r\n   *\r\n   * @param value - The current value for the change occurring\r\n   */\n\n  var handleChange = useCallback(function (value) {\n    // Cache the original value in component state\n    setLastValue(value); // Normalize decimals that don't start with a zero character in advance so\n    // that the rest of the normalization logic is simpler\n\n    if ((\"\" + value).charAt(0) === '.') {\n      value = \"0\" + value;\n    } // Check that the value is a string (this can happen if the widget used is a\n    // <select>, due to an enum declaration etc) then, if the value ends in a\n    // trailing decimal point or multiple zeroes, strip the trailing values\n\n\n    var processed = typeof value === 'string' && value.match(trailingCharMatcherWithPrefix) ? asNumber(value.replace(trailingCharMatcher, '')) : asNumber(value);\n    onChange(processed);\n  }, [onChange]);\n\n  if (typeof lastValue === 'string' && typeof value === 'number') {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    var re = new RegExp((\"\" + value).replace('.', '\\\\.') + '\\\\.?0*$'); // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n\n    if (lastValue.match(re)) {\n      value = lastValue;\n    }\n  }\n\n  return jsx(StringField, _extends({}, props, {\n    formData: value,\n    onChange: handleChange\n  }));\n}\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\r\n * additional property key was modified and what it was modified to\r\n *\r\n * @param props - The `FieldProps` for this template\r\n */\n\n\nvar ObjectField = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(ObjectField, _Component);\n\n  function ObjectField() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.state = {\n      wasPropertyKeyModified: false,\n      additionalProperties: {}\n    };\n\n    _this.onPropertyChange = function (name, addedByAdditionalProperties) {\n      if (addedByAdditionalProperties === void 0) {\n        addedByAdditionalProperties = false;\n      }\n\n      return function (value, newErrorSchema, id) {\n        var _extends2, _extends3;\n\n        var _this$props = _this.props,\n            formData = _this$props.formData,\n            onChange = _this$props.onChange,\n            errorSchema = _this$props.errorSchema;\n\n        if (value === undefined && addedByAdditionalProperties) {\n          // Don't set value = undefined for fields added by\n          // additionalProperties. Doing so removes them from the\n          // formData, which causes them to completely disappear\n          // (including the input field for the property name). Unlike\n          // fields which are \"mandated\" by the schema, these fields can\n          // be set to undefined by clicking a \"delete field\" button, so\n          // set empty values to the empty string.\n          value = '';\n        }\n\n        var newFormData = _extends({}, formData, (_extends2 = {}, _extends2[name] = value, _extends2));\n\n        onChange(newFormData, errorSchema && errorSchema && _extends({}, errorSchema, (_extends3 = {}, _extends3[name] = newErrorSchema, _extends3)), id);\n      };\n    };\n\n    _this.onDropPropertyClick = function (key) {\n      return function (event) {\n        event.preventDefault();\n        var _this$props2 = _this.props,\n            onChange = _this$props2.onChange,\n            formData = _this$props2.formData;\n\n        var copiedFormData = _extends({}, formData);\n\n        unset(copiedFormData, key);\n        onChange(copiedFormData);\n      };\n    };\n\n    _this.getAvailableKey = function (preferredKey, formData) {\n      var _this$props3 = _this.props,\n          uiSchema = _this$props3.uiSchema,\n          registry = _this$props3.registry;\n\n      var _getUiOptions = getUiOptions(uiSchema, registry.globalUiOptions),\n          _getUiOptions$duplica = _getUiOptions.duplicateKeySuffixSeparator,\n          duplicateKeySuffixSeparator = _getUiOptions$duplica === void 0 ? '-' : _getUiOptions$duplica;\n\n      var index = 0;\n      var newKey = preferredKey;\n\n      while (has(formData, newKey)) {\n        newKey = \"\" + preferredKey + duplicateKeySuffixSeparator + ++index;\n      }\n\n      return newKey;\n    };\n\n    _this.onKeyChange = function (oldValue) {\n      return function (value, newErrorSchema) {\n        var _newKeys, _extends4;\n\n        if (oldValue === value) {\n          return;\n        }\n\n        var _this$props4 = _this.props,\n            formData = _this$props4.formData,\n            onChange = _this$props4.onChange,\n            errorSchema = _this$props4.errorSchema;\n        value = _this.getAvailableKey(value, formData);\n\n        var newFormData = _extends({}, formData);\n\n        var newKeys = (_newKeys = {}, _newKeys[oldValue] = value, _newKeys);\n        var keyValues = Object.keys(newFormData).map(function (key) {\n          var _ref;\n\n          var newKey = newKeys[key] || key;\n          return _ref = {}, _ref[newKey] = newFormData[key], _ref;\n        });\n        var renamedObj = Object.assign.apply(Object, [{}].concat(keyValues));\n\n        _this.setState({\n          wasPropertyKeyModified: true\n        });\n\n        onChange(renamedObj, errorSchema && errorSchema && _extends({}, errorSchema, (_extends4 = {}, _extends4[value] = newErrorSchema, _extends4)));\n      };\n    };\n\n    _this.handleAddClick = function (schema) {\n      return function () {\n        if (!schema.additionalProperties) {\n          return;\n        }\n\n        var _this$props5 = _this.props,\n            formData = _this$props5.formData,\n            onChange = _this$props5.onChange,\n            registry = _this$props5.registry;\n\n        var newFormData = _extends({}, formData);\n\n        var type = undefined;\n\n        if (isObject(schema.additionalProperties)) {\n          type = schema.additionalProperties.type;\n          var apSchema = schema.additionalProperties;\n\n          if (REF_KEY in apSchema) {\n            var schemaUtils = registry.schemaUtils;\n            apSchema = schemaUtils.retrieveSchema({\n              $ref: apSchema[REF_KEY]\n            }, formData);\n            type = apSchema.type;\n          }\n\n          if (!type && (ANY_OF_KEY in apSchema || ONE_OF_KEY in apSchema)) {\n            type = 'object';\n          }\n        }\n\n        var newKey = _this.getAvailableKey('newKey', newFormData); // Cast this to make the `set` work properly\n\n\n        set(newFormData, newKey, _this.getDefaultValue(type));\n        onChange(newFormData);\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = ObjectField.prototype;\n  /** Returns a flag indicating whether the `name` field is required in the object schema\r\n   *\r\n   * @param name - The name of the field to check for required-ness\r\n   * @returns - True if the field `name` is required, false otherwise\r\n   */\n\n  _proto.isRequired = function isRequired(name) {\n    var schema = this.props.schema;\n    return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;\n  }\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\r\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\r\n   * formData.\r\n   *\r\n   * @param name - The name of the property\r\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\r\n   * @returns - The onPropertyChange callback for the `name` property\r\n   */\n  ;\n  /** Returns a default value to be used for a new additional schema property of the given `type`\r\n   *\r\n   * @param type - The type of the new additional schema property\r\n   */\n\n\n  _proto.getDefaultValue = function getDefaultValue(type) {\n    var translateString = this.props.registry.translateString;\n\n    switch (type) {\n      case 'array':\n        return [];\n\n      case 'boolean':\n        return false;\n\n      case 'null':\n        return null;\n\n      case 'number':\n        return 0;\n\n      case 'object':\n        return {};\n\n      case 'string':\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return translateString(TranslatableString.NewStringDefault);\n    }\n  }\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\r\n   * default data for that field has been added to the formData.\r\n   *\r\n   * @param schema - The schema element to which the new property is being added\r\n   */\n  ;\n  /** Renders the `ObjectField` from the given props\r\n   */\n\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props6 = this.props,\n        rawSchema = _this$props6.schema,\n        _this$props6$uiSchema = _this$props6.uiSchema,\n        uiSchema = _this$props6$uiSchema === void 0 ? {} : _this$props6$uiSchema,\n        formData = _this$props6.formData,\n        errorSchema = _this$props6.errorSchema,\n        idSchema = _this$props6.idSchema,\n        name = _this$props6.name,\n        _this$props6$required = _this$props6.required,\n        required = _this$props6$required === void 0 ? false : _this$props6$required,\n        _this$props6$disabled = _this$props6.disabled,\n        disabled = _this$props6$disabled === void 0 ? false : _this$props6$disabled,\n        _this$props6$readonly = _this$props6.readonly,\n        readonly = _this$props6$readonly === void 0 ? false : _this$props6$readonly,\n        hideError = _this$props6.hideError,\n        idPrefix = _this$props6.idPrefix,\n        idSeparator = _this$props6.idSeparator,\n        onBlur = _this$props6.onBlur,\n        onFocus = _this$props6.onFocus,\n        registry = _this$props6.registry;\n    var fields = registry.fields,\n        formContext = registry.formContext,\n        schemaUtils = registry.schemaUtils,\n        translateString = registry.translateString;\n    var SchemaField = fields.SchemaField;\n    var schema = schemaUtils.retrieveSchema(rawSchema, formData);\n    var uiOptions = getUiOptions(uiSchema);\n    var _schema$properties = schema.properties,\n        schemaProperties = _schema$properties === void 0 ? {} : _schema$properties;\n    var title = uiOptions.title || (schema.title === undefined ? name : schema.title);\n    var description = uiOptions.description || schema.description;\n    var orderedProperties;\n\n    try {\n      var properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return jsxs(\"div\", {\n        children: [jsx(\"p\", {\n          className: 'config-error',\n          style: {\n            color: 'red'\n          },\n          children: jsx(Markdown, {\n            children: translateString(TranslatableString.InvalidObjectField, [name || 'root', err.message])\n          })\n        }), jsx(\"pre\", {\n          children: JSON.stringify(schema)\n        })]\n      });\n    }\n\n    var Template = getTemplate('ObjectFieldTemplate', registry, uiOptions);\n    var templateProps = {\n      title: title,\n      description: description,\n      properties: orderedProperties.map(function (name) {\n        var addedByAdditionalProperties = has(schema, [PROPERTIES_KEY, name, ADDITIONAL_PROPERTY_FLAG]);\n        var fieldUiSchema = addedByAdditionalProperties ? uiSchema.additionalProperties : uiSchema[name];\n        var hidden = getUiOptions(fieldUiSchema).widget === 'hidden';\n        var fieldIdSchema = get(idSchema, [name], {});\n        return {\n          content: jsx(SchemaField, {\n            name: name,\n            required: _this2.isRequired(name),\n            schema: get(schema, [PROPERTIES_KEY, name], {}),\n            uiSchema: fieldUiSchema,\n            errorSchema: get(errorSchema, name),\n            idSchema: fieldIdSchema,\n            idPrefix: idPrefix,\n            idSeparator: idSeparator,\n            formData: get(formData, name),\n            formContext: formContext,\n            wasPropertyKeyModified: _this2.state.wasPropertyKeyModified,\n            onKeyChange: _this2.onKeyChange(name),\n            onChange: _this2.onPropertyChange(name, addedByAdditionalProperties),\n            onBlur: onBlur,\n            onFocus: onFocus,\n            registry: registry,\n            disabled: disabled,\n            readonly: readonly,\n            hideError: hideError,\n            onDropPropertyClick: _this2.onDropPropertyClick\n          }, name),\n          name: name,\n          readonly: readonly,\n          disabled: disabled,\n          required: required,\n          hidden: hidden\n        };\n      }),\n      readonly: readonly,\n      disabled: disabled,\n      required: required,\n      idSchema: idSchema,\n      uiSchema: uiSchema,\n      schema: schema,\n      formData: formData,\n      formContext: formContext,\n      registry: registry\n    };\n    return jsx(Template, _extends({}, templateProps, {\n      onAddClick: this.handleAddClick\n    }));\n  };\n\n  return ObjectField;\n}(Component);\n\nvar _excluded$6 = [\"__errors\"];\n/** The map of component type to FieldName */\n\nvar COMPONENT_TYPES = {\n  array: 'ArrayField',\n  \"boolean\": 'BooleanField',\n  integer: 'NumberField',\n  number: 'NumberField',\n  object: 'ObjectField',\n  string: 'StringField',\n  \"null\": 'NullField'\n};\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\r\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\r\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\r\n *\r\n * @param schema - The schema from which to obtain the type\r\n * @param uiOptions - The UI Options that may affect the component decision\r\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\r\n * @param registry - The registry from which fields and templates are obtained\r\n * @returns - The `Field` component that is used to render the actual field data\r\n */\n\nfunction getFieldComponent(schema, uiOptions, idSchema, registry) {\n  var field = uiOptions.field;\n  var fields = registry.fields,\n      translateString = registry.translateString;\n\n  if (typeof field === 'function') {\n    return field;\n  }\n\n  if (typeof field === 'string' && field in fields) {\n    return fields[field];\n  }\n\n  var schemaType = getSchemaType(schema);\n  var type = Array.isArray(schemaType) ? schemaType[0] : schemaType || '';\n  var componentName = COMPONENT_TYPES[type]; // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return function () {\n      return null;\n    };\n  }\n\n  return componentName in fields ? fields[componentName] : function () {\n    var UnsupportedFieldTemplate = getTemplate('UnsupportedFieldTemplate', registry, uiOptions);\n    return jsx(UnsupportedFieldTemplate, {\n      schema: schema,\n      idSchema: idSchema,\n      reason: translateString(TranslatableString.UnknownFieldType, [String(schema.type)]),\n      registry: registry\n    });\n  };\n}\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\r\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\r\n * `oneOf` fields.\r\n *\r\n * @param props - The `FieldProps` for this component\r\n */\n\n\nfunction SchemaFieldRender(props) {\n  var _schema = props.schema,\n      _idSchema = props.idSchema,\n      uiSchema = props.uiSchema,\n      formData = props.formData,\n      errorSchema = props.errorSchema,\n      idPrefix = props.idPrefix,\n      idSeparator = props.idSeparator,\n      name = props.name,\n      onChange = props.onChange,\n      onKeyChange = props.onKeyChange,\n      onDropPropertyClick = props.onDropPropertyClick,\n      required = props.required,\n      registry = props.registry,\n      _props$wasPropertyKey = props.wasPropertyKeyModified,\n      wasPropertyKeyModified = _props$wasPropertyKey === void 0 ? false : _props$wasPropertyKey;\n  var formContext = registry.formContext,\n      schemaUtils = registry.schemaUtils,\n      globalUiOptions = registry.globalUiOptions;\n  var uiOptions = getUiOptions(uiSchema, globalUiOptions);\n  var FieldTemplate = getTemplate('FieldTemplate', registry, uiOptions);\n  var DescriptionFieldTemplate = getTemplate('DescriptionFieldTemplate', registry, uiOptions);\n  var FieldHelpTemplate = getTemplate('FieldHelpTemplate', registry, uiOptions);\n  var FieldErrorTemplate = getTemplate('FieldErrorTemplate', registry, uiOptions);\n  var schema = schemaUtils.retrieveSchema(_schema, formData);\n  var fieldId = _idSchema[ID_KEY];\n  var idSchema = mergeObjects(schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator), _idSchema);\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\r\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\r\n   */\n\n  var handleFieldComponentChange = useCallback(function (formData, newErrorSchema, id) {\n    var theId = id || fieldId;\n    return onChange(formData, newErrorSchema, theId);\n  }, [fieldId, onChange]);\n  var FieldComponent = getFieldComponent(schema, uiOptions, idSchema, registry);\n  var disabled = Boolean(props.disabled || uiOptions.disabled);\n  var readonly = Boolean(props.readonly || uiOptions.readonly || props.schema.readOnly || schema.readOnly);\n  var uiSchemaHideError = uiOptions.hideError; // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n\n  var hideError = uiSchemaHideError === undefined ? props.hideError : Boolean(uiSchemaHideError);\n  var autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  var displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n\n  var _ref = errorSchema || {},\n      __errors = _ref.__errors,\n      fieldErrorSchema = _objectWithoutPropertiesLoose(_ref, _excluded$6); // See #439: uiSchema: Don't pass consumed class names or style to child components\n\n\n  var fieldUiSchema = omit(uiSchema, ['ui:classNames', 'classNames', 'ui:style']);\n\n  if (UI_OPTIONS_KEY in fieldUiSchema) {\n    fieldUiSchema[UI_OPTIONS_KEY] = omit(fieldUiSchema[UI_OPTIONS_KEY], ['classNames', 'style']);\n  }\n\n  var field = jsx(FieldComponent, _extends({}, props, {\n    onChange: handleFieldComponentChange,\n    idSchema: idSchema,\n    schema: schema,\n    uiSchema: fieldUiSchema,\n    disabled: disabled,\n    readonly: readonly,\n    hideError: hideError,\n    autofocus: autofocus,\n    errorSchema: fieldErrorSchema,\n    formContext: formContext,\n    rawErrors: __errors\n  }));\n  var id = idSchema[ID_KEY]; // If this schema has a title defined, but the user has set a new key/label, retain their input.\n\n  var label;\n\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label = ADDITIONAL_PROPERTY_FLAG in schema ? name : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  var description = uiOptions.description || props.schema.description || schema.description || '';\n  var help = uiOptions.help;\n  var hidden = uiOptions.widget === 'hidden';\n  var classNames = ['form-group', 'field', \"field-\" + schema.type];\n\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push('field-error has-error has-danger');\n  }\n\n  if (uiSchema !== null && uiSchema !== void 0 && uiSchema.classNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\");\n    }\n\n    classNames.push(uiSchema.classNames);\n  }\n\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  var helpComponent = jsx(FieldHelpTemplate, {\n    help: help,\n    idSchema: idSchema,\n    schema: schema,\n    uiSchema: uiSchema,\n    hasErrors: !hideError && __errors && __errors.length > 0,\n    registry: registry\n  });\n  var errorsComponent = hideError ? undefined : jsx(FieldErrorTemplate, {\n    errors: __errors,\n    errorSchema: errorSchema,\n    idSchema: idSchema,\n    schema: schema,\n    uiSchema: uiSchema,\n    registry: registry\n  });\n  var fieldProps = {\n    description: jsx(DescriptionFieldTemplate, {\n      id: descriptionId(id),\n      description: description,\n      schema: schema,\n      uiSchema: uiSchema,\n      registry: registry\n    }),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === 'string' ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id: id,\n    label: label,\n    hidden: hidden,\n    onChange: onChange,\n    onKeyChange: onKeyChange,\n    onDropPropertyClick: onDropPropertyClick,\n    required: required,\n    disabled: disabled,\n    readonly: readonly,\n    hideError: hideError,\n    displayLabel: displayLabel,\n    classNames: classNames.join(' ').trim(),\n    style: uiOptions.style,\n    formContext: formContext,\n    formData: formData,\n    schema: schema,\n    uiSchema: uiSchema,\n    registry: registry\n  };\n  var _AnyOfField = registry.fields.AnyOfField;\n  var _OneOfField = registry.fields.OneOfField;\n  var isReplacingAnyOrOneOf = (uiSchema === null || uiSchema === void 0 ? void 0 : uiSchema['ui:field']) && (uiSchema === null || uiSchema === void 0 ? void 0 : uiSchema['ui:fieldReplacesAnyOrOneOf']) === true;\n  return jsx(FieldTemplate, _extends({}, fieldProps, {\n    children: jsxs(Fragment, {\n      children: [field, schema.anyOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && jsx(_AnyOfField, {\n        name: name,\n        disabled: disabled,\n        readonly: readonly,\n        hideError: hideError,\n        errorSchema: errorSchema,\n        formData: formData,\n        formContext: formContext,\n        idPrefix: idPrefix,\n        idSchema: idSchema,\n        idSeparator: idSeparator,\n        onBlur: props.onBlur,\n        onChange: props.onChange,\n        onFocus: props.onFocus,\n        options: schema.anyOf.map(function (_schema) {\n          return schemaUtils.retrieveSchema(isObject(_schema) ? _schema : {}, formData);\n        }),\n        baseType: schema.type,\n        registry: registry,\n        schema: schema,\n        uiSchema: uiSchema\n      }), schema.oneOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && jsx(_OneOfField, {\n        name: name,\n        disabled: disabled,\n        readonly: readonly,\n        hideError: hideError,\n        errorSchema: errorSchema,\n        formData: formData,\n        formContext: formContext,\n        idPrefix: idPrefix,\n        idSchema: idSchema,\n        idSeparator: idSeparator,\n        onBlur: props.onBlur,\n        onChange: props.onChange,\n        onFocus: props.onFocus,\n        options: schema.oneOf.map(function (_schema) {\n          return schemaUtils.retrieveSchema(isObject(_schema) ? _schema : {}, formData);\n        }),\n        baseType: schema.type,\n        registry: registry,\n        schema: schema,\n        uiSchema: uiSchema\n      })]\n    })\n  }));\n}\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\r\n * and if so, calls the `SchemaFieldRender` component with the props.\r\n */\n\n\nvar SchemaField = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(SchemaField, _Component);\n\n  function SchemaField() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = SchemaField.prototype;\n\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    return !deepEquals(this.props, nextProps);\n  };\n\n  _proto.render = function render() {\n    return jsx(SchemaFieldRender, _extends({}, this.props));\n  };\n\n  return SchemaField;\n}(Component);\n\nvar _excluded$5 = [\"widget\", \"placeholder\"];\n/** The `StringField` component is used to render a schema field that represents a string type\r\n *\r\n * @param props - The `FieldProps` for this template\r\n */\n\nfunction StringField(props) {\n  var schema = props.schema,\n      name = props.name,\n      uiSchema = props.uiSchema,\n      idSchema = props.idSchema,\n      formData = props.formData,\n      required = props.required,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$readonly = props.readonly,\n      readonly = _props$readonly === void 0 ? false : _props$readonly,\n      _props$autofocus = props.autofocus,\n      autofocus = _props$autofocus === void 0 ? false : _props$autofocus,\n      onChange = props.onChange,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      registry = props.registry,\n      rawErrors = props.rawErrors;\n  var title = schema.title,\n      format = schema.format;\n  var widgets = registry.widgets,\n      formContext = registry.formContext,\n      schemaUtils = registry.schemaUtils;\n  var enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema) : undefined;\n  var defaultWidget = enumOptions ? 'select' : 'text';\n\n  if (format && hasWidget(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n\n  var _getUiOptions = getUiOptions(uiSchema),\n      _getUiOptions$widget = _getUiOptions.widget,\n      widget = _getUiOptions$widget === void 0 ? defaultWidget : _getUiOptions$widget,\n      _getUiOptions$placeho = _getUiOptions.placeholder,\n      placeholder = _getUiOptions$placeho === void 0 ? '' : _getUiOptions$placeho,\n      options = _objectWithoutPropertiesLoose(_getUiOptions, _excluded$5);\n\n  var Widget = getWidget(schema, widget, widgets);\n  return jsx(Widget, {\n    options: _extends({}, options, {\n      enumOptions: enumOptions\n    }),\n    schema: schema,\n    uiSchema: uiSchema,\n    id: idSchema.$id,\n    name: name,\n    label: title === undefined ? name : title,\n    value: formData,\n    onChange: onChange,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    required: required,\n    disabled: disabled,\n    readonly: readonly,\n    formContext: formContext,\n    autofocus: autofocus,\n    registry: registry,\n    placeholder: placeholder,\n    rawErrors: rawErrors\n  });\n}\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\r\n * also set to null if it has no value.\r\n *\r\n * @param props - The `FieldProps` for this template\r\n */\n\n\nfunction NullField(props) {\n  var formData = props.formData,\n      onChange = props.onChange;\n  useEffect(function () {\n    if (formData === undefined) {\n      onChange(null);\n    }\n  }, [formData, onChange]);\n  return null;\n}\n\nfunction fields() {\n  return {\n    AnyOfField: AnyOfField,\n    ArrayField: ArrayField,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField: BooleanField,\n    NumberField: NumberField,\n    ObjectField: ObjectField,\n    OneOfField: AnyOfField,\n    SchemaField: SchemaField,\n    StringField: StringField,\n    NullField: NullField\n  };\n}\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\r\n * the `idSchema`.\r\n *\r\n * @param props - The `ArrayFieldDescriptionProps` for the component\r\n */\n\n\nfunction ArrayFieldDescriptionTemplate(props) {\n  var idSchema = props.idSchema,\n      description = props.description,\n      registry = props.registry,\n      schema = props.schema,\n      uiSchema = props.uiSchema;\n  var options = getUiOptions(uiSchema);\n  var _options$label = options.label,\n      displayLabel = _options$label === void 0 ? true : _options$label;\n\n  if (!description || !displayLabel) {\n    return null;\n  }\n\n  var DescriptionFieldTemplate = getTemplate('DescriptionFieldTemplate', registry, options);\n  return jsx(DescriptionFieldTemplate, {\n    id: descriptionId(idSchema),\n    description: description,\n    schema: schema,\n    uiSchema: uiSchema,\n    registry: registry\n  });\n}\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\r\n *\r\n * @param props - The `ArrayFieldTemplateItemType` props for the component\r\n */\n\n\nfunction ArrayFieldItemTemplate(props) {\n  var children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      hasToolbar = props.hasToolbar,\n      hasMoveDown = props.hasMoveDown,\n      hasMoveUp = props.hasMoveUp,\n      hasRemove = props.hasRemove,\n      hasCopy = props.hasCopy,\n      index = props.index,\n      onCopyIndexClick = props.onCopyIndexClick,\n      onDropIndexClick = props.onDropIndexClick,\n      onReorderClick = props.onReorderClick,\n      readonly = props.readonly,\n      registry = props.registry,\n      uiSchema = props.uiSchema;\n  var _registry$templates$B = registry.templates.ButtonTemplates,\n      CopyButton = _registry$templates$B.CopyButton,\n      MoveDownButton = _registry$templates$B.MoveDownButton,\n      MoveUpButton = _registry$templates$B.MoveUpButton,\n      RemoveButton = _registry$templates$B.RemoveButton;\n  var btnStyle = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: 'bold'\n  };\n  return jsxs(\"div\", {\n    className: className,\n    children: [jsx(\"div\", {\n      className: hasToolbar ? 'col-xs-9' : 'col-xs-12',\n      children: children\n    }), hasToolbar && jsx(\"div\", {\n      className: 'col-xs-3 array-item-toolbox',\n      children: jsxs(\"div\", {\n        className: 'btn-group',\n        style: {\n          display: 'flex',\n          justifyContent: 'space-around'\n        },\n        children: [(hasMoveUp || hasMoveDown) && jsx(MoveUpButton, {\n          style: btnStyle,\n          disabled: disabled || readonly || !hasMoveUp,\n          onClick: onReorderClick(index, index - 1),\n          uiSchema: uiSchema,\n          registry: registry\n        }), (hasMoveUp || hasMoveDown) && jsx(MoveDownButton, {\n          style: btnStyle,\n          disabled: disabled || readonly || !hasMoveDown,\n          onClick: onReorderClick(index, index + 1),\n          uiSchema: uiSchema,\n          registry: registry\n        }), hasCopy && jsx(CopyButton, {\n          style: btnStyle,\n          disabled: disabled || readonly,\n          onClick: onCopyIndexClick(index),\n          uiSchema: uiSchema,\n          registry: registry\n        }), hasRemove && jsx(RemoveButton, {\n          style: btnStyle,\n          disabled: disabled || readonly,\n          onClick: onDropIndexClick(index),\n          uiSchema: uiSchema,\n          registry: registry\n        })]\n      })\n    })]\n  });\n}\n\nvar _excluded$4 = [\"key\"];\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\r\n *\r\n * @param props - The `ArrayFieldTemplateItemType` props for the component\r\n */\n\nfunction ArrayFieldTemplate(props) {\n  var canAdd = props.canAdd,\n      className = props.className,\n      disabled = props.disabled,\n      idSchema = props.idSchema,\n      uiSchema = props.uiSchema,\n      items = props.items,\n      onAddClick = props.onAddClick,\n      readonly = props.readonly,\n      registry = props.registry,\n      required = props.required,\n      schema = props.schema,\n      title = props.title;\n  var uiOptions = getUiOptions(uiSchema);\n  var ArrayFieldDescriptionTemplate = getTemplate('ArrayFieldDescriptionTemplate', registry, uiOptions);\n  var ArrayFieldItemTemplate = getTemplate('ArrayFieldItemTemplate', registry, uiOptions);\n  var ArrayFieldTitleTemplate = getTemplate('ArrayFieldTitleTemplate', registry, uiOptions); // Button templates are not overridden in the uiSchema\n\n  var AddButton = registry.templates.ButtonTemplates.AddButton;\n  return jsxs(\"fieldset\", {\n    className: className,\n    id: idSchema.$id,\n    children: [jsx(ArrayFieldTitleTemplate, {\n      idSchema: idSchema,\n      title: uiOptions.title || title,\n      required: required,\n      schema: schema,\n      uiSchema: uiSchema,\n      registry: registry\n    }), jsx(ArrayFieldDescriptionTemplate, {\n      idSchema: idSchema,\n      description: uiOptions.description || schema.description,\n      schema: schema,\n      uiSchema: uiSchema,\n      registry: registry\n    }), jsx(\"div\", {\n      className: 'row array-item-list',\n      children: items && items.map(function (_ref) {\n        var key = _ref.key,\n            itemProps = _objectWithoutPropertiesLoose(_ref, _excluded$4);\n\n        return jsx(ArrayFieldItemTemplate, _extends({}, itemProps), key);\n      })\n    }), canAdd && jsx(AddButton, {\n      className: 'array-item-add',\n      onClick: onAddClick,\n      disabled: disabled || readonly,\n      uiSchema: uiSchema,\n      registry: registry\n    })]\n  });\n}\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\r\n * the `idSchema`.\r\n *\r\n * @param props - The `ArrayFieldTitleProps` for the component\r\n */\n\n\nfunction ArrayFieldTitleTemplate(props) {\n  var idSchema = props.idSchema,\n      title = props.title,\n      schema = props.schema,\n      uiSchema = props.uiSchema,\n      required = props.required,\n      registry = props.registry;\n  var options = getUiOptions(uiSchema);\n  var _options$label = options.label,\n      displayLabel = _options$label === void 0 ? true : _options$label;\n\n  if (!title || !displayLabel) {\n    return null;\n  }\n\n  var TitleFieldTemplate = getTemplate('TitleFieldTemplate', registry, options);\n  return jsx(TitleFieldTemplate, {\n    id: titleId(idSchema),\n    title: title,\n    required: required,\n    schema: schema,\n    uiSchema: uiSchema,\n    registry: registry\n  });\n}\n\nvar _excluded$3 = [\"id\", \"name\", \"value\", \"readonly\", \"disabled\", \"autofocus\", \"onBlur\", \"onFocus\", \"onChange\", \"onChangeOverride\", \"options\", \"schema\", \"uiSchema\", \"formContext\", \"registry\", \"rawErrors\", \"type\"];\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\r\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\r\n * It can be customized/overridden for other themes or individual implementations as needed.\r\n *\r\n * @param props - The `WidgetProps` for this template\r\n */\n\nfunction BaseInputTemplate(props) {\n  var id = props.id,\n      value = props.value,\n      readonly = props.readonly,\n      disabled = props.disabled,\n      autofocus = props.autofocus,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      onChange = props.onChange,\n      onChangeOverride = props.onChangeOverride,\n      options = props.options,\n      schema = props.schema,\n      type = props.type,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$3); // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n\n\n  if (!id) {\n    console.log('No id for', props);\n    throw new Error(\"no id for props \" + JSON.stringify(props));\n  }\n\n  var inputProps = _extends({}, rest, getInputProps(schema, type, options));\n\n  var inputValue;\n\n  if (inputProps.type === 'number' || inputProps.type === 'integer') {\n    inputValue = value || value === 0 ? value : '';\n  } else {\n    inputValue = value == null ? '' : value;\n  }\n\n  var _onChange = useCallback(function (_ref) {\n    var value = _ref.target.value;\n    return onChange(value === '' ? options.emptyValue : value);\n  }, [onChange, options]);\n\n  var _onBlur = useCallback(function (_ref2) {\n    var value = _ref2.target.value;\n    return onBlur(id, value);\n  }, [onBlur, id]);\n\n  var _onFocus = useCallback(function (_ref3) {\n    var value = _ref3.target.value;\n    return onFocus(id, value);\n  }, [onFocus, id]);\n\n  return jsxs(Fragment, {\n    children: [jsx(\"input\", _extends({\n      id: id,\n      name: id,\n      className: 'form-control',\n      readOnly: readonly,\n      disabled: disabled,\n      autoFocus: autofocus,\n      value: inputValue\n    }, inputProps, {\n      list: schema.examples ? examplesId(id) : undefined,\n      onChange: onChangeOverride || _onChange,\n      onBlur: _onBlur,\n      onFocus: _onFocus,\n      \"aria-describedby\": ariaDescribedByIds(id, !!schema.examples)\n    })), Array.isArray(schema.examples) && jsx(\"datalist\", {\n      id: examplesId(id),\n      children: schema.examples.concat(schema[\"default\"] && !schema.examples.includes(schema[\"default\"]) ? [schema[\"default\"]] : []).map(function (example) {\n        return jsx(\"option\", {\n          value: example\n        }, example);\n      })\n    }, \"datalist_\" + id)]\n  });\n}\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\r\n */\n\n\nfunction SubmitButton(_ref) {\n  var uiSchema = _ref.uiSchema;\n\n  var _getSubmitButtonOptio = getSubmitButtonOptions(uiSchema),\n      submitText = _getSubmitButtonOptio.submitText,\n      norender = _getSubmitButtonOptio.norender,\n      _getSubmitButtonOptio2 = _getSubmitButtonOptio.props,\n      submitButtonProps = _getSubmitButtonOptio2 === void 0 ? {} : _getSubmitButtonOptio2;\n\n  if (norender) {\n    return null;\n  }\n\n  return jsx(\"div\", {\n    children: jsx(\"button\", _extends({\n      type: 'submit'\n    }, submitButtonProps, {\n      className: \"btn btn-info \" + submitButtonProps.className,\n      children: submitText\n    }))\n  });\n}\n\nvar _excluded$2 = [\"iconType\", \"icon\", \"className\", \"uiSchema\", \"registry\"];\n\nfunction IconButton(props) {\n  var _props$iconType = props.iconType,\n      iconType = _props$iconType === void 0 ? 'default' : _props$iconType,\n      icon = props.icon,\n      className = props.className,\n      otherProps = _objectWithoutPropertiesLoose(props, _excluded$2);\n\n  return jsx(\"button\", _extends({\n    type: 'button',\n    className: \"btn btn-\" + iconType + \" \" + className\n  }, otherProps, {\n    children: jsx(\"i\", {\n      className: \"glyphicon glyphicon-\" + icon\n    })\n  }));\n}\n\nfunction CopyButton(props) {\n  var translateString = props.registry.translateString;\n  return jsx(IconButton, _extends({\n    title: translateString(TranslatableString.CopyButton),\n    className: 'array-item-copy'\n  }, props, {\n    icon: 'copy'\n  }));\n}\n\nfunction MoveDownButton(props) {\n  var translateString = props.registry.translateString;\n  return jsx(IconButton, _extends({\n    title: translateString(TranslatableString.MoveDownButton),\n    className: 'array-item-move-down'\n  }, props, {\n    icon: 'arrow-down'\n  }));\n}\n\nfunction MoveUpButton(props) {\n  var translateString = props.registry.translateString;\n  return jsx(IconButton, _extends({\n    title: translateString(TranslatableString.MoveUpButton),\n    className: 'array-item-move-up'\n  }, props, {\n    icon: 'arrow-up'\n  }));\n}\n\nfunction RemoveButton(props) {\n  var translateString = props.registry.translateString;\n  return jsx(IconButton, _extends({\n    title: translateString(TranslatableString.RemoveButton),\n    className: 'array-item-remove'\n  }, props, {\n    iconType: 'danger',\n    icon: 'remove'\n  }));\n}\n/** The `AddButton` renders a button that represent the `Add` action on a form\r\n */\n\n\nfunction AddButton(_ref) {\n  var className = _ref.className,\n      onClick = _ref.onClick,\n      disabled = _ref.disabled,\n      registry = _ref.registry;\n  var translateString = registry.translateString;\n  return jsx(\"div\", {\n    className: 'row',\n    children: jsx(\"p\", {\n      className: \"col-xs-3 col-xs-offset-9 text-right \" + className,\n      children: jsx(IconButton, {\n        iconType: 'info',\n        icon: 'plus',\n        className: 'btn-add col-xs-12',\n        title: translateString(TranslatableString.AddButton),\n        onClick: onClick,\n        disabled: disabled,\n        registry: registry\n      })\n    })\n  });\n}\n\nfunction buttonTemplates() {\n  return {\n    SubmitButton: SubmitButton,\n    AddButton: AddButton,\n    CopyButton: CopyButton,\n    MoveDownButton: MoveDownButton,\n    MoveUpButton: MoveUpButton,\n    RemoveButton: RemoveButton\n  };\n}\n/** The `DescriptionField` is the template to use to render the description of a field\r\n *\r\n * @param props - The `DescriptionFieldProps` for this component\r\n */\n\n\nfunction DescriptionField(props) {\n  var id = props.id,\n      description = props.description;\n\n  if (!description) {\n    return null;\n  }\n\n  if (typeof description === 'string') {\n    return jsx(\"p\", {\n      id: id,\n      className: 'field-description',\n      children: description\n    });\n  } else {\n    return jsx(\"div\", {\n      id: id,\n      className: 'field-description',\n      children: description\n    });\n  }\n}\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\r\n *\r\n * @param props - The `ErrorListProps` for this component\r\n */\n\n\nfunction ErrorList(_ref) {\n  var errors = _ref.errors,\n      registry = _ref.registry;\n  var translateString = registry.translateString;\n  return jsxs(\"div\", {\n    className: 'panel panel-danger errors',\n    children: [jsx(\"div\", {\n      className: 'panel-heading',\n      children: jsx(\"h3\", {\n        className: 'panel-title',\n        children: translateString(TranslatableString.ErrorsLabel)\n      })\n    }), jsx(\"ul\", {\n      className: 'list-group',\n      children: errors.map(function (error, i) {\n        return jsx(\"li\", {\n          className: 'list-group-item text-danger',\n          children: error.stack\n        }, i);\n      })\n    })]\n  });\n}\n\nvar REQUIRED_FIELD_SYMBOL$1 = '*';\n/** Renders a label for a field\r\n *\r\n * @param props - The `LabelProps` for this component\r\n */\n\nfunction Label(props) {\n  var label = props.label,\n      required = props.required,\n      id = props.id;\n\n  if (!label) {\n    return null;\n  }\n\n  return jsxs(\"label\", {\n    className: 'control-label',\n    htmlFor: id,\n    children: [label, required && jsx(\"span\", {\n      className: 'required',\n      children: REQUIRED_FIELD_SYMBOL$1\n    })]\n  });\n}\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\r\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\r\n *\r\n * @param props - The `FieldTemplateProps` for this component\r\n */\n\n\nfunction FieldTemplate(props) {\n  var id = props.id,\n      label = props.label,\n      children = props.children,\n      errors = props.errors,\n      help = props.help,\n      description = props.description,\n      hidden = props.hidden,\n      required = props.required,\n      displayLabel = props.displayLabel,\n      registry = props.registry,\n      uiSchema = props.uiSchema;\n  var uiOptions = getUiOptions(uiSchema);\n  var WrapIfAdditionalTemplate = getTemplate('WrapIfAdditionalTemplate', registry, uiOptions);\n\n  if (hidden) {\n    return jsx(\"div\", {\n      className: 'hidden',\n      children: children\n    });\n  }\n\n  return jsxs(WrapIfAdditionalTemplate, _extends({}, props, {\n    children: [displayLabel && jsx(Label, {\n      label: label,\n      required: required,\n      id: id\n    }), displayLabel && description ? description : null, children, errors, help]\n  }));\n}\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\r\n *\r\n * @param props - The `FieldErrorProps` for the errors being rendered\r\n */\n\n\nfunction FieldErrorTemplate(props) {\n  var _props$errors = props.errors,\n      errors = _props$errors === void 0 ? [] : _props$errors,\n      idSchema = props.idSchema;\n\n  if (errors.length === 0) {\n    return null;\n  }\n\n  var id = errorId(idSchema);\n  return jsx(\"div\", {\n    children: jsx(\"ul\", {\n      id: id,\n      className: 'error-detail bs-callout bs-callout-info',\n      children: errors.filter(function (elem) {\n        return !!elem;\n      }).map(function (error, index) {\n        return jsx(\"li\", {\n          className: 'text-danger',\n          children: error\n        }, index);\n      })\n    })\n  });\n}\n/** The `FieldHelpTemplate` component renders any help desired for a field\r\n *\r\n * @param props - The `FieldHelpProps` to be rendered\r\n */\n\n\nfunction FieldHelpTemplate(props) {\n  var idSchema = props.idSchema,\n      help = props.help;\n\n  if (!help) {\n    return null;\n  }\n\n  var id = helpId(idSchema);\n\n  if (typeof help === 'string') {\n    return jsx(\"p\", {\n      id: id,\n      className: 'help-block',\n      children: help\n    });\n  }\n\n  return jsx(\"div\", {\n    id: id,\n    className: 'help-block',\n    children: help\n  });\n}\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\r\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\r\n * the properties.\r\n *\r\n * @param props - The `ObjectFieldTemplateProps` for this component\r\n */\n\n\nfunction ObjectFieldTemplate(props) {\n  var description = props.description,\n      disabled = props.disabled,\n      formData = props.formData,\n      idSchema = props.idSchema,\n      onAddClick = props.onAddClick,\n      properties = props.properties,\n      readonly = props.readonly,\n      registry = props.registry,\n      required = props.required,\n      schema = props.schema,\n      title = props.title,\n      uiSchema = props.uiSchema;\n  var options = getUiOptions(uiSchema);\n  var TitleFieldTemplate = getTemplate('TitleFieldTemplate', registry, options);\n  var DescriptionFieldTemplate = getTemplate('DescriptionFieldTemplate', registry, options); // Button templates are not overridden in the uiSchema\n\n  var AddButton = registry.templates.ButtonTemplates.AddButton;\n  return jsxs(\"fieldset\", {\n    id: idSchema.$id,\n    children: [(options.title || title) && jsx(TitleFieldTemplate, {\n      id: titleId(idSchema),\n      title: options.title || title,\n      required: required,\n      schema: schema,\n      uiSchema: uiSchema,\n      registry: registry\n    }), (options.description || description) && jsx(DescriptionFieldTemplate, {\n      id: descriptionId(idSchema),\n      description: options.description || description,\n      schema: schema,\n      uiSchema: uiSchema,\n      registry: registry\n    }), properties.map(function (prop) {\n      return prop.content;\n    }), canExpand(schema, uiSchema, formData) && jsx(AddButton, {\n      className: 'object-property-expand',\n      onClick: onAddClick(schema),\n      disabled: disabled || readonly,\n      uiSchema: uiSchema,\n      registry: registry\n    })]\n  });\n}\n\nvar REQUIRED_FIELD_SYMBOL = '*';\n/** The `TitleField` is the template to use to render the title of a field\r\n *\r\n * @param props - The `TitleFieldProps` for this component\r\n */\n\nfunction TitleField(props) {\n  var id = props.id,\n      title = props.title,\n      required = props.required;\n  return jsxs(\"legend\", {\n    id: id,\n    children: [title, required && jsx(\"span\", {\n      className: 'required',\n      children: REQUIRED_FIELD_SYMBOL\n    })]\n  });\n}\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\r\n * react-jsonschema-form.\r\n *\r\n * @param props - The `FieldProps` for this template\r\n */\n\n\nfunction UnsupportedField(props) {\n  var schema = props.schema,\n      idSchema = props.idSchema,\n      reason = props.reason,\n      registry = props.registry;\n  var translateString = registry.translateString;\n  var translateEnum = TranslatableString.UnsupportedField;\n  var translateParams = [];\n\n  if (idSchema && idSchema.$id) {\n    translateEnum = TranslatableString.UnsupportedFieldWithId;\n    translateParams.push(idSchema.$id);\n  }\n\n  if (reason) {\n    translateEnum = translateEnum === TranslatableString.UnsupportedField ? TranslatableString.UnsupportedFieldWithReason : TranslatableString.UnsupportedFieldWithIdAndReason;\n    translateParams.push(reason);\n  }\n\n  return jsxs(\"div\", {\n    className: 'unsupported-field',\n    children: [jsx(\"p\", {\n      children: jsx(Markdown, {\n        children: translateString(translateEnum, translateParams)\n      })\n    }), schema && jsx(\"pre\", {\n      children: JSON.stringify(schema, null, 2)\n    })]\n  });\n}\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\r\n * part of an `additionalProperties` part of a schema.\r\n *\r\n * @param props - The `WrapIfAdditionalProps` for this component\r\n */\n\n\nfunction WrapIfAdditionalTemplate(props) {\n  var id = props.id,\n      classNames = props.classNames,\n      style = props.style,\n      disabled = props.disabled,\n      label = props.label,\n      onKeyChange = props.onKeyChange,\n      onDropPropertyClick = props.onDropPropertyClick,\n      readonly = props.readonly,\n      required = props.required,\n      schema = props.schema,\n      children = props.children,\n      uiSchema = props.uiSchema,\n      registry = props.registry;\n  var templates = registry.templates,\n      translateString = registry.translateString; // Button templates are not overridden in the uiSchema\n\n  var RemoveButton = templates.ButtonTemplates.RemoveButton;\n  var keyLabel = translateString(TranslatableString.KeyLabel, [label]);\n  var additional = (ADDITIONAL_PROPERTY_FLAG in schema);\n\n  if (!additional) {\n    return jsx(\"div\", {\n      className: classNames,\n      style: style,\n      children: children\n    });\n  }\n\n  return jsx(\"div\", {\n    className: classNames,\n    style: style,\n    children: jsxs(\"div\", {\n      className: 'row',\n      children: [jsx(\"div\", {\n        className: 'col-xs-5 form-additional',\n        children: jsxs(\"div\", {\n          className: 'form-group',\n          children: [jsx(Label, {\n            label: keyLabel,\n            required: required,\n            id: id + \"-key\"\n          }), jsx(\"input\", {\n            className: 'form-control',\n            type: 'text',\n            id: id + \"-key\",\n            onBlur: function onBlur(event) {\n              return onKeyChange(event.target.value);\n            },\n            defaultValue: label\n          })]\n        })\n      }), jsx(\"div\", {\n        className: 'form-additional form-group col-xs-5',\n        children: children\n      }), jsx(\"div\", {\n        className: 'col-xs-2',\n        children: jsx(RemoveButton, {\n          className: 'array-item-remove btn-block',\n          style: {\n            border: '0'\n          },\n          disabled: disabled || readonly,\n          onClick: onDropPropertyClick(label),\n          uiSchema: uiSchema,\n          registry: registry\n        })\n      })]\n    })\n  });\n}\n\nfunction templates() {\n  return {\n    ArrayFieldDescriptionTemplate: ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate: ArrayFieldItemTemplate,\n    ArrayFieldTemplate: ArrayFieldTemplate,\n    ArrayFieldTitleTemplate: ArrayFieldTitleTemplate,\n    ButtonTemplates: buttonTemplates(),\n    BaseInputTemplate: BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate: FieldTemplate,\n    FieldErrorTemplate: FieldErrorTemplate,\n    FieldHelpTemplate: FieldHelpTemplate,\n    ObjectFieldTemplate: ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate: WrapIfAdditionalTemplate\n  };\n}\n\nfunction rangeOptions(start, stop) {\n  var options = [];\n\n  for (var i = start; i <= stop; i++) {\n    options.push({\n      value: i,\n      label: pad(i, 2)\n    });\n  }\n\n  return options;\n}\n\nfunction readyForChange(state) {\n  return Object.values(state).every(function (value) {\n    return value !== -1;\n  });\n}\n\nfunction dateElementProps(state, time, yearsRange) {\n  if (yearsRange === void 0) {\n    yearsRange = [1900, new Date().getFullYear() + 2];\n  }\n\n  var year = state.year,\n      month = state.month,\n      day = state.day,\n      hour = state.hour,\n      minute = state.minute,\n      second = state.second;\n  var data = [{\n    type: 'year',\n    range: yearsRange,\n    value: year\n  }, {\n    type: 'month',\n    range: [1, 12],\n    value: month\n  }, {\n    type: 'day',\n    range: [1, 31],\n    value: day\n  }];\n\n  if (time) {\n    data.push({\n      type: 'hour',\n      range: [0, 23],\n      value: hour\n    }, {\n      type: 'minute',\n      range: [0, 59],\n      value: minute\n    }, {\n      type: 'second',\n      range: [0, 59],\n      value: second\n    });\n  }\n\n  return data;\n}\n\nfunction DateElement(_ref) {\n  var type = _ref.type,\n      range = _ref.range,\n      value = _ref.value,\n      select = _ref.select,\n      rootId = _ref.rootId,\n      name = _ref.name,\n      disabled = _ref.disabled,\n      readonly = _ref.readonly,\n      autofocus = _ref.autofocus,\n      registry = _ref.registry,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus;\n  var id = rootId + '_' + type;\n  var SelectWidget = registry.widgets.SelectWidget;\n  return jsx(SelectWidget, {\n    schema: {\n      type: 'integer'\n    },\n    id: id,\n    name: name,\n    className: 'form-control',\n    options: {\n      enumOptions: rangeOptions(range[0], range[1])\n    },\n    placeholder: type,\n    value: value,\n    disabled: disabled,\n    readonly: readonly,\n    autofocus: autofocus,\n    onChange: function onChange(value) {\n      return select(type, value);\n    },\n    onBlur: onBlur,\n    onFocus: onFocus,\n    registry: registry,\n    label: '',\n    \"aria-describedby\": ariaDescribedByIds(rootId)\n  });\n}\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction AltDateWidget(_ref2) {\n  var _ref2$time = _ref2.time,\n      time = _ref2$time === void 0 ? false : _ref2$time,\n      _ref2$disabled = _ref2.disabled,\n      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,\n      _ref2$readonly = _ref2.readonly,\n      readonly = _ref2$readonly === void 0 ? false : _ref2$readonly,\n      _ref2$autofocus = _ref2.autofocus,\n      autofocus = _ref2$autofocus === void 0 ? false : _ref2$autofocus,\n      options = _ref2.options,\n      id = _ref2.id,\n      name = _ref2.name,\n      registry = _ref2.registry,\n      onBlur = _ref2.onBlur,\n      onFocus = _ref2.onFocus,\n      onChange = _ref2.onChange,\n      value = _ref2.value;\n  var translateString = registry.translateString;\n\n  var _useState = useState(value),\n      lastValue = _useState[0],\n      setLastValue = _useState[1];\n\n  var _useReducer = useReducer(function (state, action) {\n    return _extends({}, state, action);\n  }, parseDateString(value, time)),\n      state = _useReducer[0],\n      setState = _useReducer[1];\n\n  useEffect(function () {\n    var stateValue = toDateString(state, time);\n\n    if (readyForChange(state) && stateValue !== value) {\n      // The user changed the date to a new valid data via the comboboxes, so call onChange\n      onChange(stateValue);\n    } else if (lastValue !== value) {\n      // We got a new value in the props\n      setLastValue(value);\n      setState(parseDateString(value, time));\n    }\n  }, [time, value, onChange, state, lastValue]);\n  var handleChange = useCallback(function (property, value) {\n    var _setState;\n\n    setState((_setState = {}, _setState[property] = value, _setState));\n  }, []);\n  var handleSetNow = useCallback(function (event) {\n    event.preventDefault();\n\n    if (disabled || readonly) {\n      return;\n    }\n\n    var nextState = parseDateString(new Date().toJSON(), time);\n    onChange(toDateString(nextState, time));\n  }, [disabled, readonly, time]);\n  var handleClear = useCallback(function (event) {\n    event.preventDefault();\n\n    if (disabled || readonly) {\n      return;\n    }\n\n    onChange(undefined);\n  }, [disabled, readonly, onChange]);\n  return jsxs(\"ul\", {\n    className: 'list-inline',\n    children: [dateElementProps(state, time, options.yearsRange).map(function (elemProps, i) {\n      return jsx(\"li\", {\n        className: 'list-inline-item',\n        children: jsx(DateElement, _extends({\n          rootId: id,\n          name: name,\n          select: handleChange\n        }, elemProps, {\n          disabled: disabled,\n          readonly: readonly,\n          registry: registry,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          autofocus: autofocus && i === 0\n        }))\n      }, i);\n    }), (options.hideNowButton !== 'undefined' ? !options.hideNowButton : true) && jsx(\"li\", {\n      className: 'list-inline-item',\n      children: jsx(\"a\", {\n        href: '#',\n        className: 'btn btn-info btn-now',\n        onClick: handleSetNow,\n        children: translateString(TranslatableString.NowLabel)\n      })\n    }), (options.hideClearButton !== 'undefined' ? !options.hideClearButton : true) && jsx(\"li\", {\n      className: 'list-inline-item',\n      children: jsx(\"a\", {\n        href: '#',\n        className: 'btn btn-warning btn-clear',\n        onClick: handleClear,\n        children: translateString(TranslatableString.ClearLabel)\n      })\n    })]\n  });\n}\n\nvar _excluded$1 = [\"time\"];\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\r\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\nfunction AltDateTimeWidget(_ref) {\n  var _ref$time = _ref.time,\n      time = _ref$time === void 0 ? true : _ref$time,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n\n  var AltDateWidget = props.registry.widgets.AltDateWidget;\n  return jsx(AltDateWidget, _extends({\n    time: time\n  }, props));\n}\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\r\n *  It is typically used to represent a boolean.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction CheckboxWidget(_ref) {\n  var schema = _ref.schema,\n      uiSchema = _ref.uiSchema,\n      options = _ref.options,\n      id = _ref.id,\n      value = _ref.value,\n      disabled = _ref.disabled,\n      readonly = _ref.readonly,\n      label = _ref.label,\n      _ref$autofocus = _ref.autofocus,\n      autofocus = _ref$autofocus === void 0 ? false : _ref$autofocus,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      onChange = _ref.onChange,\n      registry = _ref.registry;\n  var DescriptionFieldTemplate = getTemplate('DescriptionFieldTemplate', registry, options); // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n\n  var required = schemaRequiresTrueValue(schema);\n  var handleChange = useCallback(function (event) {\n    return onChange(event.target.checked);\n  }, [onChange]);\n  var handleBlur = useCallback(function (event) {\n    return onBlur(id, event.target.checked);\n  }, [onBlur, id]);\n  var handleFocus = useCallback(function (event) {\n    return onFocus(id, event.target.checked);\n  }, [onFocus, id]);\n  return jsxs(\"div\", {\n    className: \"checkbox \" + (disabled || readonly ? 'disabled' : ''),\n    children: [schema.description && jsx(DescriptionFieldTemplate, {\n      id: descriptionId(id),\n      description: schema.description,\n      schema: schema,\n      uiSchema: uiSchema,\n      registry: registry\n    }), jsxs(\"label\", {\n      children: [jsx(\"input\", {\n        type: 'checkbox',\n        id: id,\n        name: id,\n        checked: typeof value === 'undefined' ? false : value,\n        required: required,\n        disabled: disabled || readonly,\n        autoFocus: autofocus,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        onFocus: handleFocus,\n        \"aria-describedby\": ariaDescribedByIds(id)\n      }), jsx(\"span\", {\n        children: label\n      })]\n    })]\n  });\n}\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\r\n *  It is typically used to represent an array of enums.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction CheckboxesWidget(_ref) {\n  var id = _ref.id,\n      disabled = _ref.disabled,\n      _ref$options = _ref.options,\n      _ref$options$inline = _ref$options.inline,\n      inline = _ref$options$inline === void 0 ? false : _ref$options$inline,\n      enumOptions = _ref$options.enumOptions,\n      enumDisabled = _ref$options.enumDisabled,\n      emptyValue = _ref$options.emptyValue,\n      value = _ref.value,\n      _ref$autofocus = _ref.autofocus,\n      autofocus = _ref$autofocus === void 0 ? false : _ref$autofocus,\n      readonly = _ref.readonly,\n      onChange = _ref.onChange,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus;\n  var checkboxesValues = Array.isArray(value) ? value : [value];\n  var handleBlur = useCallback(function (_ref2) {\n    var value = _ref2.target.value;\n    return onBlur(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n  }, [onBlur, id]);\n  var handleFocus = useCallback(function (_ref3) {\n    var value = _ref3.target.value;\n    return onFocus(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n  }, [onFocus, id]);\n  return jsx(\"div\", {\n    className: 'checkboxes',\n    id: id,\n    children: Array.isArray(enumOptions) && enumOptions.map(function (option, index) {\n      var checked = enumOptionsIsSelected(option.value, checkboxesValues);\n      var itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n      var disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n      var handleChange = function handleChange(event) {\n        if (event.target.checked) {\n          onChange(enumOptionsSelectValue(index, checkboxesValues, enumOptions));\n        } else {\n          onChange(enumOptionsDeselectValue(index, checkboxesValues, enumOptions));\n        }\n      };\n\n      var checkbox = jsxs(\"span\", {\n        children: [jsx(\"input\", {\n          type: 'checkbox',\n          id: optionId(id, index),\n          name: id,\n          checked: checked,\n          value: String(index),\n          disabled: disabled || itemDisabled || readonly,\n          autoFocus: autofocus && index === 0,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          onFocus: handleFocus,\n          \"aria-describedby\": ariaDescribedByIds(id)\n        }), jsx(\"span\", {\n          children: option.label\n        })]\n      });\n      return inline ? jsx(\"label\", {\n        className: \"checkbox-inline \" + disabledCls,\n        children: checkbox\n      }, index) : jsx(\"div\", {\n        className: \"checkbox \" + disabledCls,\n        children: jsx(\"label\", {\n          children: checkbox\n        })\n      }, index);\n    })\n  });\n}\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\r\n * either disabled or readonly.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction ColorWidget(props) {\n  var disabled = props.disabled,\n      readonly = props.readonly,\n      options = props.options,\n      registry = props.registry;\n  var BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n  return jsx(BaseInputTemplate, _extends({\n    type: 'color'\n  }, props, {\n    disabled: disabled || readonly\n  }));\n}\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\r\n * the value to undefined when it is falsy during the `onChange` handling.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction DateWidget(props) {\n  var onChange = props.onChange,\n      options = props.options,\n      registry = props.registry;\n  var BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n  var handleChange = useCallback(function (value) {\n    return onChange(value || undefined);\n  }, [onChange]);\n  return jsx(BaseInputTemplate, _extends({\n    type: 'date'\n  }, props, {\n    onChange: handleChange\n  }));\n}\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\r\n * the value to/from utc using the appropriate utility functions.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction DateTimeWidget(props) {\n  var _onChange = props.onChange,\n      value = props.value,\n      options = props.options,\n      registry = props.registry;\n  var BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n  return jsx(BaseInputTemplate, _extends({\n    type: 'datetime-local'\n  }, props, {\n    value: utcToLocal(value),\n    onChange: function onChange(value) {\n      return _onChange(localToUTC(value));\n    }\n  }));\n}\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction EmailWidget(props) {\n  var options = props.options,\n      registry = props.registry;\n  var BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n  return jsx(BaseInputTemplate, _extends({\n    type: 'email'\n  }, props));\n}\n\nfunction addNameToDataURL(dataURL, name) {\n  if (dataURL === null) {\n    return null;\n  }\n\n  return dataURL.replace(';base64', \";name=\" + encodeURIComponent(name) + \";base64\");\n}\n\nfunction processFile(file) {\n  var name = file.name,\n      size = file.size,\n      type = file.type;\n  return new Promise(function (resolve, reject) {\n    var reader = new window.FileReader();\n    reader.onerror = reject;\n\n    reader.onload = function (event) {\n      var _event$target;\n\n      if (typeof ((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result) === 'string') {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name: name,\n          size: size,\n          type: type\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name: name,\n          size: size,\n          type: type\n        });\n      }\n    };\n\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo(_ref) {\n  var filesInfo = _ref.filesInfo,\n      registry = _ref.registry;\n\n  if (filesInfo.length === 0) {\n    return null;\n  }\n\n  var translateString = registry.translateString;\n  return jsx(\"ul\", {\n    className: 'file-info',\n    children: filesInfo.map(function (fileInfo, key) {\n      var name = fileInfo.name,\n          size = fileInfo.size,\n          type = fileInfo.type;\n      return jsx(\"li\", {\n        children: jsx(Markdown, {\n          children: translateString(TranslatableString.FilesInfo, [name, type, String(size)])\n        })\n      }, key);\n    })\n  });\n}\n\nfunction extractFileInfo(dataURLs) {\n  return dataURLs.filter(function (dataURL) {\n    return dataURL;\n  }).map(function (dataURL) {\n    var _dataURItoBlob = dataURItoBlob(dataURL),\n        blob = _dataURItoBlob.blob,\n        name = _dataURItoBlob.name;\n\n    return {\n      name: name,\n      size: blob.size,\n      type: blob.type\n    };\n  });\n}\n/**\r\n *  The `FileWidget` is a widget for rendering file upload fields.\r\n *  It is typically used with a string property with data-url format.\r\n */\n\n\nfunction FileWidget(props) {\n  var disabled = props.disabled,\n      readonly = props.readonly,\n      multiple = props.multiple,\n      onChange = props.onChange,\n      value = props.value,\n      options = props.options,\n      registry = props.registry;\n  var BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n  var extractedFilesInfo = useMemo(function () {\n    return Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]);\n  }, [value]);\n\n  var _useState = useState(extractedFilesInfo),\n      filesInfo = _useState[0],\n      setFilesInfo = _useState[1];\n\n  var handleChange = useCallback(function (event) {\n    if (!event.target.files) {\n      return;\n    }\n\n    processFiles(event.target.files).then(function (filesInfoEvent) {\n      setFilesInfo(filesInfoEvent);\n      var newValue = filesInfoEvent.map(function (fileInfo) {\n        return fileInfo.dataURL;\n      });\n\n      if (multiple) {\n        onChange(newValue);\n      } else {\n        onChange(newValue[0]);\n      }\n    });\n  }, [multiple, onChange]);\n  return jsxs(\"div\", {\n    children: [jsx(BaseInputTemplate, _extends({}, props, {\n      disabled: disabled || readonly,\n      type: 'file',\n      onChangeOverride: handleChange,\n      value: '',\n      accept: options.accept ? String(options.accept) : undefined\n    })), jsx(FilesInfo, {\n      filesInfo: filesInfo,\n      registry: registry\n    })]\n  });\n}\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\r\n *  It is typically used by setting type to \"hidden\".\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction HiddenWidget(_ref) {\n  var id = _ref.id,\n      value = _ref.value;\n  return jsx(\"input\", {\n    type: 'hidden',\n    id: id,\n    name: id,\n    value: typeof value === 'undefined' ? '' : value\n  });\n}\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction PasswordWidget(props) {\n  var options = props.options,\n      registry = props.registry;\n  var BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n  return jsx(BaseInputTemplate, _extends({\n    type: 'password'\n  }, props));\n}\n/** The `RadioWidget` is a widget for rendering a radio group.\r\n *  It is typically used with a string property constrained with enum options.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction RadioWidget(_ref) {\n  var options = _ref.options,\n      value = _ref.value,\n      required = _ref.required,\n      disabled = _ref.disabled,\n      readonly = _ref.readonly,\n      _ref$autofocus = _ref.autofocus,\n      autofocus = _ref$autofocus === void 0 ? false : _ref$autofocus,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      onChange = _ref.onChange,\n      id = _ref.id; // Generating a unique field name to identify this set of radio buttons\n\n  var name = Math.random().toString();\n  var enumOptions = options.enumOptions,\n      enumDisabled = options.enumDisabled,\n      inline = options.inline,\n      emptyValue = options.emptyValue;\n  var handleBlur = useCallback(function (_ref2) {\n    var value = _ref2.target.value;\n    return onBlur(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n  }, [onBlur, id]);\n  var handleFocus = useCallback(function (_ref3) {\n    var value = _ref3.target.value;\n    return onFocus(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n  }, [onFocus, id]);\n  return jsx(\"div\", {\n    className: 'field-radio-group',\n    id: id,\n    children: Array.isArray(enumOptions) && enumOptions.map(function (option, i) {\n      var checked = enumOptionsIsSelected(option.value, value);\n      var itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n      var disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n      var handleChange = function handleChange() {\n        return onChange(option.value);\n      };\n\n      var radio = jsxs(\"span\", {\n        children: [jsx(\"input\", {\n          type: 'radio',\n          id: optionId(id, i),\n          checked: checked,\n          name: name,\n          required: required,\n          value: String(i),\n          disabled: disabled || itemDisabled || readonly,\n          autoFocus: autofocus && i === 0,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          onFocus: handleFocus,\n          \"aria-describedby\": ariaDescribedByIds(id)\n        }), jsx(\"span\", {\n          children: option.label\n        })]\n      });\n      return inline ? jsx(\"label\", {\n        className: \"radio-inline \" + disabledCls,\n        children: radio\n      }, i) : jsx(\"div\", {\n        className: \"radio \" + disabledCls,\n        children: jsx(\"label\", {\n          children: radio\n        })\n      }, i);\n    })\n  });\n}\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\r\n * in a div, with the value along side it.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction RangeWidget(props) {\n  var value = props.value,\n      BaseInputTemplate = props.registry.templates.BaseInputTemplate;\n  return jsxs(\"div\", {\n    className: 'field-range-wrapper',\n    children: [jsx(BaseInputTemplate, _extends({\n      type: 'range'\n    }, props)), jsx(\"span\", {\n      className: 'range-view',\n      children: value\n    })]\n  });\n}\n\nfunction getValue(event, multiple) {\n  if (multiple) {\n    return Array.from(event.target.options).slice().filter(function (o) {\n      return o.selected;\n    }).map(function (o) {\n      return o.value;\n    });\n  }\n\n  return event.target.value;\n}\n/** The `SelectWidget` is a widget for rendering dropdowns.\r\n *  It is typically used with string properties constrained with enum options.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction SelectWidget(_ref) {\n  var schema = _ref.schema,\n      id = _ref.id,\n      options = _ref.options,\n      value = _ref.value,\n      required = _ref.required,\n      disabled = _ref.disabled,\n      readonly = _ref.readonly,\n      _ref$multiple = _ref.multiple,\n      multiple = _ref$multiple === void 0 ? false : _ref$multiple,\n      _ref$autofocus = _ref.autofocus,\n      autofocus = _ref$autofocus === void 0 ? false : _ref$autofocus,\n      onChange = _ref.onChange,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      placeholder = _ref.placeholder;\n  var enumOptions = options.enumOptions,\n      enumDisabled = options.enumDisabled,\n      optEmptyVal = options.emptyValue;\n  var emptyValue = multiple ? [] : '';\n  var handleFocus = useCallback(function (event) {\n    var newValue = getValue(event, multiple);\n    return onFocus(id, enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));\n  }, [onFocus, id, schema, multiple, options]);\n  var handleBlur = useCallback(function (event) {\n    var newValue = getValue(event, multiple);\n    return onBlur(id, enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));\n  }, [onBlur, id, schema, multiple, options]);\n  var handleChange = useCallback(function (event) {\n    var newValue = getValue(event, multiple);\n    return onChange(enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));\n  }, [onChange, schema, multiple, options]);\n  var selectedIndexes = enumOptionsIndexForValue(value, enumOptions, multiple);\n  return jsxs(\"select\", {\n    id: id,\n    name: id,\n    multiple: multiple,\n    className: 'form-control',\n    value: typeof selectedIndexes === 'undefined' ? emptyValue : selectedIndexes,\n    required: required,\n    disabled: disabled || readonly,\n    autoFocus: autofocus,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onChange: handleChange,\n    \"aria-describedby\": ariaDescribedByIds(id),\n    children: [!multiple && schema[\"default\"] === undefined && jsx(\"option\", {\n      value: '',\n      children: placeholder\n    }), Array.isArray(enumOptions) && enumOptions.map(function (_ref2, i) {\n      var value = _ref2.value,\n          label = _ref2.label;\n      var disabled = enumDisabled && enumDisabled.indexOf(value) !== -1;\n      return jsx(\"option\", {\n        value: String(i),\n        disabled: disabled,\n        children: label\n      }, i);\n    })]\n  });\n}\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction TextareaWidget(_ref) {\n  var id = _ref.id,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options,\n      placeholder = _ref.placeholder,\n      value = _ref.value,\n      required = _ref.required,\n      disabled = _ref.disabled,\n      readonly = _ref.readonly,\n      _ref$autofocus = _ref.autofocus,\n      autofocus = _ref$autofocus === void 0 ? false : _ref$autofocus,\n      onChange = _ref.onChange,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus;\n  var handleChange = useCallback(function (_ref2) {\n    var value = _ref2.target.value;\n    return onChange(value === '' ? options.emptyValue : value);\n  }, [onChange, options.emptyValue]);\n  var handleBlur = useCallback(function (_ref3) {\n    var value = _ref3.target.value;\n    return onBlur(id, value);\n  }, [onBlur, id]);\n  var handleFocus = useCallback(function (_ref4) {\n    var value = _ref4.target.value;\n    return onFocus(id, value);\n  }, [id, onFocus]);\n  return jsx(\"textarea\", {\n    id: id,\n    name: id,\n    className: 'form-control',\n    value: value ? value : '',\n    placeholder: placeholder,\n    required: required,\n    disabled: disabled,\n    readOnly: readonly,\n    autoFocus: autofocus,\n    rows: options.rows,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onChange: handleChange,\n    \"aria-describedby\": ariaDescribedByIds(id)\n  });\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {}\n};\n/** The `TextWidget` component uses the `BaseInputTemplate`.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\nfunction TextWidget(props) {\n  var options = props.options,\n      registry = props.registry;\n  var BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n  return jsx(BaseInputTemplate, _extends({}, props));\n}\n/** The `TimeWidget` component uses the `BaseInputTemplate` changing the type to `time` and transforms\r\n * the value to undefined when it is falsy during the `onChange` handling.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction TimeWidget(props) {\n  var onChange = props.onChange,\n      options = props.options,\n      registry = props.registry;\n  var BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n  var handleChange = useCallback(function (value) {\n    return onChange(value ? value + \":00\" : undefined);\n  }, [onChange]);\n  return jsx(BaseInputTemplate, _extends({\n    type: 'time'\n  }, props, {\n    onChange: handleChange\n  }));\n}\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction URLWidget(props) {\n  var options = props.options,\n      registry = props.registry;\n  var BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n  return jsx(BaseInputTemplate, _extends({\n    type: 'url'\n  }, props));\n}\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\r\n *\r\n * @param props - The `WidgetProps` for this component\r\n */\n\n\nfunction UpDownWidget(props) {\n  var options = props.options,\n      registry = props.registry;\n  var BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n  return jsx(BaseInputTemplate, _extends({\n    type: 'number'\n  }, props));\n}\n\nfunction widgets() {\n  return {\n    AltDateWidget: AltDateWidget,\n    AltDateTimeWidget: AltDateTimeWidget,\n    CheckboxWidget: CheckboxWidget,\n    CheckboxesWidget: CheckboxesWidget,\n    ColorWidget: ColorWidget,\n    DateWidget: DateWidget,\n    DateTimeWidget: DateTimeWidget,\n    EmailWidget: EmailWidget,\n    FileWidget: FileWidget,\n    HiddenWidget: HiddenWidget,\n    PasswordWidget: PasswordWidget,\n    RadioWidget: RadioWidget,\n    RangeWidget: RangeWidget,\n    SelectWidget: SelectWidget,\n    TextWidget: TextWidget,\n    TextareaWidget: TextareaWidget,\n    TimeWidget: TimeWidget,\n    UpDownWidget: UpDownWidget,\n    URLWidget: URLWidget\n  };\n}\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\r\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\r\n * rootSchema and validator. It will be added into the computed registry later in the Form.\r\n */\n\n\nfunction getDefaultRegistry() {\n  return {\n    fields: fields(),\n    templates: templates(),\n    widgets: widgets(),\n    rootSchema: {},\n    formContext: {},\n    translateString: englishStringTranslator\n  };\n}\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\n\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\r\n   * provide any possible type here\r\n   */\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\r\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\r\n   * state construction.\r\n   *\r\n   * @param props - The initial props for the `Form`\r\n   */\n\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.formElement = void 0;\n\n    _this.getUsedFormData = function (formData, fields) {\n      // For the case of a single input form\n      if (fields.length === 0 && typeof formData !== 'object') {\n        return formData;\n      } // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n\n\n      var data = _pick(formData, fields);\n\n      if (Array.isArray(formData)) {\n        return Object.keys(data).map(function (key) {\n          return data[key];\n        });\n      }\n\n      return data;\n    };\n\n    _this.getFieldNames = function (pathSchema, formData) {\n      var getAllPaths = function getAllPaths(_obj, acc, paths) {\n        if (acc === void 0) {\n          acc = [];\n        }\n\n        if (paths === void 0) {\n          paths = [[]];\n        }\n\n        Object.keys(_obj).forEach(function (key) {\n          if (typeof _obj[key] === 'object') {\n            var newPaths = paths.map(function (path) {\n              return [].concat(path, [key]);\n            }); // If an object is marked with additionalProperties, all its keys are valid\n\n            if (_obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] && _obj[key][NAME_KEY] !== '') {\n              acc.push(_obj[key][NAME_KEY]);\n            } else {\n              getAllPaths(_obj[key], acc, newPaths);\n            }\n          } else if (key === NAME_KEY && _obj[key] !== '') {\n            paths.forEach(function (path) {\n              var formValue = get(formData, path); // adds path to fieldNames if it points to a value\n              // or an empty object/array\n\n              if (typeof formValue !== 'object' || isEmpty(formValue)) {\n                acc.push(path);\n              }\n            });\n          }\n        });\n        return acc;\n      };\n\n      return getAllPaths(pathSchema);\n    };\n\n    _this.onChange = function (formData, newErrorSchema, id) {\n      var _this$props = _this.props,\n          extraErrors = _this$props.extraErrors,\n          omitExtraData = _this$props.omitExtraData,\n          liveOmit = _this$props.liveOmit,\n          noValidate = _this$props.noValidate,\n          liveValidate = _this$props.liveValidate,\n          onChange = _this$props.onChange;\n      var _this$state = _this.state,\n          schemaUtils = _this$state.schemaUtils,\n          schema = _this$state.schema;\n\n      if (isObject$1(formData) || Array.isArray(formData)) {\n        var newState = _this.getStateFromProps(_this.props, formData);\n\n        formData = newState.formData;\n      }\n\n      var mustValidate = !noValidate && liveValidate;\n      var state = {\n        formData: formData,\n        schema: schema\n      };\n      var newFormData = formData;\n\n      if (omitExtraData === true && liveOmit === true) {\n        var retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n        var pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', formData);\n\n        var fieldNames = _this.getFieldNames(pathSchema, formData);\n\n        newFormData = _this.getUsedFormData(formData, fieldNames);\n        state = {\n          formData: newFormData\n        };\n      }\n\n      if (mustValidate) {\n        var schemaValidation = _this.validate(newFormData);\n\n        var errors = schemaValidation.errors;\n        var errorSchema = schemaValidation.errorSchema;\n        var schemaValidationErrors = errors;\n        var schemaValidationErrorSchema = errorSchema;\n\n        if (extraErrors) {\n          var merged = schemaUtils.mergeValidationData(schemaValidation, extraErrors);\n          errorSchema = merged.errorSchema;\n          errors = merged.errors;\n        }\n\n        state = {\n          formData: newFormData,\n          errors: errors,\n          errorSchema: errorSchema,\n          schemaValidationErrors: schemaValidationErrors,\n          schemaValidationErrorSchema: schemaValidationErrorSchema\n        };\n      } else if (!noValidate && newErrorSchema) {\n        var _errorSchema = extraErrors ? mergeObjects(newErrorSchema, extraErrors, 'preventDuplicates') : newErrorSchema;\n\n        state = {\n          formData: newFormData,\n          errorSchema: _errorSchema,\n          errors: schemaUtils.getValidator().toErrorList(_errorSchema)\n        };\n      }\n\n      _this.setState(state, function () {\n        return onChange && onChange(_extends({}, _this.state, state), id);\n      });\n    };\n\n    _this.reset = function () {\n      var onChange = _this.props.onChange;\n\n      var newState = _this.getStateFromProps(_this.props, undefined);\n\n      var newFormData = newState.formData;\n      var state = {\n        formData: newFormData,\n        errorSchema: {},\n        errors: [],\n        schemaValidationErrors: [],\n        schemaValidationErrorSchema: {}\n      };\n\n      _this.setState(state, function () {\n        return onChange && onChange(_extends({}, _this.state, state));\n      });\n    };\n\n    _this.onBlur = function (id, data) {\n      var onBlur = _this.props.onBlur;\n\n      if (onBlur) {\n        onBlur(id, data);\n      }\n    };\n\n    _this.onFocus = function (id, data) {\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(id, data);\n      }\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n\n      if (event.target !== event.currentTarget) {\n        return;\n      }\n\n      event.persist();\n      var _this$props2 = _this.props,\n          omitExtraData = _this$props2.omitExtraData,\n          extraErrors = _this$props2.extraErrors,\n          noValidate = _this$props2.noValidate,\n          onSubmit = _this$props2.onSubmit;\n      var newFormData = _this.state.formData;\n      var _this$state2 = _this.state,\n          schema = _this$state2.schema,\n          schemaUtils = _this$state2.schemaUtils;\n\n      if (omitExtraData === true) {\n        var retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n        var pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', newFormData);\n\n        var fieldNames = _this.getFieldNames(pathSchema, newFormData);\n\n        newFormData = _this.getUsedFormData(newFormData, fieldNames);\n      }\n\n      if (noValidate || _this.validateForm()) {\n        // There are no errors generated through schema validation.\n        // Check for user provided errors and update state accordingly.\n        var errorSchema = extraErrors || {};\n        var errors = extraErrors ? schemaUtils.getValidator().toErrorList(extraErrors) : [];\n\n        _this.setState({\n          formData: newFormData,\n          errors: errors,\n          errorSchema: errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {}\n        }, function () {\n          if (onSubmit) {\n            onSubmit(_extends({}, _this.state, {\n              formData: newFormData,\n              status: 'submitted'\n            }), event);\n          }\n        });\n      }\n    };\n\n    if (!props.validator) {\n      throw new Error('A validator is required for Form functionality to work');\n    }\n\n    _this.state = _this.getStateFromProps(props, props.formData);\n\n    if (_this.props.onChange && !deepEquals(_this.state.formData, _this.props.formData)) {\n      _this.props.onChange(_this.state);\n    }\n\n    _this.formElement = /*#__PURE__*/createRef();\n    return _this;\n  }\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\r\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\r\n   * state construction.\r\n   *\r\n   * @param nextProps - The new set of props about to be applied to the `Form`\r\n   */\n\n\n  var _proto = Form.prototype;\n\n  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {\n    var nextState = this.getStateFromProps(nextProps, nextProps.formData);\n\n    if (!deepEquals(nextState.formData, nextProps.formData) && !deepEquals(nextState.formData, this.state.formData) && nextProps.onChange) {\n      nextProps.onChange(nextState);\n    }\n\n    this.setState(nextState);\n  }\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\r\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\r\n   * validation process IF required by the `props`.\r\n   *\r\n   * @param props - The props passed to the `Form`\r\n   * @param inputFormData - The new or current data for the `Form`\r\n   * @returns - The new state for the `Form`\r\n   */\n  ;\n\n  _proto.getStateFromProps = function getStateFromProps(props, inputFormData) {\n    var state = this.state || {};\n    var schema = 'schema' in props ? props.schema : this.props.schema;\n    var uiSchema = ('uiSchema' in props ? props.uiSchema : this.props.uiSchema) || {};\n    var edit = typeof inputFormData !== 'undefined';\n    var liveValidate = 'liveValidate' in props ? props.liveValidate : this.props.liveValidate;\n    var mustValidate = edit && !props.noValidate && liveValidate;\n    var rootSchema = schema;\n    var schemaUtils = state.schemaUtils;\n\n    if (!schemaUtils || schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)) {\n      schemaUtils = createSchemaUtils(props.validator, rootSchema);\n    }\n\n    var formData = schemaUtils.getDefaultFormState(schema, inputFormData);\n    var retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    var getCurrentErrors = function getCurrentErrors() {\n      if (props.noValidate) {\n        return {\n          errors: [],\n          errorSchema: {}\n        };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {}\n        };\n      }\n\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {}\n      };\n    };\n\n    var errors;\n    var errorSchema;\n    var schemaValidationErrors = state.schemaValidationErrors;\n    var schemaValidationErrorSchema = state.schemaValidationErrorSchema;\n\n    if (mustValidate) {\n      var schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      var currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n\n    if (props.extraErrors) {\n      var merged = schemaUtils.mergeValidationData({\n        errorSchema: errorSchema,\n        errors: errors\n      }, props.extraErrors);\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n\n    var idSchema = schemaUtils.toIdSchema(retrievedSchema, uiSchema['ui:rootFieldId'], formData, props.idPrefix, props.idSeparator);\n    var nextState = {\n      schemaUtils: schemaUtils,\n      schema: schema,\n      uiSchema: uiSchema,\n      idSchema: idSchema,\n      formData: formData,\n      edit: edit,\n      errors: errors,\n      errorSchema: errorSchema,\n      schemaValidationErrors: schemaValidationErrors,\n      schemaValidationErrorSchema: schemaValidationErrorSchema\n    };\n    return nextState;\n  }\n  /** React lifecycle method that is used to determine whether component should be updated.\r\n   *\r\n   * @param nextProps - The next version of the props\r\n   * @param nextState - The next version of the state\r\n   * @returns - True if the component should be updated, false otherwise\r\n   */\n  ;\n\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n    return shouldRender(this, nextProps, nextState);\n  }\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\r\n   * `schemaUtils` in the state), returning the results.\r\n   *\r\n   * @param formData - The new form data to validate\r\n   * @param schema - The schema used to validate against\r\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\r\n   */\n  ;\n\n  _proto.validate = function validate(formData, schema, altSchemaUtils) {\n    if (schema === void 0) {\n      schema = this.props.schema;\n    }\n\n    var schemaUtils = altSchemaUtils ? altSchemaUtils : this.state.schemaUtils;\n    var _this$props3 = this.props,\n        customValidate = _this$props3.customValidate,\n        transformErrors = _this$props3.transformErrors,\n        uiSchema = _this$props3.uiSchema;\n    var resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils.getValidator().validateFormData(formData, resolvedSchema, customValidate, transformErrors, uiSchema);\n  }\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  ;\n\n  _proto.renderErrors = function renderErrors(registry) {\n    var _this$state3 = this.state,\n        errors = _this$state3.errors,\n        errorSchema = _this$state3.errorSchema,\n        schema = _this$state3.schema,\n        uiSchema = _this$state3.uiSchema;\n    var formContext = this.props.formContext;\n    var options = getUiOptions(uiSchema);\n    var ErrorListTemplate = getTemplate('ErrorListTemplate', registry, options);\n\n    if (errors && errors.length) {\n      return jsx(ErrorListTemplate, {\n        errors: errors,\n        errorSchema: errorSchema || {},\n        schema: schema,\n        uiSchema: uiSchema,\n        formContext: formContext,\n        registry: registry\n      });\n    }\n\n    return null;\n  }\n  /** Returns the `formData` with only the elements specified in the `fields` list\r\n   *\r\n   * @param formData - The data for the `Form`\r\n   * @param fields - The fields to keep while filtering\r\n   */\n  ;\n  /** Returns the registry for the form */\n\n\n  _proto.getRegistry = function getRegistry() {\n    var _this$props$templates;\n\n    var _this$props4 = this.props,\n        customTranslateString = _this$props4.translateString,\n        _this$props4$uiSchema = _this$props4.uiSchema,\n        uiSchema = _this$props4$uiSchema === void 0 ? {} : _this$props4$uiSchema;\n    var schemaUtils = this.state.schemaUtils;\n\n    var _getDefaultRegistry = getDefaultRegistry(),\n        fields = _getDefaultRegistry.fields,\n        templates = _getDefaultRegistry.templates,\n        widgets = _getDefaultRegistry.widgets,\n        formContext = _getDefaultRegistry.formContext,\n        translateString = _getDefaultRegistry.translateString;\n\n    return {\n      fields: _extends({}, fields, this.props.fields),\n      templates: _extends({}, templates, this.props.templates, {\n        ButtonTemplates: _extends({}, templates.ButtonTemplates, (_this$props$templates = this.props.templates) === null || _this$props$templates === void 0 ? void 0 : _this$props$templates.ButtonTemplates)\n      }),\n      widgets: _extends({}, widgets, this.props.widgets),\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils: schemaUtils,\n      translateString: customTranslateString || translateString,\n      globalUiOptions: uiSchema[UI_GLOBAL_OPTIONS_KEY]\n    };\n  }\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  ;\n\n  _proto.submit = function submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(new CustomEvent('submit', {\n        cancelable: true\n      }));\n      this.formElement.current.requestSubmit();\n    }\n  }\n  /** Attempts to focus on the field associated with the `error`. Uses the `property` field to compute path of the error\r\n   * field, then, using the `idPrefix` and `idSeparator` converts that path into an id. Then the input element with that\r\n   * id is attempted to be found using the `formElement` ref. If it is located, then it is focused.\r\n   *\r\n   * @param error - The error on which to focus\r\n   */\n  ;\n\n  _proto.focusOnError = function focusOnError(error) {\n    var _this$props5 = this.props,\n        _this$props5$idPrefix = _this$props5.idPrefix,\n        idPrefix = _this$props5$idPrefix === void 0 ? 'root' : _this$props5$idPrefix,\n        _this$props5$idSepara = _this$props5.idSeparator,\n        idSeparator = _this$props5$idSepara === void 0 ? '_' : _this$props5$idSepara;\n    var property = error.property;\n\n    var path = _toPath(property);\n\n    if (path[0] === '') {\n      // Most of the time the `.foo` property results in the first element being empty, so replace it with the idPrefix\n      path[0] = idPrefix;\n    } else {\n      // Otherwise insert the idPrefix into the first location using unshift\n      path.unshift(idPrefix);\n    }\n\n    var elementId = path.join(idSeparator);\n    var field = this.formElement.current.elements[elementId];\n\n    if (!field) {\n      // if not an exact match, try finding an input starting with the element id (like radio buttons or checkboxes)\n      field = this.formElement.current.querySelector(\"input[id^=\" + elementId);\n    }\n\n    if (field) {\n      field.focus();\n    }\n  }\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\r\n   * same way as would happen on form submission.\r\n   *\r\n   * @returns - True if the form is valid, false otherwise.\r\n   */\n  ;\n\n  _proto.validateForm = function validateForm() {\n    var _this$props6 = this.props,\n        extraErrors = _this$props6.extraErrors,\n        focusOnFirstError = _this$props6.focusOnFirstError,\n        onError = _this$props6.onError;\n    var formData = this.state.formData;\n    var schemaUtils = this.state.schemaUtils;\n    var schemaValidation = this.validate(formData);\n    var errors = schemaValidation.errors;\n    var errorSchema = schemaValidation.errorSchema;\n    var schemaValidationErrors = errors;\n    var schemaValidationErrorSchema = errorSchema;\n\n    if (errors.length > 0) {\n      if (extraErrors) {\n        var merged = schemaUtils.mergeValidationData(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n\n      if (focusOnFirstError) {\n        this.focusOnError(schemaValidation.errors[0]);\n      }\n\n      this.setState({\n        errors: errors,\n        errorSchema: errorSchema,\n        schemaValidationErrors: schemaValidationErrors,\n        schemaValidationErrorSchema: schemaValidationErrorSchema\n      }, function () {\n        if (onError) {\n          onError(errors);\n        } else {\n          console.error('Form validation failed', errors);\n        }\n      });\n      return false;\n    }\n\n    return true;\n  }\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\r\n   * needed along with the submit button or any children of the form.\r\n   */\n  ;\n\n  _proto.render = function render() {\n    var _this$props7 = this.props,\n        children = _this$props7.children,\n        id = _this$props7.id,\n        idPrefix = _this$props7.idPrefix,\n        idSeparator = _this$props7.idSeparator,\n        _this$props7$classNam = _this$props7.className,\n        className = _this$props7$classNam === void 0 ? '' : _this$props7$classNam,\n        tagName = _this$props7.tagName,\n        name = _this$props7.name,\n        method = _this$props7.method,\n        target = _this$props7.target,\n        action = _this$props7.action,\n        autoComplete = _this$props7.autoComplete,\n        enctype = _this$props7.enctype,\n        acceptcharset = _this$props7.acceptcharset,\n        _this$props7$noHtml5V = _this$props7.noHtml5Validate,\n        noHtml5Validate = _this$props7$noHtml5V === void 0 ? false : _this$props7$noHtml5V,\n        _this$props7$disabled = _this$props7.disabled,\n        disabled = _this$props7$disabled === void 0 ? false : _this$props7$disabled,\n        _this$props7$readonly = _this$props7.readonly,\n        readonly = _this$props7$readonly === void 0 ? false : _this$props7$readonly,\n        formContext = _this$props7.formContext,\n        _this$props7$showErro = _this$props7.showErrorList,\n        showErrorList = _this$props7$showErro === void 0 ? 'top' : _this$props7$showErro,\n        _internalFormWrapper = _this$props7._internalFormWrapper;\n    var _this$state4 = this.state,\n        schema = _this$state4.schema,\n        uiSchema = _this$state4.uiSchema,\n        formData = _this$state4.formData,\n        errorSchema = _this$state4.errorSchema,\n        idSchema = _this$state4.idSchema;\n    var registry = this.getRegistry();\n    var _SchemaField = registry.fields.SchemaField;\n    var SubmitButton = registry.templates.ButtonTemplates.SubmitButton; // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n\n    var as = _internalFormWrapper ? tagName : undefined;\n    var FormTag = _internalFormWrapper || tagName || 'form';\n    return jsxs(FormTag, {\n      className: className ? className : 'rjsf',\n      id: id,\n      name: name,\n      method: method,\n      target: target,\n      action: action,\n      autoComplete: autoComplete,\n      encType: enctype,\n      acceptCharset: acceptcharset,\n      noValidate: noHtml5Validate,\n      onSubmit: this.onSubmit,\n      as: as,\n      ref: this.formElement,\n      children: [showErrorList === 'top' && this.renderErrors(registry), jsx(_SchemaField, {\n        name: '',\n        schema: schema,\n        uiSchema: uiSchema,\n        errorSchema: errorSchema,\n        idSchema: idSchema,\n        idPrefix: idPrefix,\n        idSeparator: idSeparator,\n        formContext: formContext,\n        formData: formData,\n        onChange: this.onChange,\n        onBlur: this.onBlur,\n        onFocus: this.onFocus,\n        registry: registry,\n        disabled: disabled,\n        readonly: readonly\n      }), children ? children : jsx(SubmitButton, {\n        uiSchema: uiSchema,\n        registry: registry\n      }), showErrorList === 'bottom' && this.renderErrors(registry)]\n    });\n  };\n\n  return Form;\n}(Component);\n\nvar _excluded = [\"fields\", \"widgets\", \"templates\"];\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\n\nfunction withTheme(themeProps) {\n  return /*#__PURE__*/forwardRef(function (_ref, ref) {\n    var _themeProps$templates, _templates;\n\n    var fields = _ref.fields,\n        widgets = _ref.widgets,\n        templates = _ref.templates,\n        directProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    fields = _extends({}, themeProps === null || themeProps === void 0 ? void 0 : themeProps.fields, fields);\n    widgets = _extends({}, themeProps === null || themeProps === void 0 ? void 0 : themeProps.widgets, widgets);\n    templates = _extends({}, themeProps === null || themeProps === void 0 ? void 0 : themeProps.templates, templates, {\n      ButtonTemplates: _extends({}, themeProps === null || themeProps === void 0 ? void 0 : (_themeProps$templates = themeProps.templates) === null || _themeProps$templates === void 0 ? void 0 : _themeProps$templates.ButtonTemplates, (_templates = templates) === null || _templates === void 0 ? void 0 : _templates.ButtonTemplates)\n    });\n    return jsx(Form, _extends({}, themeProps, directProps, {\n      fields: fields,\n      widgets: widgets,\n      templates: templates,\n      ref: ref\n    }));\n  });\n}\n\nexport { Form as default, getDefaultRegistry, withTheme };","map":{"version":3,"sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/fields/index.ts","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/ButtonTemplates/index.ts","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/templates/index.ts","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/TimeWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/components/widgets/index.ts","../src/getDefaultRegistry.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","_inheritsLoose","Component","props","_this","state","updatedKeyedFormData","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","newKeyedFormData","length","previousKeyedFormDatum","index","schema","registry","translateString","get","ITEMS_KEY","TranslatableString","ArrayItemTitle","isItemRequired","itemSchema","type","includes","canAddItem","formItems","uiSchema","addable","getUiOptions","globalUiOptions","maxItems","undefined","_getNewFormDataRow","schemaUtils","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","_handleAddClick","event","preventDefault","onChange","newKeyedFormDataRow","splice","push","setState","onAddClick","onAddIndexClick","onCopyIndexClick","cloneDeep","onDropIndexClick","errorSchema","newErrorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","reOrderArray","_newKeyedFormData","slice","onChangeForIndex","value","id","arrayData","newFormData","jsonValue","onSelectChange","idSchema","$id","render","uiOptions","UnsupportedFieldTemplate","getTemplate","_jsx","reason","MissingItems","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","_this$props8$uiSchema","name","_this$props8$disabled","disabled","_this$props8$readonly","readonly","_this$props8$autofocu","autofocus","_this$props8$required","required","onBlur","onFocus","idPrefix","_this$props8$idSepara","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","canAdd","arrayProps","itemCast","itemErrorSchema","itemIdPrefix","itemIdSchema","toIdSchema","_this2","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","totalItems","className","Template","_this$props9$disabled","_this$props9$readonly","_this$props9$autofocu","_this$props9$required","hideError","placeholder","_this$props9$formData","widgets","widget","options","Widget","getWidget","multiple","label","_this$props10$formDat","_this$props10$disable","_this$props10$readonl","_this$props10$autofoc","_this$props10$require","enumOptions","optionsList","_getUiOptions3$widget","_this$props11$disable","_this$props11$readonl","_this$props11$autofoc","_this$props11$require","_this$props11$formDat","_getUiOptions4$widget","_this$props12$uiSchem","_this$props12$formDat","_this$props12$idSepar","_this$props12$disable","_this$props12$readonl","_this$props12$autofoc","_this$props12$require","itemSchemas","additionalSchema","concat","additional","_this3","canRemove","_props$canRemove","fields","ArraySchemaField","SchemaField","ItemSchemaField","orderable","_getUiOptions5$remova","removable","_getUiOptions5$copyab","copyable","_getUiOptions5$ordera","has","moveUp","moveDown","copy","remove","toolbar","Object","keys","some","children","hasCopy","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","_createClass","BooleanField","_getUiOptions$widget","yes","YesLabel","no","NoLabel","oneOf","option","o","schemaWithEnumNames","enums","enumNames","every","v","AnyOfField","retrievedOptions","opt","selectedOption","getMatchingOption","componentDidUpdate","prevProps","newState","deepEquals","matchingOption","getClosestMatchingOption","onOptionChange","intOption","newOption","oldOption","sanitizeDataForNewSchema","getFieldId","baseType","_this$props5$disabled","_this$props5$errorSch","_SchemaField","autocomplete","_getUiOptions$title","ERRORS_KEY","fieldErrorSchema","omit","optionSchema","assign","translateEnum","TitleOptionPrefix","OptionPrefix","translateParams","String","_jsxs","isEmpty","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","initialValue","lastValue","setLastValue","useState","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","wasPropertyKeyModified","additionalProperties","isRequired","indexOf","onPropertyChange","addedByAdditionalProperties","onDropPropertyClick","copiedFormData","unset","getAvailableKey","preferredKey","duplicateKeySuffixSeparator","_getUiOptions$duplica","newKey","onKeyChange","oldValue","newKeys","keyValues","renamedObj","getDefaultValue","NewStringDefault","handleAddClick","apSchema","REF_KEY","$ref","ANY_OF_KEY","ONE_OF_KEY","_this$props6$uiSchema","rawSchema","_this$props6$required","_this$props6$disabled","_this$props6$readonly","properties","schemaProperties","description","orderedProperties","orderProperties","order","err","style","color","Markdown","InvalidObjectField","message","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","integer","number","object","string","getFieldComponent","field","schemaType","getSchemaType","componentName","anyOf","UnknownFieldType","SchemaFieldRender","_schema","_idSchema","_props$wasPropertyKey","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","theId","FieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","UI_OPTIONS_KEY","help","classNames","process","env","NODE_ENV","console","warn","helpComponent","hasErrors","errorsComponent","errors","fieldProps","descriptionId","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","isReplacingAnyOrOneOf","isSelect","shouldComponentUpdate","_proto","_props$disabled","_props$readonly","_props$autofocus","format","defaultWidget","hasWidget","_getUiOptions$placeho","NullField","useEffect","MultiSchemaField","CopyButton","MoveDownButton","MoveUpButton","RemoveButton","templates","ButtonTemplates","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldDescriptionTemplate","ArrayFieldItemTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","titleId","onChangeOverride","rest","log","Error","JSON","inputProps","getInputProps","inputValue","_onChange","target","emptyValue","_onBlur","_onFocus","autoFocus","list","examples","examplesId","ariaDescribedByIds","example","SubmitButton","submitText","norender","_getSubmitButtonOptio2","submitButtonProps","getSubmitButtonOptions","iconType","icon","otherProps","IconButton","buttonTemplates","ErrorList","ErrorsLabel","error","stack","REQUIRED_FIELD_SYMBOL","htmlFor","WrapIfAdditionalTemplate","Label","errorId","elem","helpId","prop","canExpand","UnsupportedField","UnsupportedFieldWithId","UnsupportedFieldWithReason","UnsupportedFieldWithIdAndReason","keyLabel","KeyLabel","defaultValue","border","ArrayFieldTemplate","BaseInputTemplate","DescriptionField","ErrorListTemplate","ObjectFieldTemplate","TitleField","rangeOptions","start","stop","pad","readyForChange","values","dateElementProps","time","yearsRange","Date","getFullYear","year","month","day","hour","minute","second","data","range","DateElement","select","rootId","SelectWidget","AltDateWidget","_ref2$disabled","_ref2$readonly","_ref2$autofocus","useReducer","action","parseDateString","stateValue","toDateString","property","handleSetNow","nextState","toJSON","handleClear","elemProps","hideNowButton","href","NowLabel","hideClearButton","ClearLabel","AltDateTimeWidget","CheckboxWidget","_ref$autofocus","schemaRequiresTrueValue","checked","handleBlur","handleFocus","CheckboxesWidget","_ref$options","_ref$options$inline","inline","enumDisabled","checkboxesValues","enumOptionsValueForIndex","enumOptionsIsSelected","itemDisabled","disabledCls","enumOptionsSelectValue","enumOptionsDeselectValue","checkbox","optionId","utcToLocal","localToUTC","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","result","readAsDataURL","processFiles","files","all","from","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","blob","dataURItoBlob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","then","filesInfoEvent","newValue","accept","HiddenWidget","RadioWidget","Math","random","toString","radio","getValue","selected","_ref$multiple","optEmptyVal","selectedIndexes","enumOptionsIndexForValue","TextareaWidget","rows","defaultProps","ColorWidget","DateWidget","DateTimeWidget","EmailWidget","PasswordWidget","RangeWidget","TextWidget","TimeWidget","UpDownWidget","URLWidget","getDefaultRegistry","rootSchema","englishStringTranslator","Form","formElement","validator","getStateFromProps","createRef","UNSAFE_componentWillReceiveProps","inputFormData","edit","liveValidate","mustValidate","noValidate","doesSchemaUtilsDiffer","createSchemaUtils","retrievedSchema","getCurrentErrors","schemaValidationErrors","schemaValidationErrorSchema","schemaValidation","validate","currentErrors","extraErrors","merged","mergeValidationData","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","getValidator","validateFormData","renderErrors","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","omitExtraData","liveOmit","toPathSchema","fieldNames","toErrorList","reset","onSubmit","persist","validateForm","status","getRegistry","_this$props4$uiSchema","customTranslateString","UI_GLOBAL_OPTIONS_KEY","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","focusOnError","_this$props5$idSepara","_this$props5$idPrefix","_toPath","unshift","elementId","elements","querySelector","focus","focusOnFirstError","onError","_this$props7$classNam","tagName","method","autoComplete","enctype","acceptcharset","_this$props7$noHtml5V","noHtml5Validate","_this$props7$disabled","_this$props7$readonly","_this$props7$showErro","showErrorList","_internalFormWrapper","as","FormTag","encType","acceptCharset","ref","themeProps","forwardRef","directProps"],"mappings":"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","sourcesContent":["import { Component, MouseEvent } from 'react';\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UiSchema,\n  ITEMS_KEY,\n} from '@rjsf/utils';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport { nanoid } from 'nanoid';\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T[], S, F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], S, F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n    nextProps: Readonly<FieldProps<T[], S, F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData) ? nextProps.formData : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema, registry } = this.props;\n    const { translateString } = registry;\n    return get(\n      schema,\n      [ITEMS_KEY, 'title'],\n      get(schema, [ITEMS_KEY, 'description'], translateString(TranslatableString.ArrayItemTitle))\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: S) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes('null');\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== 'null';\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema, registry } = this.props;\n    let { addable } = getUiOptions<T[], S, F>(uiSchema, registry.globalUiOptions);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as S;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as S;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add or add at index buttons. Creates a new row of keyed form data\n   * either at the end of the list (when index is not specified) or inserted at the `index` when it is, adding it into\n   * the state, and then returning `onChange()` with the plain form data converted from the keyed data\n   *\n   * @param event - The event for the click\n   * @param [index] - The optional index at which to add the new data\n   */\n  _handleAddClick(event: MouseEvent, index?: number) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData];\n    if (index !== undefined) {\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n    } else {\n      newKeyedFormData.push(newKeyedFormDataRow);\n    }\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  }\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    this._handleAddClick(event);\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      this._handleAddClick(event, index);\n    };\n  };\n\n  /** Callback handler for when the user clicks on the copy button on an existing array element. Clones the row of\n   * keyed form data at the `index` into the next position in the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the copy button is clicked\n   */\n  onCopyIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: cloneDeep(keyedFormData[index].item),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      if (index !== undefined) {\n        newKeyedFormData.splice(index + 1, 0, newKeyedFormDataRow);\n      } else {\n        newKeyedFormData.push(newKeyedFormDataRow);\n      }\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === 'undefined' ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils, translateString } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T[], S, F>(\n        'UnsupportedFieldTemplate',\n        registry,\n        uiOptions\n      );\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason={translateString(TranslatableString.MissingItems)}\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], S, F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = '_',\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const _schemaItems: S = isObject(schema.items) ? (schema.items as S) : ({} as S);\n    const itemsSchema: S = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const canAdd = this.canAddItem(formData);\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(schema.items as S, items);\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = 'select', ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = 'files', ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=''\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = '_',\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems: S[] = isObject(schema.items) ? (schema.items as S[]) : ([] as S[]);\n    const itemSchemas = _schemaItems.map((item: S, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems as S, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const canAdd = this.canAddItem(items) && !!additionalSchema;\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      className: 'field field-array field-array-fixed-items',\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems as S, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canAdd: boolean;\n    canRemove?: boolean;\n    canMoveUp: boolean;\n    canMoveDown: boolean;\n    itemSchema: S;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], S, F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], S, F>['onBlur'];\n    onFocus: FieldProps<T[], S, F>['onFocus'];\n    rawErrors?: string[];\n    totalItems: number;\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canAdd,\n      canRemove = true,\n      canMoveUp,\n      canMoveDown,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n      totalItems,\n    } = props;\n    const { disabled, hideError, idPrefix, idSeparator, readonly, uiSchema, registry, formContext } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n      globalUiOptions,\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true, copyable = false } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      copy: copyable && canAdd,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: 'array-item',\n      disabled,\n      canAdd,\n      hasCopy: has.copy,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      totalItems,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onCopyIndexClick: this.onCopyIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      schema: itemSchema,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n","import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  FormContextType,\n  EnumOptionsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext, translateString } = registry;\n  const { widget = 'checkbox', ...options } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n  const yes = translateString(TranslatableString.YesLabel);\n  const no = translateString(TranslatableString.NoLabel);\n\n  let enumOptions: EnumOptionsType<S>[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList<S>({\n      oneOf: schema.oneOf\n        .map((option) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? yes : no),\n            };\n          }\n          return undefined;\n        })\n        .filter((o: any) => o) as S[], // cast away the error that typescript can't grok is fixed\n    } as unknown as S);\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (!schemaWithEnumNames.enumNames && enums.length === 2 && enums.every((v: any) => typeof v === 'boolean')) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? yes : no,\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? yes : no,\n        },\n      ];\n    } else {\n      enumOptions = optionsList<S>({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as unknown as S);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import { Component } from 'react';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport {\n  deepEquals,\n  ERRORS_KEY,\n  FieldProps,\n  FormContextType,\n  getUiOptions,\n  getWidget,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState<S extends StrictRJSFSchema = RJSFSchema> = {\n  /** The currently selected option */\n  selectedOption: number;\n  /* The option schemas after retrieving all $refs */\n  retrievedOptions: S[];\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  AnyOfFieldState<S>\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, S, F>) {\n    super(props);\n\n    const {\n      formData,\n      options,\n      registry: { schemaUtils },\n    } = this.props;\n    // cache the retrieved options in state in case they have $refs to save doing it later\n    const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n\n    this.state = {\n      retrievedOptions,\n      selectedOption: this.getMatchingOption(0, formData, retrievedOptions),\n    };\n  }\n\n  /** React lifecycle method that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(prevProps: Readonly<FieldProps<T, S, F>>, prevState: Readonly<AnyOfFieldState>) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    let newState = this.state;\n    if (!deepEquals(prevProps.options, options)) {\n      const {\n        registry: { schemaUtils },\n      } = this.props;\n      // re-cache the retrieved options in state in case they have $refs to save doing it later\n      const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n      newState = { selectedOption, retrievedOptions };\n    }\n    if (!deepEquals(formData, prevProps.formData) && idSchema.$id === prevProps.idSchema.$id) {\n      const { retrievedOptions } = newState;\n      const matchingOption = this.getMatchingOption(selectedOption, formData, retrievedOptions);\n\n      if (prevState && matchingOption !== selectedOption) {\n        newState = { selectedOption: matchingOption, retrievedOptions };\n      }\n    }\n    if (newState !== this.state) {\n      this.setState(newState);\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(selectedOption: number, formData: T | undefined, options: S[]) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getClosestMatchingOption(formData, options, selectedOption);\n    if (option > 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option - The new option value being selected\n   */\n  onOptionChange = (option?: string) => {\n    const { selectedOption, retrievedOptions } = this.state;\n    const { formData, onChange, registry } = this.props;\n    const { schemaUtils } = registry;\n    const intOption = option !== undefined ? parseInt(option, 10) : -1;\n    if (intOption === selectedOption) {\n      return;\n    }\n    const newOption = intOption >= 0 ? retrievedOptions[intOption] : undefined;\n    const oldOption = selectedOption >= 0 ? retrievedOptions[selectedOption] : undefined;\n\n    let newFormData = schemaUtils.sanitizeDataForNewSchema(newOption, oldOption, formData);\n    if (newFormData && newOption) {\n      // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n      // so that only the root objects themselves are created without adding undefined children properties\n      newFormData = schemaUtils.getDefaultFormState(newOption, newFormData, 'excludeObjectChildren') as T;\n    }\n    onChange(newFormData, undefined, this.getFieldId());\n\n    this.setState({ selectedOption: intOption });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      errorSchema = {},\n      formContext,\n      onBlur,\n      onFocus,\n      registry,\n      schema,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields, translateString } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption, retrievedOptions } = this.state;\n    const {\n      widget = 'select',\n      placeholder,\n      autofocus,\n      autocomplete,\n      title = schema.title,\n      ...uiOptions\n    } = getUiOptions<T, S, F>(uiSchema);\n    const Widget = getWidget<T, S, F>({ type: 'number' }, widget, widgets);\n    const rawErrors = get(errorSchema, ERRORS_KEY, []);\n    const fieldErrorSchema = omit(errorSchema, [ERRORS_KEY]);\n\n    const option = selectedOption >= 0 ? retrievedOptions[selectedOption] || null : null;\n    let optionSchema: S;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type ? option : Object.assign({}, option, { type: baseType });\n    }\n\n    const translateEnum: TranslatableString = title\n      ? TranslatableString.TitleOptionPrefix\n      : TranslatableString.OptionPrefix;\n    const translateParams = title ? [title] : [];\n    const enumOptions = retrievedOptions.map((opt: { title?: string }, index: number) => ({\n      label: opt.title || translateString(translateEnum, translateParams.concat(String(index + 1))),\n      value: index,\n    }));\n\n    return (\n      <div className='panel panel-default panel-body'>\n        <div className='form-group'>\n          <Widget\n            id={this.getFieldId()}\n            name={`${name}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`}\n            schema={{ type: 'number', default: 0 } as S}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            disabled={disabled || isEmpty(enumOptions)}\n            multiple={false}\n            rawErrors={rawErrors}\n            errorSchema={fieldErrorSchema}\n            value={selectedOption >= 0 ? selectedOption : undefined}\n            options={{ enumOptions, ...uiOptions }}\n            registry={registry}\n            formContext={formContext}\n            placeholder={placeholder}\n            autocomplete={autocomplete}\n            autofocus={autofocus}\n            label=''\n          />\n        </div>\n        {option !== null && <_SchemaField {...this.props} schema={optionSchema!} />}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import { useState, useCallback } from 'react';\nimport { asNumber, FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, S, F>['value']) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === '.') {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === 'string' && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, ''))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === 'string' && typeof value === 'number') {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace('.', '\\\\.') + '\\\\.?0*$');\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import { Component } from 'react';\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n  ANY_OF_KEY,\n  ONE_OF_KEY,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport unset from 'lodash/unset';\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = '' as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value } as unknown as T;\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData } as T;\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param [formData] - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData?: T) => {\n    const { uiSchema, registry } = this.props;\n    const { duplicateKeySuffixSeparator = '-' } = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (has(formData, newKey)) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema['type']) {\n    const {\n      registry: { translateString },\n    } = this.props;\n    switch (type) {\n      case 'array':\n        return [];\n      case 'boolean':\n        return false;\n      case 'null':\n        return null;\n      case 'number':\n        return 0;\n      case 'object':\n        return {};\n      case 'string':\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return translateString(TranslatableString.NewStringDefault);\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: S) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData } as T;\n\n    let type: RJSFSchema['type'] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      let apSchema = schema.additionalProperties;\n      if (REF_KEY in apSchema) {\n        const { schemaUtils } = registry;\n        apSchema = schemaUtils.retrieveSchema({ $ref: apSchema[REF_KEY] } as S, formData);\n        type = apSchema.type;\n      }\n      if (!type && (ANY_OF_KEY in apSchema || ONE_OF_KEY in apSchema)) {\n        type = 'object';\n      }\n    }\n\n    const newKey = this.getAvailableKey('newKey', newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils, translateString } = registry;\n    const { SchemaField } = fields;\n    const schema: S = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, S, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = uiOptions.title || (schema.title === undefined ? name : schema.title);\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className='config-error' style={{ color: 'red' }}>\n            <Markdown>\n              {translateString(TranslatableString.InvalidObjectField, [name || 'root', (err as Error).message])}\n            </Markdown>\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<'ObjectFieldTemplate', T, S, F>('ObjectFieldTemplate', registry, uiOptions);\n\n    const templateProps = {\n      title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [PROPERTIES_KEY, name, ADDITIONAL_PROPERTY_FLAG]);\n        const fieldUiSchema = addedByAdditionalProperties ? uiSchema.additionalProperties : uiSchema[name];\n        const hidden = getUiOptions<T, S, F>(fieldUiSchema).widget === 'hidden';\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(name, addedByAdditionalProperties)}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import { useCallback, Component } from 'react';\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  deepEquals,\n  descriptionId,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  FormContextType,\n  getSchemaType,\n  getTemplate,\n  getUiOptions,\n  ID_KEY,\n  IdSchema,\n  mergeObjects,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UI_OPTIONS_KEY,\n  UIOptionsType,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\nimport omit from 'lodash/omit';\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: 'ArrayField',\n  boolean: 'BooleanField',\n  integer: 'NumberField',\n  number: 'NumberField',\n  object: 'ObjectField',\n  string: 'StringField',\n  null: 'NullField',\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: S,\n  uiOptions: UIOptionsType<T, S, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, S, F>\n) {\n  const field = uiOptions.field;\n  const { fields, translateString } = registry;\n  if (typeof field === 'function') {\n    return field;\n  }\n  if (typeof field === 'string' && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType) ? schemaType[0] : schemaType || '';\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T, S, F>(\n          'UnsupportedFieldTemplate',\n          registry,\n          uiOptions\n        );\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={translateString(TranslatableString.UnknownFieldType, [String(schema.type)])}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils, globalUiOptions } = registry;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n  const FieldTemplate = getTemplate<'FieldTemplate', T, S, F>('FieldTemplate', registry, uiOptions);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    uiOptions\n  );\n  const FieldHelpTemplate = getTemplate<'FieldHelpTemplate', T, S, F>('FieldHelpTemplate', registry, uiOptions);\n  const FieldErrorTemplate = getTemplate<'FieldErrorTemplate', T, S, F>('FieldErrorTemplate', registry, uiOptions);\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = useCallback(\n    (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent<T, S, F>(schema, uiOptions, idSchema, registry);\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(props.readonly || uiOptions.readonly || props.schema.readOnly || schema.readOnly);\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError = uiSchemaHideError === undefined ? props.hideError : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names or style to child components\n  const fieldUiSchema = omit(uiSchema, ['ui:classNames', 'classNames', 'ui:style']);\n  if (UI_OPTIONS_KEY in fieldUiSchema) {\n    fieldUiSchema[UI_OPTIONS_KEY] = omit(fieldUiSchema[UI_OPTIONS_KEY], ['classNames', 'style']);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label = ADDITIONAL_PROPERTY_FLAG in schema ? name : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description = uiOptions.description || props.schema.description || schema.description || '';\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === 'hidden';\n\n  const classNames = ['form-group', 'field', `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push('field-error has-error has-danger');\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, S, F>, 'children'> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={descriptionId<T>(id)}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === 'string' ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(' ').trim(),\n    style: uiOptions.style,\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n  const isReplacingAnyOrOneOf = uiSchema?.['ui:field'] && uiSchema?.['ui:fieldReplacesAnyOrOneOf'] === true;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_AnyOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.anyOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            baseType={schema.type}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n        {schema.oneOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_OneOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.oneOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            baseType={schema.type}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>\n> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, S, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, S, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema) : undefined;\n  let defaultWidget = enumOptions ? 'select' : 'text';\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const { widget = defaultWidget, placeholder = '', ...options } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from 'react';\nimport { FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import { Field, FormContextType, RegistryFieldsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport ArrayField from './ArrayField';\nimport BooleanField from './BooleanField';\nimport MultiSchemaField from './MultiSchemaField';\nimport NumberField from './NumberField';\nimport ObjectField from './ObjectField';\nimport SchemaField from './SchemaField';\nimport StringField from './StringField';\nimport NullField from './NullField';\n\nfunction fields<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryFieldsType<T, S, F> {\n  return {\n    AnyOfField: MultiSchemaField,\n    ArrayField: ArrayField as unknown as Field<T, S, F>,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField,\n    NumberField,\n    ObjectField,\n    OneOfField: MultiSchemaField,\n    SchemaField,\n    StringField,\n    NullField,\n  };\n}\n\nexport default fields;\n","import {\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <DescriptionFieldTemplate\n      id={descriptionId<T>(idSchema)}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { CSSProperties } from 'react';\nimport { ArrayFieldTemplateItemType, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    hasCopy,\n    index,\n    onCopyIndexClick,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } = registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: 'bold',\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? 'col-xs-9' : 'col-xs-12'}>{children}</div>\n      {hasToolbar && (\n        <div className='col-xs-3 array-item-toolbox'>\n          <div\n            className='btn-group'\n            style={{\n              display: 'flex',\n              justifyContent: 'space-around',\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasCopy && (\n              <CopyButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onCopyIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<'ArrayFieldDescriptionTemplate', T, S, F>(\n    'ArrayFieldDescriptionTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldItemTemplate = getTemplate<'ArrayFieldItemTemplate', T, S, F>(\n    'ArrayFieldItemTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<'ArrayFieldTitleTemplate', T, S, F>(\n    'ArrayFieldTitleTemplate',\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className='row array-item-list'>\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className='array-item-add'\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import {\n  getTemplate,\n  getUiOptions,\n  titleId,\n  ArrayFieldTitleProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTitleProps<T, S, F>) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, S, F>['TitleFieldTemplate'] = getTemplate<'TitleFieldTemplate', T, S, F>(\n    'TitleFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <TitleFieldTemplate\n      id={titleId<T>(idSchema)}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  BaseInputTemplateProps,\n  examplesId,\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: BaseInputTemplateProps<T, S, F>) {\n  const {\n    id,\n    name, // remove this from ...rest\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    onChangeOverride,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log('No id for', props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === 'number' || inputProps.type === 'integer') {\n    inputValue = value || value === 0 ? value : '';\n  } else {\n    inputValue = value == null ? '' : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLInputElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(({ target: { value } }: FocusEvent<HTMLInputElement>) => onBlur(id, value), [onBlur, id]);\n  const _onFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) => onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className='form-control'\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        onChange={onChangeOverride || _onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(schema.default && !schema.examples.includes(schema.default) ? ([schema.default] as string[]) : [])\n            .map((example: any) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import { getSubmitButtonOptions, FormContextType, RJSFSchema, StrictRJSFSchema, SubmitButtonProps } from '@rjsf/utils';\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const { submitText, norender, props: submitButtonProps = {} } = getSubmitButtonOptions<T, S, F>(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button type='submit' {...submitButtonProps} className={`btn btn-info ${submitButtonProps.className}`}>\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nexport default function IconButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const { iconType = 'default', icon, className, uiSchema, registry, ...otherProps } = props;\n  return (\n    <button type='button' className={`btn btn-${iconType} ${className}`} {...otherProps}>\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function CopyButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.CopyButton)}\n      className='array-item-copy'\n      {...props}\n      icon='copy'\n    />\n  );\n}\n\nexport function MoveDownButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveDownButton)}\n      className='array-item-move-down'\n      {...props}\n      icon='arrow-down'\n    />\n  );\n}\n\nexport function MoveUpButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveUpButton)}\n      className='array-item-move-up'\n      {...props}\n      icon='arrow-up'\n    />\n  );\n}\n\nexport function RemoveButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.RemoveButton)}\n      className='array-item-remove'\n      {...props}\n      iconType='danger'\n      icon='remove'\n    />\n  );\n}\n","import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nimport IconButton from './IconButton';\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  className,\n  onClick,\n  disabled,\n  registry,\n}: IconButtonProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='row'>\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType='info'\n          icon='plus'\n          className='btn-add col-xs-12'\n          title={translateString(TranslatableString.AddButton)}\n          onClick={onClick}\n          disabled={disabled}\n          registry={registry}\n        />\n      </p>\n    </div>\n  );\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport SubmitButton from './SubmitButton';\nimport AddButton from './AddButton';\nimport { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } from './IconButton';\n\nfunction buttonTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F>['ButtonTemplates'] {\n  return {\n    SubmitButton,\n    AddButton,\n    CopyButton,\n    MoveDownButton,\n    MoveUpButton,\n    RemoveButton,\n  };\n}\n\nexport default buttonTemplates;\n","import { DescriptionFieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === 'string') {\n    return (\n      <p id={id} className='field-description'>\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className='field-description'>\n        {description}\n      </div>\n    );\n  }\n}\n","import {\n  ErrorListProps,\n  FormContextType,\n  RJSFValidationError,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  errors,\n  registry,\n}: ErrorListProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='panel panel-danger errors'>\n      <div className='panel-heading'>\n        <h3 className='panel-title'>{translateString(TranslatableString.ErrorsLabel)}</h3>\n      </div>\n      <ul className='list-group'>\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className='list-group-item text-danger'>\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","const REQUIRED_FIELD_SYMBOL = '*';\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className='control-label' htmlFor={id}>\n      {label}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from '@rjsf/utils';\n\nimport Label from './Label';\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const { id, label, children, errors, help, description, hidden, required, displayLabel, registry, uiSchema } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<'WrapIfAdditionalTemplate', T, S, F>(\n    'WrapIfAdditionalTemplate',\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className='hidden'>{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import { errorId, FieldErrorProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = errorId<T>(idSchema);\n\n  return (\n    <div>\n      <ul id={id} className='error-detail bs-callout bs-callout-info'>\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className='text-danger' key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import { helpId, FieldHelpProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = helpId<T>(idSchema);\n  if (typeof help === 'string') {\n    return (\n      <p id={id} className='help-block'>\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className='help-block'>\n      {help}\n    </div>\n  );\n}\n","import {\n  FormContextType,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  titleId,\n} from '@rjsf/utils';\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<'TitleFieldTemplate', T, S, F>('TitleFieldTemplate', registry, options);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={titleId<T>(idSchema)}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(idSchema)}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand<T, S, F>(schema, uiSchema, formData) && (\n        <AddButton\n          className='object-property-expand'\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import { FormContextType, TitleFieldProps, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nconst REQUIRED_FIELD_SYMBOL = '*';\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: TitleFieldProps<T, S, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TranslatableString, UnsupportedFieldProps } from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: UnsupportedFieldProps<T, S, F>\n) {\n  const { schema, idSchema, reason, registry } = props;\n  const { translateString } = registry;\n  let translateEnum: TranslatableString = TranslatableString.UnsupportedField;\n  const translateParams: string[] = [];\n  if (idSchema && idSchema.$id) {\n    translateEnum = TranslatableString.UnsupportedFieldWithId;\n    translateParams.push(idSchema.$id);\n  }\n  if (reason) {\n    translateEnum =\n      translateEnum === TranslatableString.UnsupportedField\n        ? TranslatableString.UnsupportedFieldWithReason\n        : TranslatableString.UnsupportedFieldWithIdAndReason;\n    translateParams.push(reason);\n  }\n  return (\n    <div className='unsupported-field'>\n      <p>\n        <Markdown>{translateString(translateEnum, translateParams)}</Markdown>\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WrapIfAdditionalTemplateProps,\n} from '@rjsf/utils';\n\nimport Label from './FieldTemplate/Label';\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    style,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  const { templates, translateString } = registry;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = templates.ButtonTemplates;\n  const keyLabel = translateString(TranslatableString.KeyLabel, [label]);\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return (\n      <div className={classNames} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames} style={style}>\n      <div className='row'>\n        <div className='col-xs-5 form-additional'>\n          <div className='form-group'>\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className='form-control'\n              type='text'\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className='form-additional form-group col-xs-5'>{children}</div>\n        <div className='col-xs-2'>\n          <RemoveButton\n            className='array-item-remove btn-block'\n            style={{ border: '0' }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n            registry={registry}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport ArrayFieldDescriptionTemplate from './ArrayFieldDescriptionTemplate';\nimport ArrayFieldItemTemplate from './ArrayFieldItemTemplate';\nimport ArrayFieldTemplate from './ArrayFieldTemplate';\nimport ArrayFieldTitleTemplate from './ArrayFieldTitleTemplate';\nimport BaseInputTemplate from './BaseInputTemplate';\nimport ButtonTemplates from './ButtonTemplates';\nimport DescriptionField from './DescriptionField';\nimport ErrorList from './ErrorList';\nimport FieldTemplate from './FieldTemplate';\nimport FieldErrorTemplate from './FieldErrorTemplate';\nimport FieldHelpTemplate from './FieldHelpTemplate';\nimport ObjectFieldTemplate from './ObjectFieldTemplate';\nimport TitleField from './TitleField';\nimport UnsupportedField from './UnsupportedField';\nimport WrapIfAdditionalTemplate from './WrapIfAdditionalTemplate';\n\nfunction templates<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(): TemplatesType<\n  T,\n  S,\n  F\n> {\n  return {\n    ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    ArrayFieldTitleTemplate,\n    ButtonTemplates: ButtonTemplates<T, S, F>(),\n    BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default templates;\n","import { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react';\nimport {\n  ariaDescribedByIds,\n  parseDateString,\n  toDateString,\n  pad,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: 'year',\n      range: yearsRange,\n      value: year,\n    },\n    { type: 'month', range: [1, 12], value: month },\n    { type: 'day', range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: 'hour', range: [0, 23], value: hour },\n      { type: 'minute', range: [0, 59], value: minute },\n      { type: 'second', range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  WidgetProps<T, S, F>,\n  'value' | 'name' | 'disabled' | 'readonly' | 'autofocus' | 'registry' | 'onBlur' | 'onFocus'\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  name,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + '_' + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: 'integer' } as S}\n      id={id}\n      name={name}\n      className='form-control'\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=''\n      aria-describedby={ariaDescribedByIds<T>(rootId)}\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  name,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const { translateString } = registry;\n  const [lastValue, setLastValue] = useState(value);\n  const [state, setState] = useReducer((state: DateObject, action: Partial<DateObject>) => {\n    return { ...state, ...action };\n  }, parseDateString(value, time));\n\n  useEffect(() => {\n    const stateValue = toDateString(state, time);\n    if (readyForChange(state) && stateValue !== value) {\n      // The user changed the date to a new valid data via the comboboxes, so call onChange\n      onChange(stateValue);\n    } else if (lastValue !== value) {\n      // We got a new value in the props\n      setLastValue(value);\n      setState(parseDateString(value, time));\n    }\n  }, [time, value, onChange, state, lastValue]);\n\n  const handleChange = useCallback((property: keyof DateObject, value: string) => {\n    setState({ [property]: value });\n  }, []);\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nextState = parseDateString(new Date().toJSON(), time);\n      onChange(toDateString(nextState, time));\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      onChange(undefined);\n    },\n    [disabled, readonly, onChange]\n  );\n\n  return (\n    <ul className='list-inline'>\n      {dateElementProps(state, time, options.yearsRange as [number, number] | undefined).map((elemProps, i) => (\n        <li className='list-inline-item' key={i}>\n          <DateElement\n            rootId={id}\n            name={name}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== 'undefined' ? !options.hideNowButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-info btn-now' onClick={handleSetNow}>\n            {translateString(TranslatableString.NowLabel)}\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== 'undefined' ? !options.hideClearButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-warning btn-clear' onClick={handleClear}>\n            {translateString(TranslatableString.ClearLabel)}\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  descriptionId,\n  getTemplate,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue<S>(schema);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? 'disabled' : ''}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(id)}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type='checkbox'\n          id={id}\n          name={id}\n          checked={typeof value === 'undefined' ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n          aria-describedby={ariaDescribedByIds<T>(id)}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsDeselectValue,\n  enumOptionsIsSelected,\n  enumOptionsSelectValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled, emptyValue },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n  return (\n    <div className='checkboxes' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = enumOptionsIsSelected<S>(option.value, checkboxesValues);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checked) {\n              onChange(enumOptionsSelectValue<S>(index, checkboxesValues, enumOptions));\n            } else {\n              onChange(enumOptionsDeselectValue<S>(index, checkboxesValues, enumOptions));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type='checkbox'\n                id={optionId(id, index)}\n                name={id}\n                checked={checked}\n                value={String(index)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label key={index} className={`checkbox-inline ${disabledCls}`}>\n              {checkbox}\n            </label>\n          ) : (\n            <div key={index} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='color' {...props} disabled={disabled || readonly} />;\n}\n","import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value || undefined), [onChange]);\n\n  return <BaseInputTemplate type='date' {...props} onChange={handleChange} />;\n}\n","import {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return (\n    <BaseInputTemplate\n      type='datetime-local'\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='email' {...props} />;\n}\n","import { ChangeEvent, useCallback, useMemo, useState } from 'react';\nimport {\n  dataURItoBlob,\n  getTemplate,\n  FormContextType,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(';base64', `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === 'string') {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  filesInfo,\n  registry,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n  registry: Registry<T, S, F>;\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  const { translateString } = registry;\n  return (\n    <ul className='file-info'>\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <Markdown>{translateString(TranslatableString.FilesInfo, [name, type, String(size)])}</Markdown>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => dataURL)\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, multiple, onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const extractedFilesInfo = useMemo(\n    () => (Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value])),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] = useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <BaseInputTemplate\n        {...props}\n        disabled={disabled || readonly}\n        type='file'\n        onChangeOverride={handleChange}\n        value=''\n        accept={options.accept ? String(options.accept) : undefined}\n      />\n      <FilesInfo<T, S, F> filesInfo={filesInfo} registry={registry} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  value,\n}: WidgetProps<T, S, F>) {\n  return <input type='hidden' id={id} name={id} value={typeof value === 'undefined' ? '' : value} />;\n}\n\nexport default HiddenWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='password' {...props} />;\n}\n","import { FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIsSelected,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline, emptyValue } = options;\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n\n  return (\n    <div className='field-radio-group' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = enumOptionsIsSelected<S>(option.value, value);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type='radio'\n                id={optionId(id, i)}\n                checked={checked}\n                name={name}\n                required={required}\n                value={String(i)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={i} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={i} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className='field-range-wrapper'>\n      <BaseInputTemplate type='range' {...props} />\n      <span className='range-view'>{value}</span>\n    </div>\n  );\n}\n","import { ChangeEvent, FocusEvent, SyntheticEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction getValue(event: SyntheticEvent<HTMLSelectElement>, multiple: boolean) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n  const emptyValue = multiple ? [] : '';\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  const selectedIndexes = enumOptionsIndexForValue<S>(value, enumOptions, multiple);\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className='form-control'\n      value={typeof selectedIndexes === 'undefined' ? emptyValue : selectedIndexes}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {!multiple && schema.default === undefined && <option value=''>{placeholder}</option>}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) !== -1;\n          return (\n            <option key={i} value={String(i)} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport { ariaDescribedByIds, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className='form-control'\n      value={value ? value : ''}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate {...props} />;\n}\n","import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TimeWidget` component uses the `BaseInputTemplate` changing the type to `time` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value ? `${value}:00` : undefined), [onChange]);\n\n  return <BaseInputTemplate type='time' {...props} onChange={handleChange} />;\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='url' {...props} />;\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='number' {...props} />;\n}\n","import { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport AltDateWidget from './AltDateWidget';\nimport AltDateTimeWidget from './AltDateTimeWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport CheckboxesWidget from './CheckboxesWidget';\nimport ColorWidget from './ColorWidget';\nimport DateWidget from './DateWidget';\nimport DateTimeWidget from './DateTimeWidget';\nimport EmailWidget from './EmailWidget';\nimport FileWidget from './FileWidget';\nimport HiddenWidget from './HiddenWidget';\nimport PasswordWidget from './PasswordWidget';\nimport RadioWidget from './RadioWidget';\nimport RangeWidget from './RangeWidget';\nimport SelectWidget from './SelectWidget';\nimport TextareaWidget from './TextareaWidget';\nimport TextWidget from './TextWidget';\nimport TimeWidget from './TimeWidget';\nimport URLWidget from './URLWidget';\nimport UpDownWidget from './UpDownWidget';\n\nfunction widgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    AltDateWidget,\n    AltDateTimeWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n    ColorWidget,\n    DateWidget,\n    DateTimeWidget,\n    EmailWidget,\n    FileWidget,\n    HiddenWidget,\n    PasswordWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    TextWidget,\n    TextareaWidget,\n    TimeWidget,\n    UpDownWidget,\n    URLWidget,\n  };\n}\n\nexport default widgets;\n","import { englishStringTranslator, FormContextType, Registry, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport fields from './components/fields';\nimport templates from './components/templates';\nimport widgets from './components/widgets';\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, 'schemaUtils'> {\n  return {\n    fields: fields<T, S, F>(),\n    templates: templates<T, S, F>(),\n    widgets: widgets<T, S, F>(),\n    rootSchema: {} as S,\n    formContext: {} as F,\n    translateString: englishStringTranslator,\n  };\n}\n","import { Component, ElementType, FormEvent, ReactNode, Ref, RefObject, createRef } from 'react';\nimport {\n  createSchemaUtils,\n  CustomValidator,\n  deepEquals,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  GenericObjectType,\n  getTemplate,\n  getUiOptions,\n  IdSchema,\n  isObject,\n  mergeObjects,\n  NAME_KEY,\n  PathSchema,\n  StrictRJSFSchema,\n  Registry,\n  RegistryFieldsType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  RJSFValidationError,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n  SchemaUtilsType,\n  shouldRender,\n  TemplatesType,\n  UiSchema,\n  UI_GLOBAL_OPTIONS_KEY,\n  ValidationData,\n  ValidatorType,\n} from '@rjsf/utils';\nimport _get from 'lodash/get';\nimport _isEmpty from 'lodash/isEmpty';\nimport _pick from 'lodash/pick';\nimport _toPath from 'lodash/toPath';\n\nimport getDefaultRegistry from '../getDefaultRegistry';\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T, S, F>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, S, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, S, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, S, F>, 'ButtonTemplates'>> & {\n    ButtonTemplates?: Partial<TemplatesType<T, S, F>['ButtonTemplates']>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, S, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, S, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, S, F>, event: FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T, S, F>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `top` by default\n   */\n  showErrorList?: false | 'top' | 'bottom';\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer<T, S, F>;\n  /** If set to true, then the first field with an error will receive the focus when the form is submitted with errors\n   */\n  focusOnFirstError?: boolean;\n  /** Optional string translation function, if provided, allows users to change the translation of the RJSF internal\n   * strings. Some strings contain replaceable parameter values as indicated by `%1`, `%2`, etc. The number after the\n   * `%` indicates the order of the parameter. The ordering of parameters is important because some languages may choose\n   * to put the second parameter before the first in its translation.\n   */\n  translateString?: Registry['translateString'];\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: ElementType;\n  /** Support receiving a React ref to the Form\n   */\n  ref?: Ref<Form<T, S, F>>;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, S, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T, S, F>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData?: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  extends Omit<FormState<T, S, F>, 'schemaValidationErrors' | 'schemaValidationErrorSchema'> {\n  /** The status of the form when submitted */\n  status?: 'submitted';\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, S, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error('A validator is required for Form functionality to work');\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (this.props.onChange && !deepEquals(this.state.formData, this.props.formData)) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, S, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(props: FormProps<T, S, F>, inputFormData?: T): FormState<T, S, F> {\n    const state: FormState<T, S, F> = this.state || {};\n    const schema = 'schema' in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, S, F> = ('uiSchema' in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== 'undefined';\n    const liveValidate = 'liveValidate' in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T, S, F> = state.schemaUtils;\n    if (!schemaUtils || schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)) {\n      schemaUtils = createSchemaUtils<T, S, F>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(schema, inputFormData) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] = state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> = state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData({ errorSchema, errors }, props.extraErrors);\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema['ui:rootFieldId'],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, S, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(nextProps: FormProps<T, S, F>, nextState: FormState<T, S, F>): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T | undefined,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T, S, F>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils ? altSchemaUtils : this.state.schemaUtils;\n    const { customValidate, transformErrors, uiSchema } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(formData, resolvedSchema, customValidate, transformErrors, uiSchema);\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, S, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { formContext } = this.props;\n    const options = getUiOptions<T, S, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<'ErrorListTemplate', T, S, F>('ErrorListTemplate', registry, options);\n\n    if (errors && errors.length) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n          registry={registry}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T | undefined, fields: string[][]): T | undefined => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== 'object') {\n      return formData;\n    }\n\n    // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n    const data: GenericObjectType = _pick(formData, fields as unknown as string[]);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param [formData] - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData?: T): string[][] => {\n    const getAllPaths = (_obj: GenericObjectType, acc: string[][] = [], paths: string[][] = [[]]) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === 'object') {\n          const newPaths = paths.map((path) => [...path, key]);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (_obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] && _obj[key][NAME_KEY] !== '') {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== '') {\n          paths.forEach((path) => {\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== 'object' || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const { extraErrors, omitExtraData, liveOmit, noValidate, liveValidate, onChange } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, S, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', formData);\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, 'preventDuplicates') as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(state as FormState<T, S, F>, () => onChange && onChange({ ...this.state, ...state }, id));\n  };\n\n  /**\n   * Callback function to handle reset form data.\n   * - Reset all fields with default values.\n   * - Reset validations and errors\n   *\n   */\n  reset = () => {\n    const { onChange } = this.props;\n    const newState = this.getStateFromProps(this.props, undefined);\n    const newFormData = newState.formData;\n    const state = {\n      formData: newFormData,\n      errorSchema: {},\n      errors: [] as unknown,\n      schemaValidationErrors: [] as unknown,\n      schemaValidationErrorSchema: {},\n    } as FormState<T, S, F>;\n\n    this.setState(state, () => onChange && onChange({ ...this.state, ...state }));\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', newFormData);\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors ? schemaUtils.getValidator().toErrorList(extraErrors) : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit({ ...this.state, formData: newFormData, status: 'submitted' }, event);\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, S, F> {\n    const { translateString: customTranslateString, uiSchema = {} } = this.props;\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext, translateString } = getDefaultRegistry<T, S, F>();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n      translateString: customTranslateString || translateString,\n      globalUiOptions: uiSchema[UI_GLOBAL_OPTIONS_KEY],\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent('submit', {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Attempts to focus on the field associated with the `error`. Uses the `property` field to compute path of the error\n   * field, then, using the `idPrefix` and `idSeparator` converts that path into an id. Then the input element with that\n   * id is attempted to be found using the `formElement` ref. If it is located, then it is focused.\n   *\n   * @param error - The error on which to focus\n   */\n  focusOnError(error: RJSFValidationError) {\n    const { idPrefix = 'root', idSeparator = '_' } = this.props;\n    const { property } = error;\n    const path = _toPath(property);\n    if (path[0] === '') {\n      // Most of the time the `.foo` property results in the first element being empty, so replace it with the idPrefix\n      path[0] = idPrefix;\n    } else {\n      // Otherwise insert the idPrefix into the first location using unshift\n      path.unshift(idPrefix);\n    }\n\n    const elementId = path.join(idSeparator);\n    let field = this.formElement.current.elements[elementId];\n    if (!field) {\n      // if not an exact match, try finding an input starting with the element id (like radio buttons or checkboxes)\n      field = this.formElement.current.querySelector(`input[id^=${elementId}`);\n    }\n    if (field) {\n      field.focus();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, focusOnFirstError, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      if (focusOnFirstError) {\n        this.focusOnError(schemaValidation.errors[0]);\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error('Form validation failed', errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = '',\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      showErrorList = 'top',\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || 'form';\n\n    return (\n      <FormTag\n        className={className ? className : 'rjsf'}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {showErrorList === 'top' && this.renderErrors(registry)}\n        <_SchemaField\n          name=''\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} registry={registry} />}\n        {showErrorList === 'bottom' && this.renderErrors(registry)}\n      </FormTag>\n    );\n  }\n}\n","import { ComponentType, ForwardedRef, forwardRef } from 'react';\nimport Form, { FormProps } from './components/Form';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  FormProps<T, S, F>,\n  'fields' | 'templates' | 'widgets' | '_internalFormWrapper'\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  themeProps: ThemeProps<T, S, F>\n): ComponentType<FormProps<T, S, F>> {\n  return forwardRef(\n    ({ fields, widgets, templates, ...directProps }: FormProps<T, S, F>, ref: ForwardedRef<Form<T, S, F>>) => {\n      fields = { ...themeProps?.fields, ...fields };\n      widgets = { ...themeProps?.widgets, ...widgets };\n      templates = {\n        ...themeProps?.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, S, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}