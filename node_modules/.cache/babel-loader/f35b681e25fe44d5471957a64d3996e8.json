{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;\n\nvar validate_1 = require(\"./compile/validate\");\n\nObject.defineProperty(exports, \"KeywordCxt\", {\n  enumerable: true,\n  get: function () {\n    return validate_1.KeywordCxt;\n  }\n});\n\nvar codegen_1 = require(\"./compile/codegen\");\n\nObject.defineProperty(exports, \"_\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1._;\n  }\n});\nObject.defineProperty(exports, \"str\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.str;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.stringify;\n  }\n});\nObject.defineProperty(exports, \"nil\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.nil;\n  }\n});\nObject.defineProperty(exports, \"Name\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.Name;\n  }\n});\nObject.defineProperty(exports, \"CodeGen\", {\n  enumerable: true,\n  get: function () {\n    return codegen_1.CodeGen;\n  }\n});\n\nconst validation_error_1 = require(\"./runtime/validation_error\");\n\nconst ref_error_1 = require(\"./compile/ref_error\");\n\nconst rules_1 = require(\"./compile/rules\");\n\nconst compile_1 = require(\"./compile\");\n\nconst codegen_2 = require(\"./compile/codegen\");\n\nconst resolve_1 = require(\"./compile/resolve\");\n\nconst dataType_1 = require(\"./compile/validate/dataType\");\n\nconst util_1 = require(\"./compile/util\");\n\nconst $dataRefSchema = require(\"./refs/data.json\");\n\nconst uri_1 = require(\"./runtime/uri\");\n\nconst defaultRegExp = (str, flags) => new RegExp(str, flags);\n\ndefaultRegExp.code = \"new RegExp\";\nconst META_IGNORE_OPTIONS = [\"removeAdditional\", \"useDefaults\", \"coerceTypes\"];\nconst EXT_SCOPE_NAMES = new Set([\"validate\", \"serialize\", \"parse\", \"wrapper\", \"root\", \"schema\", \"keyword\", \"pattern\", \"formats\", \"validate$data\", \"func\", \"obj\", \"Error\"]);\nconst removedOptions = {\n  errorDataPath: \"\",\n  format: \"`validateFormats: false` can be used instead.\",\n  nullable: '\"nullable\" keyword is supported by default.',\n  jsonPointers: \"Deprecated jsPropertySyntax can be used instead.\",\n  extendRefs: \"Deprecated ignoreKeywordsWithRef can be used instead.\",\n  missingRefs: \"Pass empty schema with $id that should be ignored to ajv.addSchema.\",\n  processCode: \"Use option `code: {process: (code, schemaEnv: object) => string}`\",\n  sourceCode: \"Use option `code: {source: true}`\",\n  strictDefaults: \"It is default now, see option `strict`.\",\n  strictKeywords: \"It is default now, see option `strict`.\",\n  uniqueItems: '\"uniqueItems\" keyword is always validated.',\n  unknownFormats: \"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).\",\n  cache: \"Map is used as cache, schema object as key.\",\n  serialize: \"Map is used as cache, schema object as key.\",\n  ajvErrors: \"It is default now.\"\n};\nconst deprecatedOptions = {\n  ignoreKeywordsWithRef: \"\",\n  jsPropertySyntax: \"\",\n  unicode: '\"minLength\"/\"maxLength\" account for unicode characters by default.'\n};\nconst MAX_EXPRESSION = 200; // eslint-disable-next-line complexity\n\nfunction requiredOptions(o) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;\n\n  const s = o.strict;\n\n  const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;\n\n  const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;\n  const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;\n  const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;\n  return {\n    strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,\n    strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,\n    strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : \"log\",\n    strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : \"log\",\n    strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,\n    code: o.code ? { ...o.code,\n      optimize,\n      regExp\n    } : {\n      optimize,\n      regExp\n    },\n    loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,\n    loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,\n    meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,\n    messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,\n    inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,\n    schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : \"$id\",\n    addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,\n    validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,\n    validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,\n    unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,\n    int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,\n    uriResolver: uriResolver\n  };\n}\n\nclass Ajv {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.schemas = {};\n    this.refs = {};\n    this.formats = {};\n    this._compilations = new Set();\n    this._loading = {};\n    this._cache = new Map();\n    opts = this.opts = { ...opts,\n      ...requiredOptions(opts)\n    };\n    const {\n      es5,\n      lines\n    } = this.opts.code;\n    this.scope = new codegen_2.ValueScope({\n      scope: {},\n      prefixes: EXT_SCOPE_NAMES,\n      es5,\n      lines\n    });\n    this.logger = getLogger(opts.logger);\n    const formatOpt = opts.validateFormats;\n    opts.validateFormats = false;\n    this.RULES = (0, rules_1.getRules)();\n    checkOptions.call(this, removedOptions, opts, \"NOT SUPPORTED\");\n    checkOptions.call(this, deprecatedOptions, opts, \"DEPRECATED\", \"warn\");\n    this._metaOpts = getMetaSchemaOptions.call(this);\n    if (opts.formats) addInitialFormats.call(this);\n\n    this._addVocabularies();\n\n    this._addDefaultMetaSchema();\n\n    if (opts.keywords) addInitialKeywords.call(this, opts.keywords);\n    if (typeof opts.meta == \"object\") this.addMetaSchema(opts.meta);\n    addInitialSchemas.call(this);\n    opts.validateFormats = formatOpt;\n  }\n\n  _addVocabularies() {\n    this.addKeyword(\"$async\");\n  }\n\n  _addDefaultMetaSchema() {\n    const {\n      $data,\n      meta,\n      schemaId\n    } = this.opts;\n    let _dataRefSchema = $dataRefSchema;\n\n    if (schemaId === \"id\") {\n      _dataRefSchema = { ...$dataRefSchema\n      };\n      _dataRefSchema.id = _dataRefSchema.$id;\n      delete _dataRefSchema.$id;\n    }\n\n    if (meta && $data) this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);\n  }\n\n  defaultMeta() {\n    const {\n      meta,\n      schemaId\n    } = this.opts;\n    return this.opts.defaultMeta = typeof meta == \"object\" ? meta[schemaId] || meta : undefined;\n  }\n\n  validate(schemaKeyRef, // key, ref or schema object\n  data // to be validated\n  ) {\n    let v;\n\n    if (typeof schemaKeyRef == \"string\") {\n      v = this.getSchema(schemaKeyRef);\n      if (!v) throw new Error(`no schema with key or ref \"${schemaKeyRef}\"`);\n    } else {\n      v = this.compile(schemaKeyRef);\n    }\n\n    const valid = v(data);\n    if (!(\"$async\" in v)) this.errors = v.errors;\n    return valid;\n  }\n\n  compile(schema, _meta) {\n    const sch = this._addSchema(schema, _meta);\n\n    return sch.validate || this._compileSchemaEnv(sch);\n  }\n\n  compileAsync(schema, meta) {\n    if (typeof this.opts.loadSchema != \"function\") {\n      throw new Error(\"options.loadSchema should be a function\");\n    }\n\n    const {\n      loadSchema\n    } = this.opts;\n    return runCompileAsync.call(this, schema, meta);\n\n    async function runCompileAsync(_schema, _meta) {\n      await loadMetaSchema.call(this, _schema.$schema);\n\n      const sch = this._addSchema(_schema, _meta);\n\n      return sch.validate || _compileAsync.call(this, sch);\n    }\n\n    async function loadMetaSchema($ref) {\n      if ($ref && !this.getSchema($ref)) {\n        await runCompileAsync.call(this, {\n          $ref\n        }, true);\n      }\n    }\n\n    async function _compileAsync(sch) {\n      try {\n        return this._compileSchemaEnv(sch);\n      } catch (e) {\n        if (!(e instanceof ref_error_1.default)) throw e;\n        checkLoaded.call(this, e);\n        await loadMissingSchema.call(this, e.missingSchema);\n        return _compileAsync.call(this, sch);\n      }\n    }\n\n    function checkLoaded(_ref) {\n      let {\n        missingSchema: ref,\n        missingRef\n      } = _ref;\n\n      if (this.refs[ref]) {\n        throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);\n      }\n    }\n\n    async function loadMissingSchema(ref) {\n      const _schema = await _loadSchema.call(this, ref);\n\n      if (!this.refs[ref]) await loadMetaSchema.call(this, _schema.$schema);\n      if (!this.refs[ref]) this.addSchema(_schema, ref, meta);\n    }\n\n    async function _loadSchema(ref) {\n      const p = this._loading[ref];\n      if (p) return p;\n\n      try {\n        return await (this._loading[ref] = loadSchema(ref));\n      } finally {\n        delete this._loading[ref];\n      }\n    }\n  } // Adds schema to the instance\n\n\n  addSchema(schema, // If array is passed, `key` will be ignored\n  key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n  _meta) {\n    let _validateSchema = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.opts.validateSchema;\n\n    if (Array.isArray(schema)) {\n      for (const sch of schema) this.addSchema(sch, undefined, _meta, _validateSchema);\n\n      return this;\n    }\n\n    let id;\n\n    if (typeof schema === \"object\") {\n      const {\n        schemaId\n      } = this.opts;\n      id = schema[schemaId];\n\n      if (id !== undefined && typeof id != \"string\") {\n        throw new Error(`schema ${schemaId} must be string`);\n      }\n    }\n\n    key = (0, resolve_1.normalizeId)(key || id);\n\n    this._checkUnique(key);\n\n    this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);\n    return this;\n  } // Add schema that will be used to validate other schemas\n  // options in META_IGNORE_OPTIONS are alway set to false\n\n\n  addMetaSchema(schema, key) {\n    let _validateSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.opts.validateSchema;\n\n    this.addSchema(schema, key, true, _validateSchema);\n    return this;\n  } //  Validate schema against its meta-schema\n\n\n  validateSchema(schema, throwOrLogError) {\n    if (typeof schema == \"boolean\") return true;\n    let $schema;\n    $schema = schema.$schema;\n\n    if ($schema !== undefined && typeof $schema != \"string\") {\n      throw new Error(\"$schema must be a string\");\n    }\n\n    $schema = $schema || this.opts.defaultMeta || this.defaultMeta();\n\n    if (!$schema) {\n      this.logger.warn(\"meta-schema not available\");\n      this.errors = null;\n      return true;\n    }\n\n    const valid = this.validate($schema, schema);\n\n    if (!valid && throwOrLogError) {\n      const message = \"schema is invalid: \" + this.errorsText();\n      if (this.opts.validateSchema === \"log\") this.logger.error(message);else throw new Error(message);\n    }\n\n    return valid;\n  } // Get compiled schema by `key` or `ref`.\n  // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)\n\n\n  getSchema(keyRef) {\n    let sch;\n\n    while (typeof (sch = getSchEnv.call(this, keyRef)) == \"string\") keyRef = sch;\n\n    if (sch === undefined) {\n      const {\n        schemaId\n      } = this.opts;\n      const root = new compile_1.SchemaEnv({\n        schema: {},\n        schemaId\n      });\n      sch = compile_1.resolveSchema.call(this, root, keyRef);\n      if (!sch) return;\n      this.refs[keyRef] = sch;\n    }\n\n    return sch.validate || this._compileSchemaEnv(sch);\n  } // Remove cached schema(s).\n  // If no parameter is passed all schemas but meta-schemas are removed.\n  // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n  // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n\n\n  removeSchema(schemaKeyRef) {\n    if (schemaKeyRef instanceof RegExp) {\n      this._removeAllSchemas(this.schemas, schemaKeyRef);\n\n      this._removeAllSchemas(this.refs, schemaKeyRef);\n\n      return this;\n    }\n\n    switch (typeof schemaKeyRef) {\n      case \"undefined\":\n        this._removeAllSchemas(this.schemas);\n\n        this._removeAllSchemas(this.refs);\n\n        this._cache.clear();\n\n        return this;\n\n      case \"string\":\n        {\n          const sch = getSchEnv.call(this, schemaKeyRef);\n          if (typeof sch == \"object\") this._cache.delete(sch.schema);\n          delete this.schemas[schemaKeyRef];\n          delete this.refs[schemaKeyRef];\n          return this;\n        }\n\n      case \"object\":\n        {\n          const cacheKey = schemaKeyRef;\n\n          this._cache.delete(cacheKey);\n\n          let id = schemaKeyRef[this.opts.schemaId];\n\n          if (id) {\n            id = (0, resolve_1.normalizeId)(id);\n            delete this.schemas[id];\n            delete this.refs[id];\n          }\n\n          return this;\n        }\n\n      default:\n        throw new Error(\"ajv.removeSchema: invalid parameter\");\n    }\n  } // add \"vocabulary\" - a collection of keywords\n\n\n  addVocabulary(definitions) {\n    for (const def of definitions) this.addKeyword(def);\n\n    return this;\n  }\n\n  addKeyword(kwdOrDef, def // deprecated\n  ) {\n    let keyword;\n\n    if (typeof kwdOrDef == \"string\") {\n      keyword = kwdOrDef;\n\n      if (typeof def == \"object\") {\n        this.logger.warn(\"these parameters are deprecated, see docs for addKeyword\");\n        def.keyword = keyword;\n      }\n    } else if (typeof kwdOrDef == \"object\" && def === undefined) {\n      def = kwdOrDef;\n      keyword = def.keyword;\n\n      if (Array.isArray(keyword) && !keyword.length) {\n        throw new Error(\"addKeywords: keyword must be string or non-empty array\");\n      }\n    } else {\n      throw new Error(\"invalid addKeywords parameters\");\n    }\n\n    checkKeyword.call(this, keyword, def);\n\n    if (!def) {\n      (0, util_1.eachItem)(keyword, kwd => addRule.call(this, kwd));\n      return this;\n    }\n\n    keywordMetaschema.call(this, def);\n    const definition = { ...def,\n      type: (0, dataType_1.getJSONTypes)(def.type),\n      schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)\n    };\n    (0, util_1.eachItem)(keyword, definition.type.length === 0 ? k => addRule.call(this, k, definition) : k => definition.type.forEach(t => addRule.call(this, k, definition, t)));\n    return this;\n  }\n\n  getKeyword(keyword) {\n    const rule = this.RULES.all[keyword];\n    return typeof rule == \"object\" ? rule.definition : !!rule;\n  } // Remove keyword\n\n\n  removeKeyword(keyword) {\n    // TODO return type should be Ajv\n    const {\n      RULES\n    } = this;\n    delete RULES.keywords[keyword];\n    delete RULES.all[keyword];\n\n    for (const group of RULES.rules) {\n      const i = group.rules.findIndex(rule => rule.keyword === keyword);\n      if (i >= 0) group.rules.splice(i, 1);\n    }\n\n    return this;\n  } // Add format\n\n\n  addFormat(name, format) {\n    if (typeof format == \"string\") format = new RegExp(format);\n    this.formats[name] = format;\n    return this;\n  }\n\n  errorsText() {\n    let errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.errors;\n    let {\n      separator = \", \",\n      dataVar = \"data\"\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!errors || errors.length === 0) return \"No errors\";\n    return errors.map(e => `${dataVar}${e.instancePath} ${e.message}`).reduce((text, msg) => text + separator + msg);\n  }\n\n  $dataMetaSchema(metaSchema, keywordsJsonPointers) {\n    const rules = this.RULES.all;\n    metaSchema = JSON.parse(JSON.stringify(metaSchema));\n\n    for (const jsonPointer of keywordsJsonPointers) {\n      const segments = jsonPointer.split(\"/\").slice(1); // first segment is an empty string\n\n      let keywords = metaSchema;\n\n      for (const seg of segments) keywords = keywords[seg];\n\n      for (const key in rules) {\n        const rule = rules[key];\n        if (typeof rule != \"object\") continue;\n        const {\n          $data\n        } = rule.definition;\n        const schema = keywords[key];\n        if ($data && schema) keywords[key] = schemaOrData(schema);\n      }\n    }\n\n    return metaSchema;\n  }\n\n  _removeAllSchemas(schemas, regex) {\n    for (const keyRef in schemas) {\n      const sch = schemas[keyRef];\n\n      if (!regex || regex.test(keyRef)) {\n        if (typeof sch == \"string\") {\n          delete schemas[keyRef];\n        } else if (sch && !sch.meta) {\n          this._cache.delete(sch.schema);\n\n          delete schemas[keyRef];\n        }\n      }\n    }\n  }\n\n  _addSchema(schema, meta, baseId) {\n    let validateSchema = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.opts.validateSchema;\n    let addSchema = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.opts.addUsedSchema;\n    let id;\n    const {\n      schemaId\n    } = this.opts;\n\n    if (typeof schema == \"object\") {\n      id = schema[schemaId];\n    } else {\n      if (this.opts.jtd) throw new Error(\"schema must be object\");else if (typeof schema != \"boolean\") throw new Error(\"schema must be object or boolean\");\n    }\n\n    let sch = this._cache.get(schema);\n\n    if (sch !== undefined) return sch;\n    baseId = (0, resolve_1.normalizeId)(id || baseId);\n    const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);\n    sch = new compile_1.SchemaEnv({\n      schema,\n      schemaId,\n      meta,\n      baseId,\n      localRefs\n    });\n\n    this._cache.set(sch.schema, sch);\n\n    if (addSchema && !baseId.startsWith(\"#\")) {\n      // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)\n      if (baseId) this._checkUnique(baseId);\n      this.refs[baseId] = sch;\n    }\n\n    if (validateSchema) this.validateSchema(schema, true);\n    return sch;\n  }\n\n  _checkUnique(id) {\n    if (this.schemas[id] || this.refs[id]) {\n      throw new Error(`schema with key or id \"${id}\" already exists`);\n    }\n  }\n\n  _compileSchemaEnv(sch) {\n    if (sch.meta) this._compileMetaSchema(sch);else compile_1.compileSchema.call(this, sch);\n    /* istanbul ignore if */\n\n    if (!sch.validate) throw new Error(\"ajv implementation error\");\n    return sch.validate;\n  }\n\n  _compileMetaSchema(sch) {\n    const currentOpts = this.opts;\n    this.opts = this._metaOpts;\n\n    try {\n      compile_1.compileSchema.call(this, sch);\n    } finally {\n      this.opts = currentOpts;\n    }\n  }\n\n}\n\nexports.default = Ajv;\nAjv.ValidationError = validation_error_1.default;\nAjv.MissingRefError = ref_error_1.default;\n\nfunction checkOptions(checkOpts, options, msg) {\n  let log = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"error\";\n\n  for (const key in checkOpts) {\n    const opt = key;\n    if (opt in options) this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);\n  }\n}\n\nfunction getSchEnv(keyRef) {\n  keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line\n\n  return this.schemas[keyRef] || this.refs[keyRef];\n}\n\nfunction addInitialSchemas() {\n  const optsSchemas = this.opts.schemas;\n  if (!optsSchemas) return;\n  if (Array.isArray(optsSchemas)) this.addSchema(optsSchemas);else for (const key in optsSchemas) this.addSchema(optsSchemas[key], key);\n}\n\nfunction addInitialFormats() {\n  for (const name in this.opts.formats) {\n    const format = this.opts.formats[name];\n    if (format) this.addFormat(name, format);\n  }\n}\n\nfunction addInitialKeywords(defs) {\n  if (Array.isArray(defs)) {\n    this.addVocabulary(defs);\n    return;\n  }\n\n  this.logger.warn(\"keywords option as map is deprecated, pass array\");\n\n  for (const keyword in defs) {\n    const def = defs[keyword];\n    if (!def.keyword) def.keyword = keyword;\n    this.addKeyword(def);\n  }\n}\n\nfunction getMetaSchemaOptions() {\n  const metaOpts = { ...this.opts\n  };\n\n  for (const opt of META_IGNORE_OPTIONS) delete metaOpts[opt];\n\n  return metaOpts;\n}\n\nconst noLogs = {\n  log() {},\n\n  warn() {},\n\n  error() {}\n\n};\n\nfunction getLogger(logger) {\n  if (logger === false) return noLogs;\n  if (logger === undefined) return console;\n  if (logger.log && logger.warn && logger.error) return logger;\n  throw new Error(\"logger must implement log, warn and error methods\");\n}\n\nconst KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;\n\nfunction checkKeyword(keyword, def) {\n  const {\n    RULES\n  } = this;\n  (0, util_1.eachItem)(keyword, kwd => {\n    if (RULES.keywords[kwd]) throw new Error(`Keyword ${kwd} is already defined`);\n    if (!KEYWORD_NAME.test(kwd)) throw new Error(`Keyword ${kwd} has invalid name`);\n  });\n  if (!def) return;\n\n  if (def.$data && !(\"code\" in def || \"validate\" in def)) {\n    throw new Error('$data keyword must have \"code\" or \"validate\" function');\n  }\n}\n\nfunction addRule(keyword, definition, dataType) {\n  var _a;\n\n  const post = definition === null || definition === void 0 ? void 0 : definition.post;\n  if (dataType && post) throw new Error('keyword with \"post\" flag cannot have \"type\"');\n  const {\n    RULES\n  } = this;\n  let ruleGroup = post ? RULES.post : RULES.rules.find(_ref2 => {\n    let {\n      type: t\n    } = _ref2;\n    return t === dataType;\n  });\n\n  if (!ruleGroup) {\n    ruleGroup = {\n      type: dataType,\n      rules: []\n    };\n    RULES.rules.push(ruleGroup);\n  }\n\n  RULES.keywords[keyword] = true;\n  if (!definition) return;\n  const rule = {\n    keyword,\n    definition: { ...definition,\n      type: (0, dataType_1.getJSONTypes)(definition.type),\n      schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)\n    }\n  };\n  if (definition.before) addBeforeRule.call(this, ruleGroup, rule, definition.before);else ruleGroup.rules.push(rule);\n  RULES.all[keyword] = rule;\n  (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach(kwd => this.addKeyword(kwd));\n}\n\nfunction addBeforeRule(ruleGroup, rule, before) {\n  const i = ruleGroup.rules.findIndex(_rule => _rule.keyword === before);\n\n  if (i >= 0) {\n    ruleGroup.rules.splice(i, 0, rule);\n  } else {\n    ruleGroup.rules.push(rule);\n    this.logger.warn(`rule ${before} is not defined`);\n  }\n}\n\nfunction keywordMetaschema(def) {\n  let {\n    metaSchema\n  } = def;\n  if (metaSchema === undefined) return;\n  if (def.$data && this.opts.$data) metaSchema = schemaOrData(metaSchema);\n  def.validateSchema = this.compile(metaSchema, true);\n}\n\nconst $dataRef = {\n  $ref: \"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\"\n};\n\nfunction schemaOrData(schema) {\n  return {\n    anyOf: [schema, $dataRef]\n  };\n}","map":{"version":3,"sources":["../lib/core.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;\nvar validate_1 = require(\"./compile/validate\");\nObject.defineProperty(exports, \"KeywordCxt\", { enumerable: true, get: function () { return validate_1.KeywordCxt; } });\nvar codegen_1 = require(\"./compile/codegen\");\nObject.defineProperty(exports, \"_\", { enumerable: true, get: function () { return codegen_1._; } });\nObject.defineProperty(exports, \"str\", { enumerable: true, get: function () { return codegen_1.str; } });\nObject.defineProperty(exports, \"stringify\", { enumerable: true, get: function () { return codegen_1.stringify; } });\nObject.defineProperty(exports, \"nil\", { enumerable: true, get: function () { return codegen_1.nil; } });\nObject.defineProperty(exports, \"Name\", { enumerable: true, get: function () { return codegen_1.Name; } });\nObject.defineProperty(exports, \"CodeGen\", { enumerable: true, get: function () { return codegen_1.CodeGen; } });\nconst validation_error_1 = require(\"./runtime/validation_error\");\nconst ref_error_1 = require(\"./compile/ref_error\");\nconst rules_1 = require(\"./compile/rules\");\nconst compile_1 = require(\"./compile\");\nconst codegen_2 = require(\"./compile/codegen\");\nconst resolve_1 = require(\"./compile/resolve\");\nconst dataType_1 = require(\"./compile/validate/dataType\");\nconst util_1 = require(\"./compile/util\");\nconst $dataRefSchema = require(\"./refs/data.json\");\nconst uri_1 = require(\"./runtime/uri\");\nconst defaultRegExp = (str, flags) => new RegExp(str, flags);\ndefaultRegExp.code = \"new RegExp\";\nconst META_IGNORE_OPTIONS = [\"removeAdditional\", \"useDefaults\", \"coerceTypes\"];\nconst EXT_SCOPE_NAMES = new Set([\n    \"validate\",\n    \"serialize\",\n    \"parse\",\n    \"wrapper\",\n    \"root\",\n    \"schema\",\n    \"keyword\",\n    \"pattern\",\n    \"formats\",\n    \"validate$data\",\n    \"func\",\n    \"obj\",\n    \"Error\",\n]);\nconst removedOptions = {\n    errorDataPath: \"\",\n    format: \"`validateFormats: false` can be used instead.\",\n    nullable: '\"nullable\" keyword is supported by default.',\n    jsonPointers: \"Deprecated jsPropertySyntax can be used instead.\",\n    extendRefs: \"Deprecated ignoreKeywordsWithRef can be used instead.\",\n    missingRefs: \"Pass empty schema with $id that should be ignored to ajv.addSchema.\",\n    processCode: \"Use option `code: {process: (code, schemaEnv: object) => string}`\",\n    sourceCode: \"Use option `code: {source: true}`\",\n    strictDefaults: \"It is default now, see option `strict`.\",\n    strictKeywords: \"It is default now, see option `strict`.\",\n    uniqueItems: '\"uniqueItems\" keyword is always validated.',\n    unknownFormats: \"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).\",\n    cache: \"Map is used as cache, schema object as key.\",\n    serialize: \"Map is used as cache, schema object as key.\",\n    ajvErrors: \"It is default now.\",\n};\nconst deprecatedOptions = {\n    ignoreKeywordsWithRef: \"\",\n    jsPropertySyntax: \"\",\n    unicode: '\"minLength\"/\"maxLength\" account for unicode characters by default.',\n};\nconst MAX_EXPRESSION = 200;\n// eslint-disable-next-line complexity\nfunction requiredOptions(o) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;\n    const s = o.strict;\n    const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;\n    const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;\n    const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;\n    const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;\n    return {\n        strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,\n        strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,\n        strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : \"log\",\n        strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : \"log\",\n        strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,\n        code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },\n        loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,\n        loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,\n        meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,\n        messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,\n        inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,\n        schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : \"$id\",\n        addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,\n        validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,\n        validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,\n        unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,\n        int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,\n        uriResolver: uriResolver,\n    };\n}\nclass Ajv {\n    constructor(opts = {}) {\n        this.schemas = {};\n        this.refs = {};\n        this.formats = {};\n        this._compilations = new Set();\n        this._loading = {};\n        this._cache = new Map();\n        opts = this.opts = { ...opts, ...requiredOptions(opts) };\n        const { es5, lines } = this.opts.code;\n        this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });\n        this.logger = getLogger(opts.logger);\n        const formatOpt = opts.validateFormats;\n        opts.validateFormats = false;\n        this.RULES = (0, rules_1.getRules)();\n        checkOptions.call(this, removedOptions, opts, \"NOT SUPPORTED\");\n        checkOptions.call(this, deprecatedOptions, opts, \"DEPRECATED\", \"warn\");\n        this._metaOpts = getMetaSchemaOptions.call(this);\n        if (opts.formats)\n            addInitialFormats.call(this);\n        this._addVocabularies();\n        this._addDefaultMetaSchema();\n        if (opts.keywords)\n            addInitialKeywords.call(this, opts.keywords);\n        if (typeof opts.meta == \"object\")\n            this.addMetaSchema(opts.meta);\n        addInitialSchemas.call(this);\n        opts.validateFormats = formatOpt;\n    }\n    _addVocabularies() {\n        this.addKeyword(\"$async\");\n    }\n    _addDefaultMetaSchema() {\n        const { $data, meta, schemaId } = this.opts;\n        let _dataRefSchema = $dataRefSchema;\n        if (schemaId === \"id\") {\n            _dataRefSchema = { ...$dataRefSchema };\n            _dataRefSchema.id = _dataRefSchema.$id;\n            delete _dataRefSchema.$id;\n        }\n        if (meta && $data)\n            this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);\n    }\n    defaultMeta() {\n        const { meta, schemaId } = this.opts;\n        return (this.opts.defaultMeta = typeof meta == \"object\" ? meta[schemaId] || meta : undefined);\n    }\n    validate(schemaKeyRef, // key, ref or schema object\n    data // to be validated\n    ) {\n        let v;\n        if (typeof schemaKeyRef == \"string\") {\n            v = this.getSchema(schemaKeyRef);\n            if (!v)\n                throw new Error(`no schema with key or ref \"${schemaKeyRef}\"`);\n        }\n        else {\n            v = this.compile(schemaKeyRef);\n        }\n        const valid = v(data);\n        if (!(\"$async\" in v))\n            this.errors = v.errors;\n        return valid;\n    }\n    compile(schema, _meta) {\n        const sch = this._addSchema(schema, _meta);\n        return (sch.validate || this._compileSchemaEnv(sch));\n    }\n    compileAsync(schema, meta) {\n        if (typeof this.opts.loadSchema != \"function\") {\n            throw new Error(\"options.loadSchema should be a function\");\n        }\n        const { loadSchema } = this.opts;\n        return runCompileAsync.call(this, schema, meta);\n        async function runCompileAsync(_schema, _meta) {\n            await loadMetaSchema.call(this, _schema.$schema);\n            const sch = this._addSchema(_schema, _meta);\n            return sch.validate || _compileAsync.call(this, sch);\n        }\n        async function loadMetaSchema($ref) {\n            if ($ref && !this.getSchema($ref)) {\n                await runCompileAsync.call(this, { $ref }, true);\n            }\n        }\n        async function _compileAsync(sch) {\n            try {\n                return this._compileSchemaEnv(sch);\n            }\n            catch (e) {\n                if (!(e instanceof ref_error_1.default))\n                    throw e;\n                checkLoaded.call(this, e);\n                await loadMissingSchema.call(this, e.missingSchema);\n                return _compileAsync.call(this, sch);\n            }\n        }\n        function checkLoaded({ missingSchema: ref, missingRef }) {\n            if (this.refs[ref]) {\n                throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);\n            }\n        }\n        async function loadMissingSchema(ref) {\n            const _schema = await _loadSchema.call(this, ref);\n            if (!this.refs[ref])\n                await loadMetaSchema.call(this, _schema.$schema);\n            if (!this.refs[ref])\n                this.addSchema(_schema, ref, meta);\n        }\n        async function _loadSchema(ref) {\n            const p = this._loading[ref];\n            if (p)\n                return p;\n            try {\n                return await (this._loading[ref] = loadSchema(ref));\n            }\n            finally {\n                delete this._loading[ref];\n            }\n        }\n    }\n    // Adds schema to the instance\n    addSchema(schema, // If array is passed, `key` will be ignored\n    key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n    _meta, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n    _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.\n    ) {\n        if (Array.isArray(schema)) {\n            for (const sch of schema)\n                this.addSchema(sch, undefined, _meta, _validateSchema);\n            return this;\n        }\n        let id;\n        if (typeof schema === \"object\") {\n            const { schemaId } = this.opts;\n            id = schema[schemaId];\n            if (id !== undefined && typeof id != \"string\") {\n                throw new Error(`schema ${schemaId} must be string`);\n            }\n        }\n        key = (0, resolve_1.normalizeId)(key || id);\n        this._checkUnique(key);\n        this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);\n        return this;\n    }\n    // Add schema that will be used to validate other schemas\n    // options in META_IGNORE_OPTIONS are alway set to false\n    addMetaSchema(schema, key, // schema key\n    _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema\n    ) {\n        this.addSchema(schema, key, true, _validateSchema);\n        return this;\n    }\n    //  Validate schema against its meta-schema\n    validateSchema(schema, throwOrLogError) {\n        if (typeof schema == \"boolean\")\n            return true;\n        let $schema;\n        $schema = schema.$schema;\n        if ($schema !== undefined && typeof $schema != \"string\") {\n            throw new Error(\"$schema must be a string\");\n        }\n        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();\n        if (!$schema) {\n            this.logger.warn(\"meta-schema not available\");\n            this.errors = null;\n            return true;\n        }\n        const valid = this.validate($schema, schema);\n        if (!valid && throwOrLogError) {\n            const message = \"schema is invalid: \" + this.errorsText();\n            if (this.opts.validateSchema === \"log\")\n                this.logger.error(message);\n            else\n                throw new Error(message);\n        }\n        return valid;\n    }\n    // Get compiled schema by `key` or `ref`.\n    // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)\n    getSchema(keyRef) {\n        let sch;\n        while (typeof (sch = getSchEnv.call(this, keyRef)) == \"string\")\n            keyRef = sch;\n        if (sch === undefined) {\n            const { schemaId } = this.opts;\n            const root = new compile_1.SchemaEnv({ schema: {}, schemaId });\n            sch = compile_1.resolveSchema.call(this, root, keyRef);\n            if (!sch)\n                return;\n            this.refs[keyRef] = sch;\n        }\n        return (sch.validate || this._compileSchemaEnv(sch));\n    }\n    // Remove cached schema(s).\n    // If no parameter is passed all schemas but meta-schemas are removed.\n    // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n    // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n    removeSchema(schemaKeyRef) {\n        if (schemaKeyRef instanceof RegExp) {\n            this._removeAllSchemas(this.schemas, schemaKeyRef);\n            this._removeAllSchemas(this.refs, schemaKeyRef);\n            return this;\n        }\n        switch (typeof schemaKeyRef) {\n            case \"undefined\":\n                this._removeAllSchemas(this.schemas);\n                this._removeAllSchemas(this.refs);\n                this._cache.clear();\n                return this;\n            case \"string\": {\n                const sch = getSchEnv.call(this, schemaKeyRef);\n                if (typeof sch == \"object\")\n                    this._cache.delete(sch.schema);\n                delete this.schemas[schemaKeyRef];\n                delete this.refs[schemaKeyRef];\n                return this;\n            }\n            case \"object\": {\n                const cacheKey = schemaKeyRef;\n                this._cache.delete(cacheKey);\n                let id = schemaKeyRef[this.opts.schemaId];\n                if (id) {\n                    id = (0, resolve_1.normalizeId)(id);\n                    delete this.schemas[id];\n                    delete this.refs[id];\n                }\n                return this;\n            }\n            default:\n                throw new Error(\"ajv.removeSchema: invalid parameter\");\n        }\n    }\n    // add \"vocabulary\" - a collection of keywords\n    addVocabulary(definitions) {\n        for (const def of definitions)\n            this.addKeyword(def);\n        return this;\n    }\n    addKeyword(kwdOrDef, def // deprecated\n    ) {\n        let keyword;\n        if (typeof kwdOrDef == \"string\") {\n            keyword = kwdOrDef;\n            if (typeof def == \"object\") {\n                this.logger.warn(\"these parameters are deprecated, see docs for addKeyword\");\n                def.keyword = keyword;\n            }\n        }\n        else if (typeof kwdOrDef == \"object\" && def === undefined) {\n            def = kwdOrDef;\n            keyword = def.keyword;\n            if (Array.isArray(keyword) && !keyword.length) {\n                throw new Error(\"addKeywords: keyword must be string or non-empty array\");\n            }\n        }\n        else {\n            throw new Error(\"invalid addKeywords parameters\");\n        }\n        checkKeyword.call(this, keyword, def);\n        if (!def) {\n            (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));\n            return this;\n        }\n        keywordMetaschema.call(this, def);\n        const definition = {\n            ...def,\n            type: (0, dataType_1.getJSONTypes)(def.type),\n            schemaType: (0, dataType_1.getJSONTypes)(def.schemaType),\n        };\n        (0, util_1.eachItem)(keyword, definition.type.length === 0\n            ? (k) => addRule.call(this, k, definition)\n            : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));\n        return this;\n    }\n    getKeyword(keyword) {\n        const rule = this.RULES.all[keyword];\n        return typeof rule == \"object\" ? rule.definition : !!rule;\n    }\n    // Remove keyword\n    removeKeyword(keyword) {\n        // TODO return type should be Ajv\n        const { RULES } = this;\n        delete RULES.keywords[keyword];\n        delete RULES.all[keyword];\n        for (const group of RULES.rules) {\n            const i = group.rules.findIndex((rule) => rule.keyword === keyword);\n            if (i >= 0)\n                group.rules.splice(i, 1);\n        }\n        return this;\n    }\n    // Add format\n    addFormat(name, format) {\n        if (typeof format == \"string\")\n            format = new RegExp(format);\n        this.formats[name] = format;\n        return this;\n    }\n    errorsText(errors = this.errors, // optional array of validation errors\n    { separator = \", \", dataVar = \"data\" } = {} // optional options with properties `separator` and `dataVar`\n    ) {\n        if (!errors || errors.length === 0)\n            return \"No errors\";\n        return errors\n            .map((e) => `${dataVar}${e.instancePath} ${e.message}`)\n            .reduce((text, msg) => text + separator + msg);\n    }\n    $dataMetaSchema(metaSchema, keywordsJsonPointers) {\n        const rules = this.RULES.all;\n        metaSchema = JSON.parse(JSON.stringify(metaSchema));\n        for (const jsonPointer of keywordsJsonPointers) {\n            const segments = jsonPointer.split(\"/\").slice(1); // first segment is an empty string\n            let keywords = metaSchema;\n            for (const seg of segments)\n                keywords = keywords[seg];\n            for (const key in rules) {\n                const rule = rules[key];\n                if (typeof rule != \"object\")\n                    continue;\n                const { $data } = rule.definition;\n                const schema = keywords[key];\n                if ($data && schema)\n                    keywords[key] = schemaOrData(schema);\n            }\n        }\n        return metaSchema;\n    }\n    _removeAllSchemas(schemas, regex) {\n        for (const keyRef in schemas) {\n            const sch = schemas[keyRef];\n            if (!regex || regex.test(keyRef)) {\n                if (typeof sch == \"string\") {\n                    delete schemas[keyRef];\n                }\n                else if (sch && !sch.meta) {\n                    this._cache.delete(sch.schema);\n                    delete schemas[keyRef];\n                }\n            }\n        }\n    }\n    _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {\n        let id;\n        const { schemaId } = this.opts;\n        if (typeof schema == \"object\") {\n            id = schema[schemaId];\n        }\n        else {\n            if (this.opts.jtd)\n                throw new Error(\"schema must be object\");\n            else if (typeof schema != \"boolean\")\n                throw new Error(\"schema must be object or boolean\");\n        }\n        let sch = this._cache.get(schema);\n        if (sch !== undefined)\n            return sch;\n        baseId = (0, resolve_1.normalizeId)(id || baseId);\n        const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);\n        sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });\n        this._cache.set(sch.schema, sch);\n        if (addSchema && !baseId.startsWith(\"#\")) {\n            // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)\n            if (baseId)\n                this._checkUnique(baseId);\n            this.refs[baseId] = sch;\n        }\n        if (validateSchema)\n            this.validateSchema(schema, true);\n        return sch;\n    }\n    _checkUnique(id) {\n        if (this.schemas[id] || this.refs[id]) {\n            throw new Error(`schema with key or id \"${id}\" already exists`);\n        }\n    }\n    _compileSchemaEnv(sch) {\n        if (sch.meta)\n            this._compileMetaSchema(sch);\n        else\n            compile_1.compileSchema.call(this, sch);\n        /* istanbul ignore if */\n        if (!sch.validate)\n            throw new Error(\"ajv implementation error\");\n        return sch.validate;\n    }\n    _compileMetaSchema(sch) {\n        const currentOpts = this.opts;\n        this.opts = this._metaOpts;\n        try {\n            compile_1.compileSchema.call(this, sch);\n        }\n        finally {\n            this.opts = currentOpts;\n        }\n    }\n}\nexports.default = Ajv;\nAjv.ValidationError = validation_error_1.default;\nAjv.MissingRefError = ref_error_1.default;\nfunction checkOptions(checkOpts, options, msg, log = \"error\") {\n    for (const key in checkOpts) {\n        const opt = key;\n        if (opt in options)\n            this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);\n    }\n}\nfunction getSchEnv(keyRef) {\n    keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line\n    return this.schemas[keyRef] || this.refs[keyRef];\n}\nfunction addInitialSchemas() {\n    const optsSchemas = this.opts.schemas;\n    if (!optsSchemas)\n        return;\n    if (Array.isArray(optsSchemas))\n        this.addSchema(optsSchemas);\n    else\n        for (const key in optsSchemas)\n            this.addSchema(optsSchemas[key], key);\n}\nfunction addInitialFormats() {\n    for (const name in this.opts.formats) {\n        const format = this.opts.formats[name];\n        if (format)\n            this.addFormat(name, format);\n    }\n}\nfunction addInitialKeywords(defs) {\n    if (Array.isArray(defs)) {\n        this.addVocabulary(defs);\n        return;\n    }\n    this.logger.warn(\"keywords option as map is deprecated, pass array\");\n    for (const keyword in defs) {\n        const def = defs[keyword];\n        if (!def.keyword)\n            def.keyword = keyword;\n        this.addKeyword(def);\n    }\n}\nfunction getMetaSchemaOptions() {\n    const metaOpts = { ...this.opts };\n    for (const opt of META_IGNORE_OPTIONS)\n        delete metaOpts[opt];\n    return metaOpts;\n}\nconst noLogs = { log() { }, warn() { }, error() { } };\nfunction getLogger(logger) {\n    if (logger === false)\n        return noLogs;\n    if (logger === undefined)\n        return console;\n    if (logger.log && logger.warn && logger.error)\n        return logger;\n    throw new Error(\"logger must implement log, warn and error methods\");\n}\nconst KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;\nfunction checkKeyword(keyword, def) {\n    const { RULES } = this;\n    (0, util_1.eachItem)(keyword, (kwd) => {\n        if (RULES.keywords[kwd])\n            throw new Error(`Keyword ${kwd} is already defined`);\n        if (!KEYWORD_NAME.test(kwd))\n            throw new Error(`Keyword ${kwd} has invalid name`);\n    });\n    if (!def)\n        return;\n    if (def.$data && !(\"code\" in def || \"validate\" in def)) {\n        throw new Error('$data keyword must have \"code\" or \"validate\" function');\n    }\n}\nfunction addRule(keyword, definition, dataType) {\n    var _a;\n    const post = definition === null || definition === void 0 ? void 0 : definition.post;\n    if (dataType && post)\n        throw new Error('keyword with \"post\" flag cannot have \"type\"');\n    const { RULES } = this;\n    let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);\n    if (!ruleGroup) {\n        ruleGroup = { type: dataType, rules: [] };\n        RULES.rules.push(ruleGroup);\n    }\n    RULES.keywords[keyword] = true;\n    if (!definition)\n        return;\n    const rule = {\n        keyword,\n        definition: {\n            ...definition,\n            type: (0, dataType_1.getJSONTypes)(definition.type),\n            schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType),\n        },\n    };\n    if (definition.before)\n        addBeforeRule.call(this, ruleGroup, rule, definition.before);\n    else\n        ruleGroup.rules.push(rule);\n    RULES.all[keyword] = rule;\n    (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));\n}\nfunction addBeforeRule(ruleGroup, rule, before) {\n    const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);\n    if (i >= 0) {\n        ruleGroup.rules.splice(i, 0, rule);\n    }\n    else {\n        ruleGroup.rules.push(rule);\n        this.logger.warn(`rule ${before} is not defined`);\n    }\n}\nfunction keywordMetaschema(def) {\n    let { metaSchema } = def;\n    if (metaSchema === undefined)\n        return;\n    if (def.$data && this.opts.$data)\n        metaSchema = schemaOrData(metaSchema);\n    def.validateSchema = this.compile(metaSchema, true);\n}\nconst $dataRef = {\n    $ref: \"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\",\n};\nfunction schemaOrData(schema) {\n    return { anyOf: [schema, $dataRef] };\n}\n//# sourceMappingURL=core.js.map"]},"metadata":{},"sourceType":"script"}