{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst error = {\n  message: _ref => {\n    let {\n      schemaCode\n    } = _ref;\n    return (0, codegen_1.str)`must be multiple of ${schemaCode}`;\n  },\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)`{multipleOf: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: \"multipleOf\",\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      data,\n      schemaCode,\n      it\n    } = cxt; // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n\n    const prec = it.opts.multipleOfPrecision;\n    const res = gen.let(\"res\");\n    const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;\n    cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);\n  }\n\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/multipleOf.ts"],"names":[],"mappings":";;;;;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAQA,MAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,EAAE;AAAA,QAAC;AAAC,MAAA;AAAD,KAAD;AAAA,WAAkB,CAAA,GAAA,SAAA,CAAA,GAAA,CAAG,uBAAuB,UAAU,EAAtD;AAAA,GAD2B;AAEpC,EAAA,MAAM,EAAE;AAAA,QAAC;AAAC,MAAA;AAAD,KAAD;AAAA,WAAkB,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,gBAAgB,UAAU,GAA7C;AAAA;AAF4B,CAAtC;AAKA,MAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,YADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAE,IAJ0B;AAKjC,EAAA,KALiC;;AAMjC,EAAA,IAAI,CAAC,GAAD,EAAgB;AAClB,UAAM;AAAC,MAAA,GAAD;AAAM,MAAA,IAAN;AAAY,MAAA,UAAZ;AAAwB,MAAA;AAAxB,QAA8B,GAApC,CADkB,CAElB;;AACA,UAAM,IAAI,GAAG,EAAE,CAAC,IAAH,CAAQ,mBAArB;AACA,UAAM,GAAG,GAAG,GAAG,CAAC,GAAJ,CAAQ,KAAR,CAAZ;AACA,UAAM,OAAO,GAAG,IAAI,GAChB,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,uBAAuB,GAAG,OAAO,GAAG,UAAU,IAAI,EADnC,GAEhB,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,GAAG,GAAG,iBAAiB,GAAG,GAF/B;AAGA,IAAA,GAAG,CAAC,SAAJ,CAAc,CAAA,GAAA,SAAA,CAAA,CAAA,CAAC,IAAI,UAAU,cAAc,GAAG,MAAM,IAAI,IAAI,UAAU,KAAK,OAAO,IAAlF;AACD;;AAfgC,CAAnC;AAkBA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must be multiple of ${schemaCode}`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{multipleOf: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"multipleOf\",\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, schemaCode, it } = cxt;\n        // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n        const prec = it.opts.multipleOfPrecision;\n        const res = gen.let(\"res\");\n        const invalid = prec\n            ? (0, codegen_1._) `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`\n            : (0, codegen_1._) `${res} !== parseInt(${res})`;\n        cxt.fail$data((0, codegen_1._) `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=multipleOf.js.map"]},"metadata":{},"sourceType":"script"}