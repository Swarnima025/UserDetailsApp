{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst code_1 = require(\"../code\");\n\nexports.error = {\n  message: _ref => {\n    let {\n      params: {\n        property,\n        depsCount,\n        deps\n      }\n    } = _ref;\n    const property_ies = depsCount === 1 ? \"property\" : \"properties\";\n    return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property} is present`;\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        property,\n        depsCount,\n        deps,\n        missingProperty\n      }\n    } = _ref2;\n    return (0, codegen_1._)`{property: ${property},\n    missingProperty: ${missingProperty},\n    depsCount: ${depsCount},\n    deps: ${deps}}`;\n  } // TODO change to reference\n\n};\nconst def = {\n  keyword: \"dependencies\",\n  type: \"object\",\n  schemaType: \"object\",\n  error: exports.error,\n\n  code(cxt) {\n    const [propDeps, schDeps] = splitDependencies(cxt);\n    validatePropertyDeps(cxt, propDeps);\n    validateSchemaDeps(cxt, schDeps);\n  }\n\n};\n\nfunction splitDependencies(_ref3) {\n  let {\n    schema\n  } = _ref3;\n  const propertyDeps = {};\n  const schemaDeps = {};\n\n  for (const key in schema) {\n    if (key === \"__proto__\") continue;\n    const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;\n    deps[key] = schema[key];\n  }\n\n  return [propertyDeps, schemaDeps];\n}\n\nfunction validatePropertyDeps(cxt) {\n  let propertyDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cxt.schema;\n  const {\n    gen,\n    data,\n    it\n  } = cxt;\n  if (Object.keys(propertyDeps).length === 0) return;\n  const missing = gen.let(\"missing\");\n\n  for (const prop in propertyDeps) {\n    const deps = propertyDeps[prop];\n    if (deps.length === 0) continue;\n    const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);\n    cxt.setParams({\n      property: prop,\n      depsCount: deps.length,\n      deps: deps.join(\", \")\n    });\n\n    if (it.allErrors) {\n      gen.if(hasProperty, () => {\n        for (const depProp of deps) {\n          (0, code_1.checkReportMissingProp)(cxt, depProp);\n        }\n      });\n    } else {\n      gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);\n      (0, code_1.reportMissingProp)(cxt, missing);\n      gen.else();\n    }\n  }\n}\n\nexports.validatePropertyDeps = validatePropertyDeps;\n\nfunction validateSchemaDeps(cxt) {\n  let schemaDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cxt.schema;\n  const {\n    gen,\n    data,\n    keyword,\n    it\n  } = cxt;\n  const valid = gen.name(\"valid\");\n\n  for (const prop in schemaDeps) {\n    if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop])) continue;\n    gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {\n      const schCxt = cxt.subschema({\n        keyword,\n        schemaProp: prop\n      }, valid);\n      cxt.mergeValidEvaluated(schCxt, valid);\n    }, () => gen.var(valid, true) // TODO var\n    );\n    cxt.ok(valid);\n  }\n}\n\nexports.validateSchemaDeps = validateSchemaDeps;\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/applicator/dependencies.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst code_1 = require(\"../code\");\nexports.error = {\n    message: ({ params: { property, depsCount, deps } }) => {\n        const property_ies = depsCount === 1 ? \"property\" : \"properties\";\n        return (0, codegen_1.str) `must have ${property_ies} ${deps} when property ${property} is present`;\n    },\n    params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._) `{property: ${property},\n    missingProperty: ${missingProperty},\n    depsCount: ${depsCount},\n    deps: ${deps}}`, // TODO change to reference\n};\nconst def = {\n    keyword: \"dependencies\",\n    type: \"object\",\n    schemaType: \"object\",\n    error: exports.error,\n    code(cxt) {\n        const [propDeps, schDeps] = splitDependencies(cxt);\n        validatePropertyDeps(cxt, propDeps);\n        validateSchemaDeps(cxt, schDeps);\n    },\n};\nfunction splitDependencies({ schema }) {\n    const propertyDeps = {};\n    const schemaDeps = {};\n    for (const key in schema) {\n        if (key === \"__proto__\")\n            continue;\n        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;\n        deps[key] = schema[key];\n    }\n    return [propertyDeps, schemaDeps];\n}\nfunction validatePropertyDeps(cxt, propertyDeps = cxt.schema) {\n    const { gen, data, it } = cxt;\n    if (Object.keys(propertyDeps).length === 0)\n        return;\n    const missing = gen.let(\"missing\");\n    for (const prop in propertyDeps) {\n        const deps = propertyDeps[prop];\n        if (deps.length === 0)\n            continue;\n        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);\n        cxt.setParams({\n            property: prop,\n            depsCount: deps.length,\n            deps: deps.join(\", \"),\n        });\n        if (it.allErrors) {\n            gen.if(hasProperty, () => {\n                for (const depProp of deps) {\n                    (0, code_1.checkReportMissingProp)(cxt, depProp);\n                }\n            });\n        }\n        else {\n            gen.if((0, codegen_1._) `${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);\n            (0, code_1.reportMissingProp)(cxt, missing);\n            gen.else();\n        }\n    }\n}\nexports.validatePropertyDeps = validatePropertyDeps;\nfunction validateSchemaDeps(cxt, schemaDeps = cxt.schema) {\n    const { gen, data, keyword, it } = cxt;\n    const valid = gen.name(\"valid\");\n    for (const prop in schemaDeps) {\n        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))\n            continue;\n        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {\n            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);\n            cxt.mergeValidEvaluated(schCxt, valid);\n        }, () => gen.var(valid, true) // TODO var\n        );\n        cxt.ok(valid);\n    }\n}\nexports.validateSchemaDeps = validateSchemaDeps;\nexports.default = def;\n//# sourceMappingURL=dependencies.js.map"]},"metadata":{},"sourceType":"script"}