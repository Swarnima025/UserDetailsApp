{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateTuple = void 0;\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst code_1 = require(\"../code\");\n\nconst def = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"array\", \"boolean\"],\n  before: \"uniqueItems\",\n\n  code(cxt) {\n    const {\n      schema,\n      it\n    } = cxt;\n    if (Array.isArray(schema)) return validateTuple(cxt, \"additionalItems\", schema);\n    it.items = true;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    cxt.ok((0, code_1.validateArray)(cxt));\n  }\n\n};\n\nfunction validateTuple(cxt, extraItems) {\n  let schArr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : cxt.schema;\n  const {\n    gen,\n    parentSchema,\n    data,\n    keyword,\n    it\n  } = cxt;\n  checkStrictTuple(parentSchema);\n\n  if (it.opts.unevaluated && schArr.length && it.items !== true) {\n    it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);\n  }\n\n  const valid = gen.name(\"valid\");\n  const len = gen.const(\"len\", (0, codegen_1._)`${data}.length`);\n  schArr.forEach((sch, i) => {\n    if ((0, util_1.alwaysValidSchema)(it, sch)) return;\n    gen.if((0, codegen_1._)`${len} > ${i}`, () => cxt.subschema({\n      keyword,\n      schemaProp: i,\n      dataProp: i\n    }, valid));\n    cxt.ok(valid);\n  });\n\n  function checkStrictTuple(sch) {\n    const {\n      opts,\n      errSchemaPath\n    } = it;\n    const l = schArr.length;\n    const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);\n\n    if (opts.strictTuples && !fullTuple) {\n      const msg = `\"${keyword}\" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path \"${errSchemaPath}\"`;\n      (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);\n    }\n  }\n}\n\nexports.validateTuple = validateTuple;\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/applicator/items.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateTuple = void 0;\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst code_1 = require(\"../code\");\nconst def = {\n    keyword: \"items\",\n    type: \"array\",\n    schemaType: [\"object\", \"array\", \"boolean\"],\n    before: \"uniqueItems\",\n    code(cxt) {\n        const { schema, it } = cxt;\n        if (Array.isArray(schema))\n            return validateTuple(cxt, \"additionalItems\", schema);\n        it.items = true;\n        if ((0, util_1.alwaysValidSchema)(it, schema))\n            return;\n        cxt.ok((0, code_1.validateArray)(cxt));\n    },\n};\nfunction validateTuple(cxt, extraItems, schArr = cxt.schema) {\n    const { gen, parentSchema, data, keyword, it } = cxt;\n    checkStrictTuple(parentSchema);\n    if (it.opts.unevaluated && schArr.length && it.items !== true) {\n        it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);\n    }\n    const valid = gen.name(\"valid\");\n    const len = gen.const(\"len\", (0, codegen_1._) `${data}.length`);\n    schArr.forEach((sch, i) => {\n        if ((0, util_1.alwaysValidSchema)(it, sch))\n            return;\n        gen.if((0, codegen_1._) `${len} > ${i}`, () => cxt.subschema({\n            keyword,\n            schemaProp: i,\n            dataProp: i,\n        }, valid));\n        cxt.ok(valid);\n    });\n    function checkStrictTuple(sch) {\n        const { opts, errSchemaPath } = it;\n        const l = schArr.length;\n        const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);\n        if (opts.strictTuples && !fullTuple) {\n            const msg = `\"${keyword}\" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path \"${errSchemaPath}\"`;\n            (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);\n        }\n    }\n}\nexports.validateTuple = validateTuple;\nexports.default = def;\n//# sourceMappingURL=items.js.map"]},"metadata":{},"sourceType":"script"}