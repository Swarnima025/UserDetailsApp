{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;\n\nfunction schemaHasRulesForType(_ref, type) {\n  let {\n    schema,\n    self\n  } = _ref;\n  const group = self.RULES.types[type];\n  return group && group !== true && shouldUseGroup(schema, group);\n}\n\nexports.schemaHasRulesForType = schemaHasRulesForType;\n\nfunction shouldUseGroup(schema, group) {\n  return group.rules.some(rule => shouldUseRule(schema, rule));\n}\n\nexports.shouldUseGroup = shouldUseGroup;\n\nfunction shouldUseRule(schema, rule) {\n  var _a;\n\n  return schema[rule.keyword] !== undefined || ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some(kwd => schema[kwd] !== undefined));\n}\n\nexports.shouldUseRule = shouldUseRule;","map":{"version":3,"sources":["../../../lib/compile/validate/applicability.ts"],"names":[],"mappings":";;;;;;;AAIA,SAAgB,qBAAhB,OAEE,IAFF,EAEgB;AAAA,MADd;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,GACc;AAEd,QAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,KAAX,CAAiB,IAAjB,CAAd;AACA,SAAO,KAAK,IAAI,KAAK,KAAK,IAAnB,IAA2B,cAAc,CAAC,MAAD,EAAS,KAAT,CAAhD;AACD;;AAND,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAQA,SAAgB,cAAhB,CAA+B,MAA/B,EAAwD,KAAxD,EAAwE;AACtE,SAAO,KAAK,CAAC,KAAN,CAAY,IAAZ,CAAkB,IAAD,IAAU,aAAa,CAAC,MAAD,EAAS,IAAT,CAAxC,CAAP;AACD;;AAFD,OAAA,CAAA,cAAA,GAAA,cAAA;;AAIA,SAAgB,aAAhB,CAA8B,MAA9B,EAAuD,IAAvD,EAAiE;;;AAC/D,SACE,MAAM,CAAC,IAAI,CAAC,OAAN,CAAN,KAAyB,SAAzB,KACA,CAAA,EAAA,GAAA,IAAI,CAAC,UAAL,CAAgB,UAAhB,MAA0B,IAA1B,IAA0B,EAAA,KAAA,KAAA,CAA1B,GAA0B,KAAA,CAA1B,GAA0B,EAAA,CAAE,IAAF,CAAQ,GAAD,IAAS,MAAM,CAAC,GAAD,CAAN,KAAgB,SAAhC,CAD1B,CADF;AAID;;AALD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;\nfunction schemaHasRulesForType({ schema, self }, type) {\n    const group = self.RULES.types[type];\n    return group && group !== true && shouldUseGroup(schema, group);\n}\nexports.schemaHasRulesForType = schemaHasRulesForType;\nfunction shouldUseGroup(schema, group) {\n    return group.rules.some((rule) => shouldUseRule(schema, rule));\n}\nexports.shouldUseGroup = shouldUseGroup;\nfunction shouldUseRule(schema, rule) {\n    var _a;\n    return (schema[rule.keyword] !== undefined ||\n        ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== undefined)));\n}\nexports.shouldUseRule = shouldUseRule;\n//# sourceMappingURL=applicability.js.map"]},"metadata":{},"sourceType":"script"}