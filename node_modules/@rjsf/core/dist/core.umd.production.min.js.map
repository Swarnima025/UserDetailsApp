{"version":3,"file":"core.umd.production.min.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/TimeWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/getDefaultRegistry.ts","../src/components/fields/index.ts","../src/components/templates/index.ts","../src/components/templates/ButtonTemplates/index.ts","../src/components/widgets/index.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import { Component, MouseEvent } from 'react';\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UiSchema,\n  ITEMS_KEY,\n} from '@rjsf/utils';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport { nanoid } from 'nanoid';\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T[], S, F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], S, F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n    nextProps: Readonly<FieldProps<T[], S, F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData) ? nextProps.formData : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema, registry } = this.props;\n    const { translateString } = registry;\n    return get(\n      schema,\n      [ITEMS_KEY, 'title'],\n      get(schema, [ITEMS_KEY, 'description'], translateString(TranslatableString.ArrayItemTitle))\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: S) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes('null');\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== 'null';\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema, registry } = this.props;\n    let { addable } = getUiOptions<T[], S, F>(uiSchema, registry.globalUiOptions);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as S;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as S;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add or add at index buttons. Creates a new row of keyed form data\n   * either at the end of the list (when index is not specified) or inserted at the `index` when it is, adding it into\n   * the state, and then returning `onChange()` with the plain form data converted from the keyed data\n   *\n   * @param event - The event for the click\n   * @param [index] - The optional index at which to add the new data\n   */\n  _handleAddClick(event: MouseEvent, index?: number) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData];\n    if (index !== undefined) {\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n    } else {\n      newKeyedFormData.push(newKeyedFormDataRow);\n    }\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  }\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    this._handleAddClick(event);\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      this._handleAddClick(event, index);\n    };\n  };\n\n  /** Callback handler for when the user clicks on the copy button on an existing array element. Clones the row of\n   * keyed form data at the `index` into the next position in the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the copy button is clicked\n   */\n  onCopyIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: cloneDeep(keyedFormData[index].item),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      if (index !== undefined) {\n        newKeyedFormData.splice(index + 1, 0, newKeyedFormDataRow);\n      } else {\n        newKeyedFormData.push(newKeyedFormDataRow);\n      }\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === 'undefined' ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils, translateString } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T[], S, F>(\n        'UnsupportedFieldTemplate',\n        registry,\n        uiOptions\n      );\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason={translateString(TranslatableString.MissingItems)}\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], S, F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = '_',\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const _schemaItems: S = isObject(schema.items) ? (schema.items as S) : ({} as S);\n    const itemsSchema: S = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const canAdd = this.canAddItem(formData);\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(schema.items as S, items);\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = 'select', ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = 'files', ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=''\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = '_',\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems: S[] = isObject(schema.items) ? (schema.items as S[]) : ([] as S[]);\n    const itemSchemas = _schemaItems.map((item: S, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems as S, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const canAdd = this.canAddItem(items) && !!additionalSchema;\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      className: 'field field-array field-array-fixed-items',\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems as S, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canAdd: boolean;\n    canRemove?: boolean;\n    canMoveUp: boolean;\n    canMoveDown: boolean;\n    itemSchema: S;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], S, F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], S, F>['onBlur'];\n    onFocus: FieldProps<T[], S, F>['onFocus'];\n    rawErrors?: string[];\n    totalItems: number;\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canAdd,\n      canRemove = true,\n      canMoveUp,\n      canMoveDown,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n      totalItems,\n    } = props;\n    const { disabled, hideError, idPrefix, idSeparator, readonly, uiSchema, registry, formContext } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n      globalUiOptions,\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true, copyable = false } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      copy: copyable && canAdd,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: 'array-item',\n      disabled,\n      canAdd,\n      hasCopy: has.copy,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      totalItems,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onCopyIndexClick: this.onCopyIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      schema: itemSchema,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n","import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  FormContextType,\n  EnumOptionsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext, translateString } = registry;\n  const { widget = 'checkbox', ...options } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n  const yes = translateString(TranslatableString.YesLabel);\n  const no = translateString(TranslatableString.NoLabel);\n\n  let enumOptions: EnumOptionsType<S>[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList<S>({\n      oneOf: schema.oneOf\n        .map((option) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? yes : no),\n            };\n          }\n          return undefined;\n        })\n        .filter((o: any) => o) as S[], // cast away the error that typescript can't grok is fixed\n    } as unknown as S);\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (!schemaWithEnumNames.enumNames && enums.length === 2 && enums.every((v: any) => typeof v === 'boolean')) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? yes : no,\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? yes : no,\n        },\n      ];\n    } else {\n      enumOptions = optionsList<S>({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as unknown as S);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import { Component } from 'react';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport {\n  deepEquals,\n  ERRORS_KEY,\n  FieldProps,\n  FormContextType,\n  getUiOptions,\n  getWidget,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState<S extends StrictRJSFSchema = RJSFSchema> = {\n  /** The currently selected option */\n  selectedOption: number;\n  /* The option schemas after retrieving all $refs */\n  retrievedOptions: S[];\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  AnyOfFieldState<S>\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, S, F>) {\n    super(props);\n\n    const {\n      formData,\n      options,\n      registry: { schemaUtils },\n    } = this.props;\n    // cache the retrieved options in state in case they have $refs to save doing it later\n    const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n\n    this.state = {\n      retrievedOptions,\n      selectedOption: this.getMatchingOption(0, formData, retrievedOptions),\n    };\n  }\n\n  /** React lifecycle method that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(prevProps: Readonly<FieldProps<T, S, F>>, prevState: Readonly<AnyOfFieldState>) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    let newState = this.state;\n    if (!deepEquals(prevProps.options, options)) {\n      const {\n        registry: { schemaUtils },\n      } = this.props;\n      // re-cache the retrieved options in state in case they have $refs to save doing it later\n      const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n      newState = { selectedOption, retrievedOptions };\n    }\n    if (!deepEquals(formData, prevProps.formData) && idSchema.$id === prevProps.idSchema.$id) {\n      const { retrievedOptions } = newState;\n      const matchingOption = this.getMatchingOption(selectedOption, formData, retrievedOptions);\n\n      if (prevState && matchingOption !== selectedOption) {\n        newState = { selectedOption: matchingOption, retrievedOptions };\n      }\n    }\n    if (newState !== this.state) {\n      this.setState(newState);\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(selectedOption: number, formData: T | undefined, options: S[]) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getClosestMatchingOption(formData, options, selectedOption);\n    if (option > 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option - The new option value being selected\n   */\n  onOptionChange = (option?: string) => {\n    const { selectedOption, retrievedOptions } = this.state;\n    const { formData, onChange, registry } = this.props;\n    const { schemaUtils } = registry;\n    const intOption = option !== undefined ? parseInt(option, 10) : -1;\n    if (intOption === selectedOption) {\n      return;\n    }\n    const newOption = intOption >= 0 ? retrievedOptions[intOption] : undefined;\n    const oldOption = selectedOption >= 0 ? retrievedOptions[selectedOption] : undefined;\n\n    let newFormData = schemaUtils.sanitizeDataForNewSchema(newOption, oldOption, formData);\n    if (newFormData && newOption) {\n      // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n      // so that only the root objects themselves are created without adding undefined children properties\n      newFormData = schemaUtils.getDefaultFormState(newOption, newFormData, 'excludeObjectChildren') as T;\n    }\n    onChange(newFormData, undefined, this.getFieldId());\n\n    this.setState({ selectedOption: intOption });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      errorSchema = {},\n      formContext,\n      onBlur,\n      onFocus,\n      registry,\n      schema,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields, translateString } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption, retrievedOptions } = this.state;\n    const {\n      widget = 'select',\n      placeholder,\n      autofocus,\n      autocomplete,\n      title = schema.title,\n      ...uiOptions\n    } = getUiOptions<T, S, F>(uiSchema);\n    const Widget = getWidget<T, S, F>({ type: 'number' }, widget, widgets);\n    const rawErrors = get(errorSchema, ERRORS_KEY, []);\n    const fieldErrorSchema = omit(errorSchema, [ERRORS_KEY]);\n\n    const option = selectedOption >= 0 ? retrievedOptions[selectedOption] || null : null;\n    let optionSchema: S;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type ? option : Object.assign({}, option, { type: baseType });\n    }\n\n    const translateEnum: TranslatableString = title\n      ? TranslatableString.TitleOptionPrefix\n      : TranslatableString.OptionPrefix;\n    const translateParams = title ? [title] : [];\n    const enumOptions = retrievedOptions.map((opt: { title?: string }, index: number) => ({\n      label: opt.title || translateString(translateEnum, translateParams.concat(String(index + 1))),\n      value: index,\n    }));\n\n    return (\n      <div className='panel panel-default panel-body'>\n        <div className='form-group'>\n          <Widget\n            id={this.getFieldId()}\n            name={`${name}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`}\n            schema={{ type: 'number', default: 0 } as S}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            disabled={disabled || isEmpty(enumOptions)}\n            multiple={false}\n            rawErrors={rawErrors}\n            errorSchema={fieldErrorSchema}\n            value={selectedOption >= 0 ? selectedOption : undefined}\n            options={{ enumOptions, ...uiOptions }}\n            registry={registry}\n            formContext={formContext}\n            placeholder={placeholder}\n            autocomplete={autocomplete}\n            autofocus={autofocus}\n            label=''\n          />\n        </div>\n        {option !== null && <_SchemaField {...this.props} schema={optionSchema!} />}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import { useState, useCallback } from 'react';\nimport { asNumber, FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, S, F>['value']) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === '.') {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === 'string' && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, ''))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === 'string' && typeof value === 'number') {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace('.', '\\\\.') + '\\\\.?0*$');\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import { Component } from 'react';\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n  ANY_OF_KEY,\n  ONE_OF_KEY,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport unset from 'lodash/unset';\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = '' as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value } as unknown as T;\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData } as T;\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param [formData] - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData?: T) => {\n    const { uiSchema, registry } = this.props;\n    const { duplicateKeySuffixSeparator = '-' } = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (has(formData, newKey)) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema['type']) {\n    const {\n      registry: { translateString },\n    } = this.props;\n    switch (type) {\n      case 'array':\n        return [];\n      case 'boolean':\n        return false;\n      case 'null':\n        return null;\n      case 'number':\n        return 0;\n      case 'object':\n        return {};\n      case 'string':\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return translateString(TranslatableString.NewStringDefault);\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: S) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData } as T;\n\n    let type: RJSFSchema['type'] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      let apSchema = schema.additionalProperties;\n      if (REF_KEY in apSchema) {\n        const { schemaUtils } = registry;\n        apSchema = schemaUtils.retrieveSchema({ $ref: apSchema[REF_KEY] } as S, formData);\n        type = apSchema.type;\n      }\n      if (!type && (ANY_OF_KEY in apSchema || ONE_OF_KEY in apSchema)) {\n        type = 'object';\n      }\n    }\n\n    const newKey = this.getAvailableKey('newKey', newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils, translateString } = registry;\n    const { SchemaField } = fields;\n    const schema: S = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, S, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = uiOptions.title || (schema.title === undefined ? name : schema.title);\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className='config-error' style={{ color: 'red' }}>\n            <Markdown>\n              {translateString(TranslatableString.InvalidObjectField, [name || 'root', (err as Error).message])}\n            </Markdown>\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<'ObjectFieldTemplate', T, S, F>('ObjectFieldTemplate', registry, uiOptions);\n\n    const templateProps = {\n      title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [PROPERTIES_KEY, name, ADDITIONAL_PROPERTY_FLAG]);\n        const fieldUiSchema = addedByAdditionalProperties ? uiSchema.additionalProperties : uiSchema[name];\n        const hidden = getUiOptions<T, S, F>(fieldUiSchema).widget === 'hidden';\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(name, addedByAdditionalProperties)}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import { useCallback, Component } from 'react';\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  deepEquals,\n  descriptionId,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  FormContextType,\n  getSchemaType,\n  getTemplate,\n  getUiOptions,\n  ID_KEY,\n  IdSchema,\n  mergeObjects,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UI_OPTIONS_KEY,\n  UIOptionsType,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\nimport omit from 'lodash/omit';\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: 'ArrayField',\n  boolean: 'BooleanField',\n  integer: 'NumberField',\n  number: 'NumberField',\n  object: 'ObjectField',\n  string: 'StringField',\n  null: 'NullField',\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: S,\n  uiOptions: UIOptionsType<T, S, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, S, F>\n) {\n  const field = uiOptions.field;\n  const { fields, translateString } = registry;\n  if (typeof field === 'function') {\n    return field;\n  }\n  if (typeof field === 'string' && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType) ? schemaType[0] : schemaType || '';\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T, S, F>(\n          'UnsupportedFieldTemplate',\n          registry,\n          uiOptions\n        );\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={translateString(TranslatableString.UnknownFieldType, [String(schema.type)])}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils, globalUiOptions } = registry;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n  const FieldTemplate = getTemplate<'FieldTemplate', T, S, F>('FieldTemplate', registry, uiOptions);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    uiOptions\n  );\n  const FieldHelpTemplate = getTemplate<'FieldHelpTemplate', T, S, F>('FieldHelpTemplate', registry, uiOptions);\n  const FieldErrorTemplate = getTemplate<'FieldErrorTemplate', T, S, F>('FieldErrorTemplate', registry, uiOptions);\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = useCallback(\n    (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent<T, S, F>(schema, uiOptions, idSchema, registry);\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(props.readonly || uiOptions.readonly || props.schema.readOnly || schema.readOnly);\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError = uiSchemaHideError === undefined ? props.hideError : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names or style to child components\n  const fieldUiSchema = omit(uiSchema, ['ui:classNames', 'classNames', 'ui:style']);\n  if (UI_OPTIONS_KEY in fieldUiSchema) {\n    fieldUiSchema[UI_OPTIONS_KEY] = omit(fieldUiSchema[UI_OPTIONS_KEY], ['classNames', 'style']);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label = ADDITIONAL_PROPERTY_FLAG in schema ? name : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description = uiOptions.description || props.schema.description || schema.description || '';\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === 'hidden';\n\n  const classNames = ['form-group', 'field', `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push('field-error has-error has-danger');\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, S, F>, 'children'> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={descriptionId<T>(id)}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === 'string' ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(' ').trim(),\n    style: uiOptions.style,\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n  const isReplacingAnyOrOneOf = uiSchema?.['ui:field'] && uiSchema?.['ui:fieldReplacesAnyOrOneOf'] === true;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_AnyOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.anyOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            baseType={schema.type}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n        {schema.oneOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_OneOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.oneOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            baseType={schema.type}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>\n> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, S, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, S, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema) : undefined;\n  let defaultWidget = enumOptions ? 'select' : 'text';\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const { widget = defaultWidget, placeholder = '', ...options } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from 'react';\nimport { FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import {\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <DescriptionFieldTemplate\n      id={descriptionId<T>(idSchema)}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { CSSProperties } from 'react';\nimport { ArrayFieldTemplateItemType, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    hasCopy,\n    index,\n    onCopyIndexClick,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } = registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: 'bold',\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? 'col-xs-9' : 'col-xs-12'}>{children}</div>\n      {hasToolbar && (\n        <div className='col-xs-3 array-item-toolbox'>\n          <div\n            className='btn-group'\n            style={{\n              display: 'flex',\n              justifyContent: 'space-around',\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasCopy && (\n              <CopyButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onCopyIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<'ArrayFieldDescriptionTemplate', T, S, F>(\n    'ArrayFieldDescriptionTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldItemTemplate = getTemplate<'ArrayFieldItemTemplate', T, S, F>(\n    'ArrayFieldItemTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<'ArrayFieldTitleTemplate', T, S, F>(\n    'ArrayFieldTitleTemplate',\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className='row array-item-list'>\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className='array-item-add'\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import {\n  getTemplate,\n  getUiOptions,\n  titleId,\n  ArrayFieldTitleProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTitleProps<T, S, F>) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, S, F>['TitleFieldTemplate'] = getTemplate<'TitleFieldTemplate', T, S, F>(\n    'TitleFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <TitleFieldTemplate\n      id={titleId<T>(idSchema)}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  BaseInputTemplateProps,\n  examplesId,\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: BaseInputTemplateProps<T, S, F>) {\n  const {\n    id,\n    name, // remove this from ...rest\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    onChangeOverride,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log('No id for', props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === 'number' || inputProps.type === 'integer') {\n    inputValue = value || value === 0 ? value : '';\n  } else {\n    inputValue = value == null ? '' : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLInputElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(({ target: { value } }: FocusEvent<HTMLInputElement>) => onBlur(id, value), [onBlur, id]);\n  const _onFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) => onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className='form-control'\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        onChange={onChangeOverride || _onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(schema.default && !schema.examples.includes(schema.default) ? ([schema.default] as string[]) : [])\n            .map((example: any) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import { getSubmitButtonOptions, FormContextType, RJSFSchema, StrictRJSFSchema, SubmitButtonProps } from '@rjsf/utils';\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const { submitText, norender, props: submitButtonProps = {} } = getSubmitButtonOptions<T, S, F>(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button type='submit' {...submitButtonProps} className={`btn btn-info ${submitButtonProps.className}`}>\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nexport default function IconButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const { iconType = 'default', icon, className, uiSchema, registry, ...otherProps } = props;\n  return (\n    <button type='button' className={`btn btn-${iconType} ${className}`} {...otherProps}>\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function CopyButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.CopyButton)}\n      className='array-item-copy'\n      {...props}\n      icon='copy'\n    />\n  );\n}\n\nexport function MoveDownButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveDownButton)}\n      className='array-item-move-down'\n      {...props}\n      icon='arrow-down'\n    />\n  );\n}\n\nexport function MoveUpButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveUpButton)}\n      className='array-item-move-up'\n      {...props}\n      icon='arrow-up'\n    />\n  );\n}\n\nexport function RemoveButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.RemoveButton)}\n      className='array-item-remove'\n      {...props}\n      iconType='danger'\n      icon='remove'\n    />\n  );\n}\n","import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nimport IconButton from './IconButton';\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  className,\n  onClick,\n  disabled,\n  registry,\n}: IconButtonProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='row'>\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType='info'\n          icon='plus'\n          className='btn-add col-xs-12'\n          title={translateString(TranslatableString.AddButton)}\n          onClick={onClick}\n          disabled={disabled}\n          registry={registry}\n        />\n      </p>\n    </div>\n  );\n}\n","import { DescriptionFieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === 'string') {\n    return (\n      <p id={id} className='field-description'>\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className='field-description'>\n        {description}\n      </div>\n    );\n  }\n}\n","import {\n  ErrorListProps,\n  FormContextType,\n  RJSFValidationError,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  errors,\n  registry,\n}: ErrorListProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='panel panel-danger errors'>\n      <div className='panel-heading'>\n        <h3 className='panel-title'>{translateString(TranslatableString.ErrorsLabel)}</h3>\n      </div>\n      <ul className='list-group'>\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className='list-group-item text-danger'>\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","const REQUIRED_FIELD_SYMBOL = '*';\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className='control-label' htmlFor={id}>\n      {label}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from '@rjsf/utils';\n\nimport Label from './Label';\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const { id, label, children, errors, help, description, hidden, required, displayLabel, registry, uiSchema } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<'WrapIfAdditionalTemplate', T, S, F>(\n    'WrapIfAdditionalTemplate',\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className='hidden'>{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import { errorId, FieldErrorProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = errorId<T>(idSchema);\n\n  return (\n    <div>\n      <ul id={id} className='error-detail bs-callout bs-callout-info'>\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className='text-danger' key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import { helpId, FieldHelpProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = helpId<T>(idSchema);\n  if (typeof help === 'string') {\n    return (\n      <p id={id} className='help-block'>\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className='help-block'>\n      {help}\n    </div>\n  );\n}\n","import {\n  FormContextType,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  titleId,\n} from '@rjsf/utils';\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<'TitleFieldTemplate', T, S, F>('TitleFieldTemplate', registry, options);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={titleId<T>(idSchema)}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(idSchema)}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand<T, S, F>(schema, uiSchema, formData) && (\n        <AddButton\n          className='object-property-expand'\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import { FormContextType, TitleFieldProps, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nconst REQUIRED_FIELD_SYMBOL = '*';\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: TitleFieldProps<T, S, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TranslatableString, UnsupportedFieldProps } from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: UnsupportedFieldProps<T, S, F>\n) {\n  const { schema, idSchema, reason, registry } = props;\n  const { translateString } = registry;\n  let translateEnum: TranslatableString = TranslatableString.UnsupportedField;\n  const translateParams: string[] = [];\n  if (idSchema && idSchema.$id) {\n    translateEnum = TranslatableString.UnsupportedFieldWithId;\n    translateParams.push(idSchema.$id);\n  }\n  if (reason) {\n    translateEnum =\n      translateEnum === TranslatableString.UnsupportedField\n        ? TranslatableString.UnsupportedFieldWithReason\n        : TranslatableString.UnsupportedFieldWithIdAndReason;\n    translateParams.push(reason);\n  }\n  return (\n    <div className='unsupported-field'>\n      <p>\n        <Markdown>{translateString(translateEnum, translateParams)}</Markdown>\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WrapIfAdditionalTemplateProps,\n} from '@rjsf/utils';\n\nimport Label from './FieldTemplate/Label';\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    style,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  const { templates, translateString } = registry;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = templates.ButtonTemplates;\n  const keyLabel = translateString(TranslatableString.KeyLabel, [label]);\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return (\n      <div className={classNames} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames} style={style}>\n      <div className='row'>\n        <div className='col-xs-5 form-additional'>\n          <div className='form-group'>\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className='form-control'\n              type='text'\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className='form-additional form-group col-xs-5'>{children}</div>\n        <div className='col-xs-2'>\n          <RemoveButton\n            className='array-item-remove btn-block'\n            style={{ border: '0' }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n            registry={registry}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react';\nimport {\n  ariaDescribedByIds,\n  parseDateString,\n  toDateString,\n  pad,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: 'year',\n      range: yearsRange,\n      value: year,\n    },\n    { type: 'month', range: [1, 12], value: month },\n    { type: 'day', range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: 'hour', range: [0, 23], value: hour },\n      { type: 'minute', range: [0, 59], value: minute },\n      { type: 'second', range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  WidgetProps<T, S, F>,\n  'value' | 'name' | 'disabled' | 'readonly' | 'autofocus' | 'registry' | 'onBlur' | 'onFocus'\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  name,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + '_' + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: 'integer' } as S}\n      id={id}\n      name={name}\n      className='form-control'\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=''\n      aria-describedby={ariaDescribedByIds<T>(rootId)}\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  name,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const { translateString } = registry;\n  const [lastValue, setLastValue] = useState(value);\n  const [state, setState] = useReducer((state: DateObject, action: Partial<DateObject>) => {\n    return { ...state, ...action };\n  }, parseDateString(value, time));\n\n  useEffect(() => {\n    const stateValue = toDateString(state, time);\n    if (readyForChange(state) && stateValue !== value) {\n      // The user changed the date to a new valid data via the comboboxes, so call onChange\n      onChange(stateValue);\n    } else if (lastValue !== value) {\n      // We got a new value in the props\n      setLastValue(value);\n      setState(parseDateString(value, time));\n    }\n  }, [time, value, onChange, state, lastValue]);\n\n  const handleChange = useCallback((property: keyof DateObject, value: string) => {\n    setState({ [property]: value });\n  }, []);\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nextState = parseDateString(new Date().toJSON(), time);\n      onChange(toDateString(nextState, time));\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      onChange(undefined);\n    },\n    [disabled, readonly, onChange]\n  );\n\n  return (\n    <ul className='list-inline'>\n      {dateElementProps(state, time, options.yearsRange as [number, number] | undefined).map((elemProps, i) => (\n        <li className='list-inline-item' key={i}>\n          <DateElement\n            rootId={id}\n            name={name}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== 'undefined' ? !options.hideNowButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-info btn-now' onClick={handleSetNow}>\n            {translateString(TranslatableString.NowLabel)}\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== 'undefined' ? !options.hideClearButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-warning btn-clear' onClick={handleClear}>\n            {translateString(TranslatableString.ClearLabel)}\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  descriptionId,\n  getTemplate,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue<S>(schema);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? 'disabled' : ''}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(id)}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type='checkbox'\n          id={id}\n          name={id}\n          checked={typeof value === 'undefined' ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n          aria-describedby={ariaDescribedByIds<T>(id)}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsDeselectValue,\n  enumOptionsIsSelected,\n  enumOptionsSelectValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled, emptyValue },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n  return (\n    <div className='checkboxes' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = enumOptionsIsSelected<S>(option.value, checkboxesValues);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checked) {\n              onChange(enumOptionsSelectValue<S>(index, checkboxesValues, enumOptions));\n            } else {\n              onChange(enumOptionsDeselectValue<S>(index, checkboxesValues, enumOptions));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type='checkbox'\n                id={optionId(id, index)}\n                name={id}\n                checked={checked}\n                value={String(index)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label key={index} className={`checkbox-inline ${disabledCls}`}>\n              {checkbox}\n            </label>\n          ) : (\n            <div key={index} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='color' {...props} disabled={disabled || readonly} />;\n}\n","import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value || undefined), [onChange]);\n\n  return <BaseInputTemplate type='date' {...props} onChange={handleChange} />;\n}\n","import {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return (\n    <BaseInputTemplate\n      type='datetime-local'\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='email' {...props} />;\n}\n","import { ChangeEvent, useCallback, useMemo, useState } from 'react';\nimport {\n  dataURItoBlob,\n  getTemplate,\n  FormContextType,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(';base64', `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === 'string') {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  filesInfo,\n  registry,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n  registry: Registry<T, S, F>;\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  const { translateString } = registry;\n  return (\n    <ul className='file-info'>\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <Markdown>{translateString(TranslatableString.FilesInfo, [name, type, String(size)])}</Markdown>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => dataURL)\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, multiple, onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const extractedFilesInfo = useMemo(\n    () => (Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value])),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] = useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <BaseInputTemplate\n        {...props}\n        disabled={disabled || readonly}\n        type='file'\n        onChangeOverride={handleChange}\n        value=''\n        accept={options.accept ? String(options.accept) : undefined}\n      />\n      <FilesInfo<T, S, F> filesInfo={filesInfo} registry={registry} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  value,\n}: WidgetProps<T, S, F>) {\n  return <input type='hidden' id={id} name={id} value={typeof value === 'undefined' ? '' : value} />;\n}\n\nexport default HiddenWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='password' {...props} />;\n}\n","import { FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIsSelected,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline, emptyValue } = options;\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n\n  return (\n    <div className='field-radio-group' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = enumOptionsIsSelected<S>(option.value, value);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type='radio'\n                id={optionId(id, i)}\n                checked={checked}\n                name={name}\n                required={required}\n                value={String(i)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={i} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={i} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className='field-range-wrapper'>\n      <BaseInputTemplate type='range' {...props} />\n      <span className='range-view'>{value}</span>\n    </div>\n  );\n}\n","import { ChangeEvent, FocusEvent, SyntheticEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction getValue(event: SyntheticEvent<HTMLSelectElement>, multiple: boolean) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n  const emptyValue = multiple ? [] : '';\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  const selectedIndexes = enumOptionsIndexForValue<S>(value, enumOptions, multiple);\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className='form-control'\n      value={typeof selectedIndexes === 'undefined' ? emptyValue : selectedIndexes}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {!multiple && schema.default === undefined && <option value=''>{placeholder}</option>}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) !== -1;\n          return (\n            <option key={i} value={String(i)} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport { ariaDescribedByIds, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className='form-control'\n      value={value ? value : ''}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate {...props} />;\n}\n","import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TimeWidget` component uses the `BaseInputTemplate` changing the type to `time` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value ? `${value}:00` : undefined), [onChange]);\n\n  return <BaseInputTemplate type='time' {...props} onChange={handleChange} />;\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='url' {...props} />;\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='number' {...props} />;\n}\n","import { englishStringTranslator, FormContextType, Registry, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport fields from './components/fields';\nimport templates from './components/templates';\nimport widgets from './components/widgets';\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, 'schemaUtils'> {\n  return {\n    fields: fields<T, S, F>(),\n    templates: templates<T, S, F>(),\n    widgets: widgets<T, S, F>(),\n    rootSchema: {} as S,\n    formContext: {} as F,\n    translateString: englishStringTranslator,\n  };\n}\n","import { Field, FormContextType, RegistryFieldsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport ArrayField from './ArrayField';\nimport BooleanField from './BooleanField';\nimport MultiSchemaField from './MultiSchemaField';\nimport NumberField from './NumberField';\nimport ObjectField from './ObjectField';\nimport SchemaField from './SchemaField';\nimport StringField from './StringField';\nimport NullField from './NullField';\n\nfunction fields<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryFieldsType<T, S, F> {\n  return {\n    AnyOfField: MultiSchemaField,\n    ArrayField: ArrayField as unknown as Field<T, S, F>,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField,\n    NumberField,\n    ObjectField,\n    OneOfField: MultiSchemaField,\n    SchemaField,\n    StringField,\n    NullField,\n  };\n}\n\nexport default fields;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport ArrayFieldDescriptionTemplate from './ArrayFieldDescriptionTemplate';\nimport ArrayFieldItemTemplate from './ArrayFieldItemTemplate';\nimport ArrayFieldTemplate from './ArrayFieldTemplate';\nimport ArrayFieldTitleTemplate from './ArrayFieldTitleTemplate';\nimport BaseInputTemplate from './BaseInputTemplate';\nimport ButtonTemplates from './ButtonTemplates';\nimport DescriptionField from './DescriptionField';\nimport ErrorList from './ErrorList';\nimport FieldTemplate from './FieldTemplate';\nimport FieldErrorTemplate from './FieldErrorTemplate';\nimport FieldHelpTemplate from './FieldHelpTemplate';\nimport ObjectFieldTemplate from './ObjectFieldTemplate';\nimport TitleField from './TitleField';\nimport UnsupportedField from './UnsupportedField';\nimport WrapIfAdditionalTemplate from './WrapIfAdditionalTemplate';\n\nfunction templates<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(): TemplatesType<\n  T,\n  S,\n  F\n> {\n  return {\n    ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    ArrayFieldTitleTemplate,\n    ButtonTemplates: ButtonTemplates<T, S, F>(),\n    BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default templates;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport SubmitButton from './SubmitButton';\nimport AddButton from './AddButton';\nimport { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } from './IconButton';\n\nfunction buttonTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F>['ButtonTemplates'] {\n  return {\n    SubmitButton,\n    AddButton,\n    CopyButton,\n    MoveDownButton,\n    MoveUpButton,\n    RemoveButton,\n  };\n}\n\nexport default buttonTemplates;\n","import { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport AltDateWidget from './AltDateWidget';\nimport AltDateTimeWidget from './AltDateTimeWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport CheckboxesWidget from './CheckboxesWidget';\nimport ColorWidget from './ColorWidget';\nimport DateWidget from './DateWidget';\nimport DateTimeWidget from './DateTimeWidget';\nimport EmailWidget from './EmailWidget';\nimport FileWidget from './FileWidget';\nimport HiddenWidget from './HiddenWidget';\nimport PasswordWidget from './PasswordWidget';\nimport RadioWidget from './RadioWidget';\nimport RangeWidget from './RangeWidget';\nimport SelectWidget from './SelectWidget';\nimport TextareaWidget from './TextareaWidget';\nimport TextWidget from './TextWidget';\nimport TimeWidget from './TimeWidget';\nimport URLWidget from './URLWidget';\nimport UpDownWidget from './UpDownWidget';\n\nfunction widgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    AltDateWidget,\n    AltDateTimeWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n    ColorWidget,\n    DateWidget,\n    DateTimeWidget,\n    EmailWidget,\n    FileWidget,\n    HiddenWidget,\n    PasswordWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    TextWidget,\n    TextareaWidget,\n    TimeWidget,\n    UpDownWidget,\n    URLWidget,\n  };\n}\n\nexport default widgets;\n","import { Component, ElementType, FormEvent, ReactNode, Ref, RefObject, createRef } from 'react';\nimport {\n  createSchemaUtils,\n  CustomValidator,\n  deepEquals,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  GenericObjectType,\n  getTemplate,\n  getUiOptions,\n  IdSchema,\n  isObject,\n  mergeObjects,\n  NAME_KEY,\n  PathSchema,\n  StrictRJSFSchema,\n  Registry,\n  RegistryFieldsType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  RJSFValidationError,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n  SchemaUtilsType,\n  shouldRender,\n  TemplatesType,\n  UiSchema,\n  UI_GLOBAL_OPTIONS_KEY,\n  ValidationData,\n  ValidatorType,\n} from '@rjsf/utils';\nimport _get from 'lodash/get';\nimport _isEmpty from 'lodash/isEmpty';\nimport _pick from 'lodash/pick';\nimport _toPath from 'lodash/toPath';\n\nimport getDefaultRegistry from '../getDefaultRegistry';\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T, S, F>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, S, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, S, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, S, F>, 'ButtonTemplates'>> & {\n    ButtonTemplates?: Partial<TemplatesType<T, S, F>['ButtonTemplates']>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, S, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, S, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, S, F>, event: FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T, S, F>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `top` by default\n   */\n  showErrorList?: false | 'top' | 'bottom';\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer<T, S, F>;\n  /** If set to true, then the first field with an error will receive the focus when the form is submitted with errors\n   */\n  focusOnFirstError?: boolean;\n  /** Optional string translation function, if provided, allows users to change the translation of the RJSF internal\n   * strings. Some strings contain replaceable parameter values as indicated by `%1`, `%2`, etc. The number after the\n   * `%` indicates the order of the parameter. The ordering of parameters is important because some languages may choose\n   * to put the second parameter before the first in its translation.\n   */\n  translateString?: Registry['translateString'];\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: ElementType;\n  /** Support receiving a React ref to the Form\n   */\n  ref?: Ref<Form<T, S, F>>;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, S, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T, S, F>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData?: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  extends Omit<FormState<T, S, F>, 'schemaValidationErrors' | 'schemaValidationErrorSchema'> {\n  /** The status of the form when submitted */\n  status?: 'submitted';\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, S, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error('A validator is required for Form functionality to work');\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (this.props.onChange && !deepEquals(this.state.formData, this.props.formData)) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, S, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(props: FormProps<T, S, F>, inputFormData?: T): FormState<T, S, F> {\n    const state: FormState<T, S, F> = this.state || {};\n    const schema = 'schema' in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, S, F> = ('uiSchema' in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== 'undefined';\n    const liveValidate = 'liveValidate' in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T, S, F> = state.schemaUtils;\n    if (!schemaUtils || schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)) {\n      schemaUtils = createSchemaUtils<T, S, F>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(schema, inputFormData) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] = state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> = state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData({ errorSchema, errors }, props.extraErrors);\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema['ui:rootFieldId'],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, S, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(nextProps: FormProps<T, S, F>, nextState: FormState<T, S, F>): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T | undefined,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T, S, F>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils ? altSchemaUtils : this.state.schemaUtils;\n    const { customValidate, transformErrors, uiSchema } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(formData, resolvedSchema, customValidate, transformErrors, uiSchema);\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, S, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { formContext } = this.props;\n    const options = getUiOptions<T, S, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<'ErrorListTemplate', T, S, F>('ErrorListTemplate', registry, options);\n\n    if (errors && errors.length) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n          registry={registry}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T | undefined, fields: string[][]): T | undefined => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== 'object') {\n      return formData;\n    }\n\n    // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n    const data: GenericObjectType = _pick(formData, fields as unknown as string[]);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param [formData] - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData?: T): string[][] => {\n    const getAllPaths = (_obj: GenericObjectType, acc: string[][] = [], paths: string[][] = [[]]) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === 'object') {\n          const newPaths = paths.map((path) => [...path, key]);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (_obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] && _obj[key][NAME_KEY] !== '') {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== '') {\n          paths.forEach((path) => {\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== 'object' || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const { extraErrors, omitExtraData, liveOmit, noValidate, liveValidate, onChange } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, S, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', formData);\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, 'preventDuplicates') as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(state as FormState<T, S, F>, () => onChange && onChange({ ...this.state, ...state }, id));\n  };\n\n  /**\n   * Callback function to handle reset form data.\n   * - Reset all fields with default values.\n   * - Reset validations and errors\n   *\n   */\n  reset = () => {\n    const { onChange } = this.props;\n    const newState = this.getStateFromProps(this.props, undefined);\n    const newFormData = newState.formData;\n    const state = {\n      formData: newFormData,\n      errorSchema: {},\n      errors: [] as unknown,\n      schemaValidationErrors: [] as unknown,\n      schemaValidationErrorSchema: {},\n    } as FormState<T, S, F>;\n\n    this.setState(state, () => onChange && onChange({ ...this.state, ...state }));\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', newFormData);\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors ? schemaUtils.getValidator().toErrorList(extraErrors) : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit({ ...this.state, formData: newFormData, status: 'submitted' }, event);\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, S, F> {\n    const { translateString: customTranslateString, uiSchema = {} } = this.props;\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext, translateString } = getDefaultRegistry<T, S, F>();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n      translateString: customTranslateString || translateString,\n      globalUiOptions: uiSchema[UI_GLOBAL_OPTIONS_KEY],\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent('submit', {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Attempts to focus on the field associated with the `error`. Uses the `property` field to compute path of the error\n   * field, then, using the `idPrefix` and `idSeparator` converts that path into an id. Then the input element with that\n   * id is attempted to be found using the `formElement` ref. If it is located, then it is focused.\n   *\n   * @param error - The error on which to focus\n   */\n  focusOnError(error: RJSFValidationError) {\n    const { idPrefix = 'root', idSeparator = '_' } = this.props;\n    const { property } = error;\n    const path = _toPath(property);\n    if (path[0] === '') {\n      // Most of the time the `.foo` property results in the first element being empty, so replace it with the idPrefix\n      path[0] = idPrefix;\n    } else {\n      // Otherwise insert the idPrefix into the first location using unshift\n      path.unshift(idPrefix);\n    }\n\n    const elementId = path.join(idSeparator);\n    let field = this.formElement.current.elements[elementId];\n    if (!field) {\n      // if not an exact match, try finding an input starting with the element id (like radio buttons or checkboxes)\n      field = this.formElement.current.querySelector(`input[id^=${elementId}`);\n    }\n    if (field) {\n      field.focus();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, focusOnFirstError, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      if (focusOnFirstError) {\n        this.focusOnError(schemaValidation.errors[0]);\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error('Form validation failed', errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = '',\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      showErrorList = 'top',\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || 'form';\n\n    return (\n      <FormTag\n        className={className ? className : 'rjsf'}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {showErrorList === 'top' && this.renderErrors(registry)}\n        <_SchemaField\n          name=''\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} registry={registry} />}\n        {showErrorList === 'bottom' && this.renderErrors(registry)}\n      </FormTag>\n    );\n  }\n}\n","import { ComponentType, ForwardedRef, forwardRef } from 'react';\nimport Form, { FormProps } from './components/Form';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  FormProps<T, S, F>,\n  'fields' | 'templates' | 'widgets' | '_internalFormWrapper'\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  themeProps: ThemeProps<T, S, F>\n): ComponentType<FormProps<T, S, F>> {\n  return forwardRef(\n    ({ fields, widgets, templates, ...directProps }: FormProps<T, S, F>, ref: ForwardedRef<Form<T, S, F>>) => {\n      fields = { ...themeProps?.fields, ...fields };\n      widgets = { ...themeProps?.widgets, ...widgets };\n      templates = {\n        ...themeProps?.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, S, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","_Component","props","_this","call","this","_getNewFormDataRow","_this$props","schema","schemaUtils","registry","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","_handleAddClick","onAddIndexClick","index","onCopyIndexClick","preventDefault","onChange","state","newKeyedFormDataRow","cloneDeep","newKeyedFormData","concat","undefined","splice","push","setState","updatedKeyedFormData","onDropIndexClick","newErrorSchema","_this$props2","errorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","_this$props3","_newKeyedFormData","slice","onChangeForIndex","value","id","_extends2","_this$props4","_extends","onSelectChange","_this$props5","idSchema","$id","_props$formData","_inheritsLoose","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","_proto","prototype","isItemRequired","type","includes","canAddItem","formItems","_this$props6","addable","getUiOptions","uiSchema","globalUiOptions","maxItems","render","_this$props7","translateString","ITEMS_KEY","uiOptions","UnsupportedFieldTemplate","getTemplate","_jsx","reason","TranslatableString","MissingItems","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","_this2","_this$props8","_this$props8$uiSchema","name","_this$props8$disabled","disabled","_this$props8$readonly","readonly","_this$props8$autofocu","autofocus","_this$props8$required","required","onBlur","onFocus","idPrefix","_this$props8$idSepara","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","canAdd","arrayProps","itemCast","itemErrorSchema","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","totalItems","className","Template","_this$props9","_this$props9$disabled","_this$props9$readonly","_this$props9$autofocu","_this$props9$required","hideError","placeholder","_this$props9$formData","widgets","_getUiOptions2","widget","options","_objectWithoutPropertiesLoose","_excluded","Widget","getWidget","multiple","label","_this$props10","_this$props10$formDat","_this$props10$disable","_this$props10$readonl","_this$props10$autofoc","_this$props10$require","enumOptions","optionsList","_getUiOptions3","_getUiOptions3$widget","_excluded2","_this$props11","_this$props11$disable","_this$props11$readonl","_this$props11$autofoc","_this$props11$require","_this$props11$formDat","_getUiOptions4","_getUiOptions4$widget","_excluded3","_this3","_this$props12","_this$props12$uiSchem","_this$props12$formDat","_this$props12$idSepar","_this$props12$disable","_this$props12$readonl","_this$props12$autofoc","_this$props12$require","_this$props$formData","itemSchemas","additionalSchema","additional","canRemove","_props$canRemove","_this$props13","_registry$fields","fields","ItemSchemaField","ArraySchemaField","SchemaField","_getUiOptions5","_getUiOptions5$ordera","orderable","_getUiOptions5$remova","removable","_getUiOptions5$copyab","copyable","has","moveUp","moveDown","copy","remove","toolbar","Object","keys","some","children","jsx","hasCopy","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","get","_this$props14","ArrayItemTitle","Component","BooleanField","_getUiOptions","_getUiOptions$widget","yes","YesLabel","no","NoLabel","oneOf","option","o","_schema$enum","schemaWithEnumNames","enums","enumNames","every","v","enum","AnyOfField","onOptionChange","_this$state","selectedOption","retrievedOptions","intOption","newOption","newFormData","sanitizeDataForNewSchema","getFieldId","opt","getMatchingOption","componentDidUpdate","prevProps","newState","deepEquals","matchingOption","getClosestMatchingOption","optionSchema","baseType","_this$props5$disabled","_this$props5$errorSch","_SchemaField","_this$state2","autocomplete","_getUiOptions$title","ERRORS_KEY","fieldErrorSchema","omit","assign","translateEnum","TitleOptionPrefix","OptionPrefix","translateParams","String","_jsxs","default","isEmpty","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","_useState","useState","lastValue","setLastValue","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","_len","arguments","args","_key","apply","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","_extends3","onDropPropertyClick","copiedFormData","unset","getAvailableKey","preferredKey","_getUiOptions$duplica","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","_newKeys","_extends4","newKeys","keyValues","_ref","renamedObj","handleAddClick","apSchema","REF_KEY","$ref","ANY_OF_KEY","ONE_OF_KEY","getDefaultValue","isRequired","indexOf","NewStringDefault","orderedProperties","_this$props6$uiSchema","_this$props6$required","_this$props6$disabled","_this$props6$readonly","_schema$properties","properties","schemaProperties","description","orderProperties","order","err","style","color","Markdown","InvalidObjectField","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","SchemaFieldRender","_schema","_idSchema","_props$wasPropertyKey","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","FieldComponent","field","schemaType","getSchemaType","componentName","anyOf","UnknownFieldType","getFieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","UI_OPTIONS_KEY","help","classNames","helpComponent","hasErrors","errorsComponent","errors","fieldProps","descriptionId","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","isReplacingAnyOrOneOf","jsxs","_Fragment","isSelect","shouldComponentUpdate","_props$disabled","_props$readonly","_props$autofocus","format","defaultWidget","hasWidget","_getUiOptions$placeho","NullField","useEffect","ArrayFieldDescriptionTemplate","_options$label","ArrayFieldItemTemplate","_registry$templates$B","templates","ButtonTemplates","CopyButton","MoveDownButton","MoveUpButton","RemoveButton","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","titleId","BaseInputTemplate","onChangeOverride","rest","console","log","Error","inputValue","inputProps","getInputProps","_onChange","target","emptyValue","_onBlur","_ref2","_onFocus","_ref3","autoFocus","list","examples","examplesId","ariaDescribedByIds","example","SubmitButton","_getSubmitButtonOptio","getSubmitButtonOptions","_getSubmitButtonOptio2","submitButtonProps","norender","submitText","IconButton","_props$iconType","iconType","icon","otherProps","DescriptionField","ErrorList","ErrorsLabel","error","stack","Label","htmlFor","WrapIfAdditionalTemplate","_props$errors","errorId","elem","helpId","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","UnsupportedFieldWithId","UnsupportedFieldWithReason","UnsupportedFieldWithIdAndReason","keyLabel","KeyLabel","defaultValue","border","rangeOptions","start","stop","pad","dateElementProps","time","yearsRange","Date","getFullYear","data","range","year","month","day","hour","minute","second","DateElement","select","rootId","SelectWidget","AltDateWidget","_ref2$time","_ref2$disabled","_ref2$readonly","_ref2$autofocus","_useReducer","useReducer","action","parseDateString","stateValue","toDateString","values","readyForChange","property","_setState","handleSetNow","nextState","toJSON","handleClear","elemProps","hideNowButton","href","NowLabel","hideClearButton","ClearLabel","AltDateTimeWidget","_ref$time","CheckboxWidget","_ref$autofocus","schemaRequiresTrueValue","checked","handleBlur","handleFocus","CheckboxesWidget","_ref$options","_ref$options$inline","inline","enumDisabled","checkboxesValues","enumOptionsValueForIndex","enumOptionsIsSelected","itemDisabled","disabledCls","checkbox","optionId","enumOptionsSelectValue","enumOptionsDeselectValue","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","_event$target","result","readAsDataURL","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","_dataURItoBlob","dataURItoBlob","blob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","files","all","from","then","filesInfoEvent","newValue","accept","HiddenWidget","PasswordWidget","RadioWidget","Math","random","toString","radio","RangeWidget","getValue","selected","_ref$multiple","optEmptyVal","selectedIndexes","enumOptionsIndexForValue","TextareaWidget","_ref4","rows","TextWidget","TimeWidget","URLWidget","UpDownWidget","getDefaultRegistry","MultiSchemaField","ErrorListTemplate","rootSchema","englishStringTranslator","defaultProps","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","reset","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","_this$state3","getRegistry","_this$props$templates","customTranslateString","_this$props4$uiSchema","_getDefaultRegistry","UI_GLOBAL_OPTIONS_KEY","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","focusOnError","_this$props5$idPrefix","_this$props5$idSepara","_toPath","unshift","elementId","elements","querySelector","focus","focusOnFirstError","onError","_this$props7$classNam","tagName","method","autoComplete","enctype","acceptcharset","_this$props7$noHtml5V","noHtml5Validate","_this$props7$disabled","_this$props7$readonly","_this$props7$showErro","showErrorList","_internalFormWrapper","_this$state4","encType","acceptCharset","as","ref","themeProps","forwardRef","_themeProps$templates","_templates","directProps"],"mappings":"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"}