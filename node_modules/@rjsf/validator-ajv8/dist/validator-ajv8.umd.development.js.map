{"version":3,"file":"validator-ajv8.umd.development.js","sources":["../src/createAjvInstance.ts","../src/validator.ts","../src/customizeValidator.ts","../src/index.ts"],"sourcesContent":["import Ajv, { Options } from 'ajv';\nimport addFormats, { FormatsPluginOptions } from 'ajv-formats';\nimport isObject from 'lodash/isObject';\n\nimport { CustomValidatorOptionsType } from './types';\nimport { ADDITIONAL_PROPERTY_FLAG, RJSF_ADDITONAL_PROPERTIES_FLAG } from '@rjsf/utils';\n\nexport const AJV_CONFIG: Options = {\n  allErrors: true,\n  multipleOfPrecision: 8,\n  strict: false,\n  verbose: true,\n} as const;\nexport const COLOR_FORMAT_REGEX =\n  /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/;\nexport const DATA_URL_FORMAT_REGEX = /^data:([a-z]+\\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;\n\n/** Creates an Ajv version 8 implementation object with standard support for the 'color` and `data-url` custom formats.\n * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the\n * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If\n * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing\n * the `Ajv` instance. With Ajv v8, the JSON Schema formats are not provided by default, but can be plugged in. By\n * default, all formats from the `ajv-formats` library are added. To disable this capability, set the `ajvFormatOptions`\n * parameter to `false`. Additionally, you can configure the `ajv-formats` by providing a custom set of\n * [format options](https://github.com/ajv-validator/ajv-formats) to the `ajvFormatOptions` parameter.\n *\n * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access\n * @param [customFormats] - The set of additional custom formats that the validator will support\n * @param [ajvOptionsOverrides={}] - The set of validator config override options\n * @param [ajvFormatOptions] - The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it\n * @param [AjvClass] - The `Ajv` class to use when creating the validator instance\n */\nexport default function createAjvInstance(\n  additionalMetaSchemas?: CustomValidatorOptionsType['additionalMetaSchemas'],\n  customFormats?: CustomValidatorOptionsType['customFormats'],\n  ajvOptionsOverrides: CustomValidatorOptionsType['ajvOptionsOverrides'] = {},\n  ajvFormatOptions?: FormatsPluginOptions | false,\n  AjvClass: typeof Ajv = Ajv\n) {\n  const ajv = new AjvClass({ ...AJV_CONFIG, ...ajvOptionsOverrides });\n  if (ajvFormatOptions) {\n    addFormats(ajv, ajvFormatOptions);\n  } else if (ajvFormatOptions !== false) {\n    addFormats(ajv);\n  }\n\n  // add custom formats\n  ajv.addFormat('data-url', DATA_URL_FORMAT_REGEX);\n  ajv.addFormat('color', COLOR_FORMAT_REGEX);\n\n  // Add RJSF-specific additional properties keywords so Ajv doesn't report errors if strict is enabled.\n  ajv.addKeyword(ADDITIONAL_PROPERTY_FLAG);\n  ajv.addKeyword(RJSF_ADDITONAL_PROPERTIES_FLAG);\n\n  // add more schemas to validate against\n  if (Array.isArray(additionalMetaSchemas)) {\n    ajv.addMetaSchema(additionalMetaSchemas);\n  }\n\n  // add more custom formats to validate against\n  if (isObject(customFormats)) {\n    Object.keys(customFormats).forEach((formatName) => {\n      ajv.addFormat(formatName, customFormats[formatName]);\n    });\n  }\n\n  return ajv;\n}\n","import Ajv, { ErrorObject, ValidateFunction } from 'ajv';\nimport toPath from 'lodash/toPath';\nimport isObject from 'lodash/isObject';\nimport clone from 'lodash/clone';\nimport {\n  CustomValidator,\n  ERRORS_KEY,\n  ErrorSchema,\n  ErrorSchemaBuilder,\n  ErrorTransformer,\n  FieldValidation,\n  FormContextType,\n  FormValidation,\n  GenericObjectType,\n  getDefaultFormState,\n  mergeValidationData,\n  REF_KEY,\n  RJSFSchema,\n  RJSFValidationError,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  PROPERTIES_KEY,\n  getUiOptions,\n} from '@rjsf/utils';\nimport get from 'lodash/get';\n\nimport { CustomValidatorOptionsType, Localizer } from './types';\nimport createAjvInstance from './createAjvInstance';\n\nconst ROOT_SCHEMA_PREFIX = '__rjsf_rootSchema';\n\n/** `ValidatorType` implementation that uses the AJV 8 validation mechanism.\n */\nexport default class AJV8Validator<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  implements ValidatorType<T, S, F>\n{\n  /** The AJV instance to use for all validations\n   *\n   * @private\n   */\n  private ajv: Ajv;\n\n  /** The Localizer function to use for localizing Ajv errors\n   *\n   * @private\n   */\n  readonly localizer?: Localizer;\n\n  /** Constructs an `AJV8Validator` instance using the `options`\n   *\n   * @param options - The `CustomValidatorOptionsType` options that are used to create the AJV instance\n   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n   */\n  constructor(options: CustomValidatorOptionsType, localizer?: Localizer) {\n    const { additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass } = options;\n    this.ajv = createAjvInstance(additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass);\n    this.localizer = localizer;\n  }\n\n  /** Transforms a ajv validation errors list:\n   * [\n   *   {property: '.level1.level2[2].level3', message: 'err a'},\n   *   {property: '.level1.level2[2].level3', message: 'err b'},\n   *   {property: '.level1.level2[4].level3', message: 'err b'},\n   * ]\n   * Into an error tree:\n   * {\n   *   level1: {\n   *     level2: {\n   *       2: {level3: {errors: ['err a', 'err b']}},\n   *       4: {level3: {errors: ['err b']}},\n   *     }\n   *   }\n   * };\n   *\n   * @param errors - The list of RJSFValidationError objects\n   * @private\n   */\n  private toErrorSchema(errors: RJSFValidationError[]): ErrorSchema<T> {\n    const builder = new ErrorSchemaBuilder<T>();\n    if (errors.length) {\n      errors.forEach((error) => {\n        const { property, message } = error;\n        const path = toPath(property);\n\n        // If the property is at the root (.level1) then toPath creates\n        // an empty array element at the first index. Remove it.\n        if (path.length > 0 && path[0] === '') {\n          path.splice(0, 1);\n        }\n        if (message) {\n          builder.addErrors(message, path);\n        }\n      });\n    }\n    return builder.ErrorSchema;\n  }\n\n  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n   *\n   * @param errorSchema - The `ErrorSchema` instance to convert\n   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n   */\n  toErrorList(errorSchema?: ErrorSchema<T>, fieldPath: string[] = []) {\n    if (!errorSchema) {\n      return [];\n    }\n    let errorList: RJSFValidationError[] = [];\n    if (ERRORS_KEY in errorSchema) {\n      errorList = errorList.concat(\n        errorSchema[ERRORS_KEY]!.map((message: string) => {\n          const property = `.${fieldPath.join('.')}`;\n          return {\n            property,\n            message,\n            stack: `${property} ${message}`,\n          };\n        })\n      );\n    }\n    return Object.keys(errorSchema).reduce((acc, key) => {\n      if (key !== ERRORS_KEY) {\n        acc = acc.concat(this.toErrorList((errorSchema as GenericObjectType)[key], [...fieldPath, key]));\n      }\n      return acc;\n    }, errorList);\n  }\n\n  /** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n   *\n   * @param formData - The form data around which the error handler is created\n   * @private\n   */\n  private createErrorHandler(formData: T): FormValidation<T> {\n    const handler: FieldValidation = {\n      // We store the list of errors for this node in a property named __errors\n      // to avoid name collision with a possible sub schema field named\n      // 'errors' (see `utils.toErrorSchema`).\n      __errors: [],\n      addError(message: string) {\n        this.__errors!.push(message);\n      },\n    };\n    if (Array.isArray(formData)) {\n      return formData.reduce((acc, value, key) => {\n        return { ...acc, [key]: this.createErrorHandler(value) };\n      }, handler);\n    }\n    if (isObject(formData)) {\n      const formObject: GenericObjectType = formData as GenericObjectType;\n      return Object.keys(formObject).reduce((acc, key) => {\n        return { ...acc, [key]: this.createErrorHandler(formObject[key]) };\n      }, handler as FormValidation<T>);\n    }\n    return handler as FormValidation<T>;\n  }\n\n  /** Unwraps the `errorHandler` structure into the associated `ErrorSchema`, stripping the `addError` functions from it\n   *\n   * @param errorHandler - The `FormValidation` error handling structure\n   * @private\n   */\n  private unwrapErrorHandler(errorHandler: FormValidation<T>): ErrorSchema<T> {\n    return Object.keys(errorHandler).reduce((acc, key) => {\n      if (key === 'addError') {\n        return acc;\n      } else if (key === ERRORS_KEY) {\n        return { ...acc, [key]: (errorHandler as GenericObjectType)[key] };\n      }\n      return {\n        ...acc,\n        [key]: this.unwrapErrorHandler((errorHandler as GenericObjectType)[key]),\n      };\n    }, {} as ErrorSchema<T>);\n  }\n\n  /** Transforming the error output from ajv to format used by @rjsf/utils.\n   * At some point, components should be updated to support ajv.\n   *\n   * @param errors - The list of AJV errors to convert to `RJSFValidationErrors`\n   * @protected\n   */\n  protected transformRJSFValidationErrors(\n    errors: ErrorObject[] = [],\n    uiSchema?: UiSchema<T, S, F>\n  ): RJSFValidationError[] {\n    return errors.map((e: ErrorObject) => {\n      const { instancePath, keyword, params, schemaPath, parentSchema, ...rest } = e;\n      let { message = '' } = rest;\n      let property = instancePath.replace(/\\//g, '.');\n      let stack = `${property} ${message}`.trim();\n\n      if ('missingProperty' in params) {\n        property = property ? `${property}.${params.missingProperty}` : params.missingProperty;\n        const currentProperty: string = params.missingProperty;\n        const uiSchemaTitle = getUiOptions(get(uiSchema, `${property.replace(/^\\./, '')}`)).title;\n\n        if (uiSchemaTitle) {\n          message = message.replace(currentProperty, uiSchemaTitle);\n        } else {\n          const parentSchemaTitle = get(parentSchema, [PROPERTIES_KEY, currentProperty, 'title']);\n\n          if (parentSchemaTitle) {\n            message = message.replace(currentProperty, parentSchemaTitle);\n          }\n        }\n\n        stack = message;\n      } else {\n        const uiSchemaTitle = getUiOptions(get(uiSchema, `${property.replace(/^\\./, '')}`)).title;\n\n        if (uiSchemaTitle) {\n          stack = `'${uiSchemaTitle}' ${message}`.trim();\n        } else {\n          const parentSchemaTitle = parentSchema?.title;\n\n          if (parentSchemaTitle) {\n            stack = `'${parentSchemaTitle}' ${message}`.trim();\n          }\n        }\n      }\n\n      // put data in expected format\n      return {\n        name: keyword,\n        property,\n        message,\n        params, // specific to ajv\n        stack,\n        schemaPath,\n      };\n    });\n  }\n\n  /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use\n   * by the playground. Returns the `errors` from the validation\n   *\n   * @param schema - The schema against which to validate the form data   * @param schema\n   * @param formData - The form data to validate\n   */\n  rawValidation<Result = any>(schema: RJSFSchema, formData?: T): { errors?: Result[]; validationError?: Error } {\n    let compilationError: Error | undefined = undefined;\n    let compiledValidator: ValidateFunction | undefined;\n    if (schema['$id']) {\n      compiledValidator = this.ajv.getSchema(schema['$id']);\n    }\n    try {\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schema);\n      }\n      compiledValidator(formData);\n    } catch (err) {\n      compilationError = err as Error;\n    }\n\n    let errors;\n    if (compiledValidator) {\n      if (typeof this.localizer === 'function') {\n        this.localizer(compiledValidator.errors);\n      }\n      errors = compiledValidator.errors || undefined;\n\n      // Clear errors to prevent persistent errors, see #1104\n      compiledValidator.errors = null;\n    }\n\n    return {\n      errors: errors as unknown as Result[],\n      validationError: compilationError,\n    };\n  }\n\n  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n   * transform them in what ever way it chooses.\n   *\n   * @param formData - The form data to validate\n   * @param schema - The schema against which to validate the form data\n   * @param [customValidate] - An optional function that is used to perform custom validation\n   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n   * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n   */\n  validateFormData(\n    formData: T | undefined,\n    schema: S,\n    customValidate?: CustomValidator<T, S, F>,\n    transformErrors?: ErrorTransformer<T, S, F>,\n    uiSchema?: UiSchema<T, S, F>\n  ): ValidationData<T> {\n    const rawErrors = this.rawValidation<ErrorObject>(schema, formData);\n    const { validationError: invalidSchemaError } = rawErrors;\n    let errors = this.transformRJSFValidationErrors(rawErrors.errors, uiSchema);\n\n    if (invalidSchemaError) {\n      errors = [...errors, { stack: invalidSchemaError!.message }];\n    }\n    if (typeof transformErrors === 'function') {\n      errors = transformErrors(errors, uiSchema);\n    }\n\n    let errorSchema = this.toErrorSchema(errors);\n\n    if (invalidSchemaError) {\n      errorSchema = {\n        ...errorSchema,\n        $schema: {\n          __errors: [invalidSchemaError!.message],\n        },\n      };\n    }\n\n    if (typeof customValidate !== 'function') {\n      return { errors, errorSchema };\n    }\n\n    // Include form data with undefined values, which is required for custom validation.\n    const newFormData = getDefaultFormState<T, S, F>(this, schema, formData, schema, true) as T;\n\n    const errorHandler = customValidate(newFormData, this.createErrorHandler(newFormData), uiSchema);\n    const userErrorSchema = this.unwrapErrorHandler(errorHandler);\n    return mergeValidationData<T, S, F>(this, { errors, errorSchema }, userErrorSchema);\n  }\n\n  /** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixObject(node: S) {\n    for (const key in node) {\n      const realObj: GenericObjectType = node;\n      const value = realObj[key];\n      if (key === REF_KEY && typeof value === 'string' && value.startsWith('#')) {\n        realObj[key] = ROOT_SCHEMA_PREFIX + value;\n      } else {\n        realObj[key] = this.withIdRefPrefix(value);\n      }\n    }\n    return node;\n  }\n\n  /** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param node - The list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixArray(node: S[]): S[] {\n    for (let i = 0; i < node.length; i++) {\n      node[i] = this.withIdRefPrefix(node[i]) as S;\n    }\n    return node;\n  }\n\n  /** Validates data against a schema, returning true if the data is valid, or\n   * false otherwise. If the schema is invalid, then this function will return\n   * false.\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param formData - The form data to validate\n   * @param rootSchema - The root schema used to provide $ref resolutions\n   */\n  isValid(schema: S, formData: T | undefined, rootSchema: S) {\n    const rootSchemaId = rootSchema['$id'] ?? ROOT_SCHEMA_PREFIX;\n    try {\n      // add the rootSchema ROOT_SCHEMA_PREFIX as id.\n      // then rewrite the schema ref's to point to the rootSchema\n      // this accounts for the case where schema have references to models\n      // that lives in the rootSchema but not in the schema in question.\n      if (this.ajv.getSchema(rootSchemaId) === undefined) {\n        this.ajv.addSchema(rootSchema, rootSchemaId);\n      }\n      const schemaWithIdRefPrefix = this.withIdRefPrefix(schema) as S;\n      let compiledValidator: ValidateFunction | undefined;\n      if (schemaWithIdRefPrefix['$id']) {\n        compiledValidator = this.ajv.getSchema(schemaWithIdRefPrefix['$id']);\n      }\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schemaWithIdRefPrefix);\n      }\n      const result = compiledValidator(formData);\n      return result as boolean;\n    } catch (e) {\n      console.warn('Error encountered compiling schema:', e);\n      return false;\n    } finally {\n      // TODO: A function should be called if the root schema changes so we don't have to remove and recompile the schema every run.\n      // make sure we remove the rootSchema from the global ajv instance\n      this.ajv.removeSchema(rootSchemaId);\n    }\n  }\n\n  /** Recursively prefixes all $ref's in a schema with `ROOT_SCHEMA_PREFIX`\n   * This is used in isValid to make references to the rootSchema\n   *\n   * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @protected\n   */\n  protected withIdRefPrefix(schemaNode: S | S[]): S | S[] {\n    if (Array.isArray(schemaNode)) {\n      return this.withIdRefPrefixArray([...schemaNode]);\n    }\n    if (isObject(schemaNode)) {\n      return this.withIdRefPrefixObject(clone<S>(schemaNode));\n    }\n    return schemaNode;\n  }\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '@rjsf/utils';\n\nimport { CustomValidatorOptionsType, Localizer } from './types';\nimport AJV8Validator from './validator';\n\n/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if\n * provided.\n *\n * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance\n * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n */\nexport default function customizeValidator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(options: CustomValidatorOptionsType = {}, localizer?: Localizer): ValidatorType<T, S, F> {\n  return new AJV8Validator<T, S, F>(options, localizer);\n}\n","import customizeValidator from './customizeValidator';\n\nexport { customizeValidator };\nexport * from './types';\n\nexport default customizeValidator();\n"],"names":["AJV_CONFIG","allErrors","multipleOfPrecision","strict","verbose","COLOR_FORMAT_REGEX","DATA_URL_FORMAT_REGEX","createAjvInstance","additionalMetaSchemas","customFormats","ajvOptionsOverrides","ajvFormatOptions","AjvClass","Ajv","ajv","_extends","addFormats","addFormat","addKeyword","ADDITIONAL_PROPERTY_FLAG","RJSF_ADDITONAL_PROPERTIES_FLAG","Array","isArray","addMetaSchema","isObject","Object","keys","forEach","formatName","ROOT_SCHEMA_PREFIX","AJV8Validator","options","localizer","_proto","prototype","toErrorSchema","errors","builder","ErrorSchemaBuilder","length","error","property","message","path","toPath","splice","addErrors","ErrorSchema","toErrorList","errorSchema","fieldPath","_this","errorList","ERRORS_KEY","concat","map","join","stack","reduce","acc","key","createErrorHandler","formData","_this2","handler","__errors","addError","push","value","_extends2","formObject","_extends3","unwrapErrorHandler","errorHandler","_this3","_extends5","_extends4","transformRJSFValidationErrors","uiSchema","e","instancePath","keyword","params","schemaPath","parentSchema","rest","_objectWithoutPropertiesLoose","_excluded","_rest$message","replace","trim","missingProperty","currentProperty","uiSchemaTitle","getUiOptions","get","title","parentSchemaTitle","PROPERTIES_KEY","name","rawValidation","schema","compilationError","undefined","compiledValidator","getSchema","compile","err","validationError","validateFormData","customValidate","transformErrors","rawErrors","invalidSchemaError","$schema","newFormData","getDefaultFormState","userErrorSchema","mergeValidationData","withIdRefPrefixObject","node","realObj","REF_KEY","startsWith","withIdRefPrefix","withIdRefPrefixArray","i","isValid","rootSchema","_rootSchema$$id","rootSchemaId","addSchema","schemaWithIdRefPrefix","result","console","warn","removeSchema","schemaNode","clone","customizeValidator"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAOO,IAAMA,UAAU,GAAY;EACjCC,EAAAA,SAAS,EAAE,IAAI;EACfC,EAAAA,mBAAmB,EAAE,CAAC;EACtBC,EAAAA,MAAM,EAAE,KAAK;EACbC,EAAAA,OAAO,EAAE,IAAA;GACD,CAAA;EACH,IAAMC,kBAAkB,GAC7B,4YAA4Y,CAAA;EACvY,IAAMC,qBAAqB,GAAG,2DAA2D,CAAA;EAEhG;;;;;;;;;;;;;;EAcG;EACqB,SAAAC,iBAAiBA,CACvCC,qBAA2E,EAC3EC,aAA2D,EAC3DC,qBACAC,gBAA+C,EAC/CC,UAA0B;EAAA,EAAA,IAF1BF;MAAAA,sBAAyE,EAAE,CAAA;EAAA,GAAA;EAAA,EAAA,IAE3EE;EAAAA,IAAAA,WAAuBC,uBAAG,CAAA;EAAA,GAAA;IAE1B,IAAMC,GAAG,GAAG,IAAIF,QAAQ,CAAAG,QAAA,CAAMf,EAAAA,EAAAA,UAAU,EAAKU,mBAAmB,CAAG,CAAA,CAAA;EACnE,EAAA,IAAIC,gBAAgB,EAAE;EACpBK,IAAAA,8BAAU,CAACF,GAAG,EAAEH,gBAAgB,CAAC,CAAA;EAClC,GAAA,MAAM,IAAIA,gBAAgB,KAAK,KAAK,EAAE;MACrCK,8BAAU,CAACF,GAAG,CAAC,CAAA;EAChB,GAAA;EAED;EACAA,EAAAA,GAAG,CAACG,SAAS,CAAC,UAAU,EAAEX,qBAAqB,CAAC,CAAA;EAChDQ,EAAAA,GAAG,CAACG,SAAS,CAAC,OAAO,EAAEZ,kBAAkB,CAAC,CAAA;EAE1C;EACAS,EAAAA,GAAG,CAACI,UAAU,CAACC,8BAAwB,CAAC,CAAA;EACxCL,EAAAA,GAAG,CAACI,UAAU,CAACE,oCAA8B,CAAC,CAAA;EAE9C;EACA,EAAA,IAAIC,KAAK,CAACC,OAAO,CAACd,qBAAqB,CAAC,EAAE;EACxCM,IAAAA,GAAG,CAACS,aAAa,CAACf,qBAAqB,CAAC,CAAA;EACzC,GAAA;EAED;EACA,EAAA,IAAIgB,4BAAQ,CAACf,aAAa,CAAC,EAAE;MAC3BgB,MAAM,CAACC,IAAI,CAACjB,aAAa,CAAC,CAACkB,OAAO,CAAC,UAACC,UAAU,EAAI;QAChDd,GAAG,CAACG,SAAS,CAACW,UAAU,EAAEnB,aAAa,CAACmB,UAAU,CAAC,CAAC,CAAA;EACtD,KAAC,CAAC,CAAA;EACH,GAAA;EAED,EAAA,OAAOd,GAAG,CAAA;EACZ;;;ECpCA,IAAMe,kBAAkB,GAAG,mBAAmB,CAAA;EAE9C;EACG;EADH,IAEqBC,aAAa,gBAAA,YAAA;EAGhC;;;EAGG;;EAGH;;;EAGG;;EAGH;;;;EAIG;EACH,EAAA,SAAAA,aAAYC,CAAAA,OAAmC,EAAEC,SAAqB,EAAA;EAAA,IAAA,IAAA,CAb9DlB,GAAG,GAAA,KAAA,CAAA,CAAA;EAAA,IAAA,IAAA,CAMFkB,SAAS,GAAA,KAAA,CAAA,CAAA;EAQhB,IAAA,IAAQxB,qBAAqB,GAAqEuB,OAAO,CAAjGvB,qBAAqB;QAAEC,aAAa,GAAsDsB,OAAO,CAA1EtB,aAAa;QAAEC,mBAAmB,GAAiCqB,OAAO,CAA3DrB,mBAAmB;QAAEC,gBAAgB,GAAeoB,OAAO,CAAtCpB,gBAAgB;QAAEC,QAAQ,GAAKmB,OAAO,CAApBnB,QAAQ,CAAA;EAC7F,IAAA,IAAI,CAACE,GAAG,GAAGP,iBAAiB,CAACC,qBAAqB,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,gBAAgB,EAAEC,QAAQ,CAAC,CAAA;MACnH,IAAI,CAACoB,SAAS,GAAGA,SAAS,CAAA;EAC5B,GAAA;EAEA;;;;;;;;;;;;;;;;;;EAkBG;EAlBH,EAAA,IAAAC,MAAA,GAAAH,aAAA,CAAAI,SAAA,CAAA;EAAAD,EAAAA,MAAA,CAmBQE,aAAa,GAAb,SAAAA,aAAAA,CAAcC,MAA6B,EAAA;EACjD,IAAA,IAAMC,OAAO,GAAG,IAAIC,wBAAkB,EAAK,CAAA;MAC3C,IAAIF,MAAM,CAACG,MAAM,EAAE;EACjBH,MAAAA,MAAM,CAACT,OAAO,CAAC,UAACa,KAAK,EAAI;EACvB,QAAA,IAAQC,QAAQ,GAAcD,KAAK,CAA3BC,QAAQ;YAAEC,OAAO,GAAKF,KAAK,CAAjBE,OAAO,CAAA;EACzB,QAAA,IAAMC,IAAI,GAAGC,0BAAM,CAACH,QAAQ,CAAC,CAAA;EAE7B;EACA;EACA,QAAA,IAAIE,IAAI,CAACJ,MAAM,GAAG,CAAC,IAAII,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;EACrCA,UAAAA,IAAI,CAACE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;EAClB,SAAA;EACD,QAAA,IAAIH,OAAO,EAAE;EACXL,UAAAA,OAAO,CAACS,SAAS,CAACJ,OAAO,EAAEC,IAAI,CAAC,CAAA;EACjC,SAAA;EACH,OAAC,CAAC,CAAA;EACH,KAAA;MACD,OAAON,OAAO,CAACU,WAAW,CAAA;EAC5B,GAAA;EAEA;;;;EAIG,MAJH;IAAAd,MAAA,CAKAe,WAAW,GAAX,SAAAA,YAAYC,WAA4B,EAAEC,SAAA,EAAwB;EAAA,IAAA,IAAAC,KAAA,GAAA,IAAA,CAAA;EAAA,IAAA,IAAxBD,SAAA,KAAA,KAAA,CAAA,EAAA;EAAAA,MAAAA,SAAA,GAAsB,EAAE,CAAA;EAAA,KAAA;MAChE,IAAI,CAACD,WAAW,EAAE;EAChB,MAAA,OAAO,EAAE,CAAA;EACV,KAAA;MACD,IAAIG,SAAS,GAA0B,EAAE,CAAA;MACzC,IAAIC,gBAAU,IAAIJ,WAAW,EAAE;EAC7BG,MAAAA,SAAS,GAAGA,SAAS,CAACE,MAAM,CAC1BL,WAAW,CAACI,gBAAU,CAAE,CAACE,GAAG,CAAC,UAACb,OAAe,EAAI;EAC/C,QAAA,IAAMD,QAAQ,GAAOS,GAAAA,GAAAA,SAAS,CAACM,IAAI,CAAC,GAAG,CAAG,CAAA;UAC1C,OAAO;EACLf,UAAAA,QAAQ,EAARA,QAAQ;EACRC,UAAAA,OAAO,EAAPA,OAAO;YACPe,KAAK,EAAKhB,QAAQ,GAAIC,GAAAA,GAAAA,OAAAA;WACvB,CAAA;EACH,OAAC,CAAC,CACH,CAAA;EACF,KAAA;EACD,IAAA,OAAOjB,MAAM,CAACC,IAAI,CAACuB,WAAW,CAAC,CAACS,MAAM,CAAC,UAACC,GAAG,EAAEC,GAAG,EAAI;QAClD,IAAIA,GAAG,KAAKP,gBAAU,EAAE;UACtBM,GAAG,GAAGA,GAAG,CAACL,MAAM,CAACH,KAAI,CAACH,WAAW,CAAEC,WAAiC,CAACW,GAAG,CAAC,KAAAN,MAAA,CAAMJ,SAAS,EAAEU,CAAAA,GAAG,GAAE,CAAC,CAAA;EACjG,OAAA;EACD,MAAA,OAAOD,GAAG,CAAA;OACX,EAAEP,SAAS,CAAC,CAAA;EACf,GAAA;EAEA;;;;EAIG,MAJH;EAAAnB,EAAAA,MAAA,CAKQ4B,kBAAkB,GAAlB,SAAAA,kBAAAA,CAAmBC,QAAW,EAAA;EAAA,IAAA,IAAAC,MAAA,GAAA,IAAA,CAAA;EACpC,IAAA,IAAMC,OAAO,GAAoB;EAC/B;EACA;EACA;EACAC,MAAAA,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAA,SAAAA,QAACxB,CAAAA,OAAe,EAAA;EACtB,QAAA,IAAI,CAACuB,QAAS,CAACE,IAAI,CAACzB,OAAO,CAAC,CAAA;EAC9B,OAAA;OACD,CAAA;EACD,IAAA,IAAIrB,KAAK,CAACC,OAAO,CAACwC,QAAQ,CAAC,EAAE;QAC3B,OAAOA,QAAQ,CAACJ,MAAM,CAAC,UAACC,GAAG,EAAES,KAAK,EAAER,GAAG,EAAI;EAAA,QAAA,IAAAS,SAAA,CAAA;EACzC,QAAA,OAAAtD,QAAA,CAAY4C,EAAAA,EAAAA,GAAG,GAAAU,SAAA,OAAAA,SAAA,CAAGT,GAAG,CAAA,GAAGG,MAAI,CAACF,kBAAkB,CAACO,KAAK,CAAC,EAAAC,SAAA,EAAA,CAAA;SACvD,EAAEL,OAAO,CAAC,CAAA;EACZ,KAAA;EACD,IAAA,IAAIxC,4BAAQ,CAACsC,QAAQ,CAAC,EAAE;QACtB,IAAMQ,UAAU,GAAsBR,QAA6B,CAAA;EACnE,MAAA,OAAOrC,MAAM,CAACC,IAAI,CAAC4C,UAAU,CAAC,CAACZ,MAAM,CAAC,UAACC,GAAG,EAAEC,GAAG,EAAI;EAAA,QAAA,IAAAW,SAAA,CAAA;UACjD,OAAAxD,QAAA,KAAY4C,GAAG,GAAAY,SAAA,GAAAA,EAAAA,EAAAA,SAAA,CAAGX,GAAG,CAAA,GAAGG,MAAI,CAACF,kBAAkB,CAACS,UAAU,CAACV,GAAG,CAAC,CAAC,EAAAW,SAAA,EAAA,CAAA;SACjE,EAAEP,OAA4B,CAAC,CAAA;EACjC,KAAA;EACD,IAAA,OAAOA,OAA4B,CAAA;EACrC,GAAA;EAEA;;;;EAIG,MAJH;EAAA/B,EAAAA,MAAA,CAKQuC,kBAAkB,GAAlB,SAAAA,kBAAAA,CAAmBC,YAA+B,EAAA;EAAA,IAAA,IAAAC,MAAA,GAAA,IAAA,CAAA;EACxD,IAAA,OAAOjD,MAAM,CAACC,IAAI,CAAC+C,YAAY,CAAC,CAACf,MAAM,CAAC,UAACC,GAAG,EAAEC,GAAG,EAAI;EAAA,MAAA,IAAAe,SAAA,CAAA;QACnD,IAAIf,GAAG,KAAK,UAAU,EAAE;EACtB,QAAA,OAAOD,GAAG,CAAA;EACX,OAAA,MAAM,IAAIC,GAAG,KAAKP,gBAAU,EAAE;EAAA,QAAA,IAAAuB,SAAA,CAAA;EAC7B,QAAA,OAAA7D,QAAA,CAAA,EAAA,EAAY4C,GAAG,GAAAiB,SAAA,GAAAA,EAAAA,EAAAA,SAAA,CAAGhB,GAAG,IAAIa,YAAkC,CAACb,GAAG,CAAC,EAAAgB,SAAA,EAAA,CAAA;EACjE,OAAA;QACD,OAAA7D,QAAA,KACK4C,GAAG,GAAAgB,SAAA,GAAAA,EAAAA,EAAAA,SAAA,CACLf,GAAG,CAAA,GAAGc,MAAI,CAACF,kBAAkB,CAAEC,YAAkC,CAACb,GAAG,CAAC,CAAC,EAAAe,SAAA,EAAA,CAAA;OAE3E,EAAE,EAAoB,CAAC,CAAA;EAC1B,GAAA;EAEA;;;;;EAKG,MALH;IAAA1C,MAAA,CAMU4C,6BAA6B,GAA7B,SAAAA,8BACRzC,MAAA,EACA0C,QAA4B,EAAA;EAAA,IAAA,IAD5B1C,MAAA,KAAA,KAAA,CAAA,EAAA;EAAAA,MAAAA,MAAA,GAAwB,EAAE,CAAA;EAAA,KAAA;EAG1B,IAAA,OAAOA,MAAM,CAACmB,GAAG,CAAC,UAACwB,CAAc,EAAI;EACnC,MAAA,IAAQC,YAAY,GAAyDD,CAAC,CAAtEC,YAAY;UAAEC,OAAO,GAAgDF,CAAC,CAAxDE,OAAO;UAAEC,MAAM,GAAwCH,CAAC,CAA/CG,MAAM;UAAEC,UAAU,GAA4BJ,CAAC,CAAvCI,UAAU;UAAEC,YAAY,GAAcL,CAAC,CAA3BK,YAAY;EAAKC,QAAAA,IAAI,GAAAC,6BAAA,CAAKP,CAAC,EAAAQ,SAAA,CAAA,CAAA;EAC9E,MAAA,IAAAC,aAAA,GAAuBH,IAAI,CAArB3C,OAAO;EAAPA,QAAAA,OAAO,GAAA8C,aAAA,KAAG,KAAA,CAAA,GAAA,EAAE,GAAAA,aAAA,CAAA;QAClB,IAAI/C,QAAQ,GAAGuC,YAAY,CAACS,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;QAC/C,IAAIhC,KAAK,GAAG,CAAGhB,QAAQ,SAAIC,OAAO,EAAGgD,IAAI,EAAE,CAAA;QAE3C,IAAI,iBAAiB,IAAIR,MAAM,EAAE;UAC/BzC,QAAQ,GAAGA,QAAQ,GAAMA,QAAQ,GAAA,GAAA,GAAIyC,MAAM,CAACS,eAAe,GAAKT,MAAM,CAACS,eAAe,CAAA;EACtF,QAAA,IAAMC,eAAe,GAAWV,MAAM,CAACS,eAAe,CAAA;EACtD,QAAA,IAAME,aAAa,GAAGC,kBAAY,CAACC,uBAAG,CAACjB,QAAQ,EAAKrC,EAAAA,GAAAA,QAAQ,CAACgD,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAG,CAAC,CAACO,KAAK,CAAA;EAEzF,QAAA,IAAIH,aAAa,EAAE;YACjBnD,OAAO,GAAGA,OAAO,CAAC+C,OAAO,CAACG,eAAe,EAAEC,aAAa,CAAC,CAAA;EAC1D,SAAA,MAAM;EACL,UAAA,IAAMI,iBAAiB,GAAGF,uBAAG,CAACX,YAAY,EAAE,CAACc,oBAAc,EAAEN,eAAe,EAAE,OAAO,CAAC,CAAC,CAAA;EAEvF,UAAA,IAAIK,iBAAiB,EAAE;cACrBvD,OAAO,GAAGA,OAAO,CAAC+C,OAAO,CAACG,eAAe,EAAEK,iBAAiB,CAAC,CAAA;EAC9D,WAAA;EACF,SAAA;EAEDxC,QAAAA,KAAK,GAAGf,OAAO,CAAA;EAChB,OAAA,MAAM;EACL,QAAA,IAAMmD,cAAa,GAAGC,kBAAY,CAACC,uBAAG,CAACjB,QAAQ,EAAKrC,EAAAA,GAAAA,QAAQ,CAACgD,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAG,CAAC,CAACO,KAAK,CAAA;EAEzF,QAAA,IAAIH,cAAa,EAAE;EACjBpC,UAAAA,KAAK,GAAG,CAAIoC,GAAAA,GAAAA,cAAa,UAAKnD,OAAO,EAAGgD,IAAI,EAAE,CAAA;EAC/C,SAAA,MAAM;YACL,IAAMO,kBAAiB,GAAGb,YAAY,KAAA,IAAA,IAAZA,YAAY,KAAZA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAY,CAAEY,KAAK,CAAA;EAE7C,UAAA,IAAIC,kBAAiB,EAAE;EACrBxC,YAAAA,KAAK,GAAG,CAAIwC,GAAAA,GAAAA,kBAAiB,UAAKvD,OAAO,EAAGgD,IAAI,EAAE,CAAA;EACnD,WAAA;EACF,SAAA;EACF,OAAA;EAED;QACA,OAAO;EACLS,QAAAA,IAAI,EAAElB,OAAO;EACbxC,QAAAA,QAAQ,EAARA,QAAQ;EACRC,QAAAA,OAAO,EAAPA,OAAO;EACPwC,QAAAA,MAAM,EAANA,MAAM;EACNzB,QAAAA,KAAK,EAALA,KAAK;EACL0B,QAAAA,UAAU,EAAVA,UAAAA;SACD,CAAA;EACH,KAAC,CAAC,CAAA;EACJ,GAAA;EAEA;;;;;EAKG,MALH;IAAAlD,MAAA,CAMAmE,aAAa,GAAb,SAAAA,cAA4BC,MAAkB,EAAEvC,QAAY,EAAA;MAC1D,IAAIwC,gBAAgB,GAAsBC,SAAS,CAAA;EACnD,IAAA,IAAIC,iBAA+C,CAAA;EACnD,IAAA,IAAIH,MAAM,CAAC,KAAK,CAAC,EAAE;QACjBG,iBAAiB,GAAG,IAAI,CAAC1F,GAAG,CAAC2F,SAAS,CAACJ,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;EACtD,KAAA;MACD,IAAI;QACF,IAAIG,iBAAiB,KAAKD,SAAS,EAAE;UACnCC,iBAAiB,GAAG,IAAI,CAAC1F,GAAG,CAAC4F,OAAO,CAACL,MAAM,CAAC,CAAA;EAC7C,OAAA;QACDG,iBAAiB,CAAC1C,QAAQ,CAAC,CAAA;OAC5B,CAAC,OAAO6C,GAAG,EAAE;EACZL,MAAAA,gBAAgB,GAAGK,GAAY,CAAA;EAChC,KAAA;EAED,IAAA,IAAIvE,MAAM,CAAA;EACV,IAAA,IAAIoE,iBAAiB,EAAE;EACrB,MAAA,IAAI,OAAO,IAAI,CAACxE,SAAS,KAAK,UAAU,EAAE;EACxC,QAAA,IAAI,CAACA,SAAS,CAACwE,iBAAiB,CAACpE,MAAM,CAAC,CAAA;EACzC,OAAA;EACDA,MAAAA,MAAM,GAAGoE,iBAAiB,CAACpE,MAAM,IAAImE,SAAS,CAAA;EAE9C;QACAC,iBAAiB,CAACpE,MAAM,GAAG,IAAI,CAAA;EAChC,KAAA;MAED,OAAO;EACLA,MAAAA,MAAM,EAAEA,MAA6B;EACrCwE,MAAAA,eAAe,EAAEN,gBAAAA;OAClB,CAAA;EACH,GAAA;EAEA;;;;;;;;;;EAUG,MAVH;EAAArE,EAAAA,MAAA,CAWA4E,gBAAgB,GAAhB,SAAAA,iBACE/C,QAAuB,EACvBuC,MAAS,EACTS,cAAyC,EACzCC,eAA2C,EAC3CjC,QAA4B,EAAA;MAE5B,IAAMkC,SAAS,GAAG,IAAI,CAACZ,aAAa,CAAcC,MAAM,EAAEvC,QAAQ,CAAC,CAAA;EACnE,IAAA,IAAyBmD,kBAAkB,GAAKD,SAAS,CAAjDJ,eAAe,CAAA;MACvB,IAAIxE,MAAM,GAAG,IAAI,CAACyC,6BAA6B,CAACmC,SAAS,CAAC5E,MAAM,EAAE0C,QAAQ,CAAC,CAAA;EAE3E,IAAA,IAAImC,kBAAkB,EAAE;EACtB7E,MAAAA,MAAM,GAAAkB,EAAAA,CAAAA,MAAA,CAAOlB,MAAM,EAAE,CAAA;UAAEqB,KAAK,EAAEwD,kBAAmB,CAACvE,OAAAA;EAAO,OAAE,CAAC,CAAA,CAAA;EAC7D,KAAA;EACD,IAAA,IAAI,OAAOqE,eAAe,KAAK,UAAU,EAAE;EACzC3E,MAAAA,MAAM,GAAG2E,eAAe,CAAC3E,MAAM,EAAE0C,QAAQ,CAAC,CAAA;EAC3C,KAAA;EAED,IAAA,IAAI7B,WAAW,GAAG,IAAI,CAACd,aAAa,CAACC,MAAM,CAAC,CAAA;EAE5C,IAAA,IAAI6E,kBAAkB,EAAE;QACtBhE,WAAW,GAAAlC,QAAA,CAAA,EAAA,EACNkC,WAAW,EAAA;EACdiE,QAAAA,OAAO,EAAE;EACPjD,UAAAA,QAAQ,EAAE,CAACgD,kBAAmB,CAACvE,OAAO,CAAA;EACvC,SAAA;SACF,CAAA,CAAA;EACF,KAAA;EAED,IAAA,IAAI,OAAOoE,cAAc,KAAK,UAAU,EAAE;QACxC,OAAO;EAAE1E,QAAAA,MAAM,EAANA,MAAM;EAAEa,QAAAA,WAAW,EAAXA,WAAAA;SAAa,CAAA;EAC/B,KAAA;EAED;EACA,IAAA,IAAMkE,WAAW,GAAGC,yBAAmB,CAAU,IAAI,EAAEf,MAAM,EAAEvC,QAAQ,EAAEuC,MAAM,EAAE,IAAI,CAAM,CAAA;EAE3F,IAAA,IAAM5B,YAAY,GAAGqC,cAAc,CAACK,WAAW,EAAE,IAAI,CAACtD,kBAAkB,CAACsD,WAAW,CAAC,EAAErC,QAAQ,CAAC,CAAA;EAChG,IAAA,IAAMuC,eAAe,GAAG,IAAI,CAAC7C,kBAAkB,CAACC,YAAY,CAAC,CAAA;MAC7D,OAAO6C,yBAAmB,CAAU,IAAI,EAAE;EAAElF,MAAAA,MAAM,EAANA,MAAM;EAAEa,MAAAA,WAAW,EAAXA,WAAAA;OAAa,EAAEoE,eAAe,CAAC,CAAA;EACrF,GAAA;EAEA;;;;;EAKG,MALH;EAAApF,EAAAA,MAAA,CAMQsF,qBAAqB,GAArB,SAAAA,qBAAAA,CAAsBC,IAAO,EAAA;EACnC,IAAA,KAAK,IAAM5D,GAAG,IAAI4D,IAAI,EAAE;QACtB,IAAMC,OAAO,GAAsBD,IAAI,CAAA;EACvC,MAAA,IAAMpD,KAAK,GAAGqD,OAAO,CAAC7D,GAAG,CAAC,CAAA;EAC1B,MAAA,IAAIA,GAAG,KAAK8D,aAAO,IAAI,OAAOtD,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACuD,UAAU,CAAC,GAAG,CAAC,EAAE;EACzEF,QAAAA,OAAO,CAAC7D,GAAG,CAAC,GAAG/B,kBAAkB,GAAGuC,KAAK,CAAA;EAC1C,OAAA,MAAM;UACLqD,OAAO,CAAC7D,GAAG,CAAC,GAAG,IAAI,CAACgE,eAAe,CAACxD,KAAK,CAAC,CAAA;EAC3C,OAAA;EACF,KAAA;EACD,IAAA,OAAOoD,IAAI,CAAA;EACb,GAAA;EAEA;;;;;EAKG,MALH;EAAAvF,EAAAA,MAAA,CAMQ4F,oBAAoB,GAApB,SAAAA,oBAAAA,CAAqBL,IAAS,EAAA;EACpC,IAAA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAACjF,MAAM,EAAEuF,CAAC,EAAE,EAAE;EACpCN,MAAAA,IAAI,CAACM,CAAC,CAAC,GAAG,IAAI,CAACF,eAAe,CAACJ,IAAI,CAACM,CAAC,CAAC,CAAM,CAAA;EAC7C,KAAA;EACD,IAAA,OAAON,IAAI,CAAA;EACb,GAAA;EAEA;;;;;;;EAOG,MAPH;IAAAvF,MAAA,CAQA8F,OAAO,GAAP,SAAAA,OAAAA,CAAQ1B,MAAS,EAAEvC,QAAuB,EAAEkE,UAAa,EAAA;EAAA,IAAA,IAAAC,eAAA,CAAA;MACvD,IAAMC,YAAY,GAAAD,CAAAA,eAAA,GAAGD,UAAU,CAAC,KAAK,CAAC,KAAA,IAAA,GAAAC,eAAA,GAAIpG,kBAAkB,CAAA;MAC5D,IAAI;EACF;EACA;EACA;EACA;QACA,IAAI,IAAI,CAACf,GAAG,CAAC2F,SAAS,CAACyB,YAAY,CAAC,KAAK3B,SAAS,EAAE;UAClD,IAAI,CAACzF,GAAG,CAACqH,SAAS,CAACH,UAAU,EAAEE,YAAY,CAAC,CAAA;EAC7C,OAAA;EACD,MAAA,IAAME,qBAAqB,GAAG,IAAI,CAACR,eAAe,CAACvB,MAAM,CAAM,CAAA;EAC/D,MAAA,IAAIG,iBAA+C,CAAA;EACnD,MAAA,IAAI4B,qBAAqB,CAAC,KAAK,CAAC,EAAE;UAChC5B,iBAAiB,GAAG,IAAI,CAAC1F,GAAG,CAAC2F,SAAS,CAAC2B,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAA;EACrE,OAAA;QACD,IAAI5B,iBAAiB,KAAKD,SAAS,EAAE;UACnCC,iBAAiB,GAAG,IAAI,CAAC1F,GAAG,CAAC4F,OAAO,CAAC0B,qBAAqB,CAAC,CAAA;EAC5D,OAAA;EACD,MAAA,IAAMC,MAAM,GAAG7B,iBAAiB,CAAC1C,QAAQ,CAAC,CAAA;EAC1C,MAAA,OAAOuE,MAAiB,CAAA;OACzB,CAAC,OAAOtD,CAAC,EAAE;EACVuD,MAAAA,OAAO,CAACC,IAAI,CAAC,qCAAqC,EAAExD,CAAC,CAAC,CAAA;EACtD,MAAA,OAAO,KAAK,CAAA;EACb,KAAA,SAAS;EACR;EACA;EACA,MAAA,IAAI,CAACjE,GAAG,CAAC0H,YAAY,CAACN,YAAY,CAAC,CAAA;EACpC,KAAA;EACH,GAAA;EAEA;;;;;EAKG,MALH;EAAAjG,EAAAA,MAAA,CAMU2F,eAAe,GAAf,SAAAA,eAAAA,CAAgBa,UAAmB,EAAA;EAC3C,IAAA,IAAIpH,KAAK,CAACC,OAAO,CAACmH,UAAU,CAAC,EAAE;EAC7B,MAAA,OAAO,IAAI,CAACZ,oBAAoB,IAAAvE,MAAA,CAAKmF,UAAU,CAAE,CAAA,CAAA;EAClD,KAAA;EACD,IAAA,IAAIjH,4BAAQ,CAACiH,UAAU,CAAC,EAAE;QACxB,OAAO,IAAI,CAAClB,qBAAqB,CAACmB,yBAAK,CAAID,UAAU,CAAC,CAAC,CAAA;EACxD,KAAA;EACD,IAAA,OAAOA,UAAU,CAAA;KAClB,CAAA;EAAA,EAAA,OAAA3G,aAAA,CAAA;EAAA,CAAA,EAAA;;ECrZH;;;;;EAKG;EACqB,SAAA6G,kBAAkBA,CAIxC5G,OAAsC,EAAIC,SAAqB,EAAA;EAAA,EAAA,IAA/DD,OAAsC,KAAA,KAAA,CAAA,EAAA;MAAtCA,OAAsC,GAAA,EAAE,CAAA;EAAA,GAAA;EACxC,EAAA,OAAO,IAAID,aAAa,CAAUC,OAAO,EAAEC,SAAS,CAAC,CAAA;EACvD;;ACZA,cAAA,aAAe2G,kBAAkB,EAAE;;;;;;;;;;;"}